/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.AttemptStatus;
import com.hyperswitch.model.AuthenticationType;
import com.hyperswitch.model.CaptureMethod;
import com.hyperswitch.model.Currency;
import com.hyperswitch.model.PaymentExperience;
import com.hyperswitch.model.PaymentMethod;
import com.hyperswitch.model.PaymentMethodType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Test;


/**
 * Model tests for PaymentAttemptResponse
 */
class PaymentAttemptResponseTest {
    private final PaymentAttemptResponse model = new PaymentAttemptResponse();

    /**
     * Model tests for PaymentAttemptResponse
     */
    @Test
    void testPaymentAttemptResponse() {
        // TODO: test PaymentAttemptResponse
    }

    /**
     * Test the property 'attemptId'
     */
    @Test
    void attemptIdTest() {
        // TODO: test attemptId
    }

    /**
     * Test the property 'status'
     */
    @Test
    void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'amount'
     */
    @Test
    void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'currency'
     */
    @Test
    void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'connector'
     */
    @Test
    void connectorTest() {
        // TODO: test connector
    }

    /**
     * Test the property 'errorMessage'
     */
    @Test
    void errorMessageTest() {
        // TODO: test errorMessage
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'connectorTransactionId'
     */
    @Test
    void connectorTransactionIdTest() {
        // TODO: test connectorTransactionId
    }

    /**
     * Test the property 'captureMethod'
     */
    @Test
    void captureMethodTest() {
        // TODO: test captureMethod
    }

    /**
     * Test the property 'authenticationType'
     */
    @Test
    void authenticationTypeTest() {
        // TODO: test authenticationType
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'modifiedAt'
     */
    @Test
    void modifiedAtTest() {
        // TODO: test modifiedAt
    }

    /**
     * Test the property 'cancellationReason'
     */
    @Test
    void cancellationReasonTest() {
        // TODO: test cancellationReason
    }

    /**
     * Test the property 'mandateId'
     */
    @Test
    void mandateIdTest() {
        // TODO: test mandateId
    }

    /**
     * Test the property 'errorCode'
     */
    @Test
    void errorCodeTest() {
        // TODO: test errorCode
    }

    /**
     * Test the property 'paymentToken'
     */
    @Test
    void paymentTokenTest() {
        // TODO: test paymentToken
    }

    /**
     * Test the property 'connectorMetadata'
     */
    @Test
    void connectorMetadataTest() {
        // TODO: test connectorMetadata
    }

    /**
     * Test the property 'paymentExperience'
     */
    @Test
    void paymentExperienceTest() {
        // TODO: test paymentExperience
    }

    /**
     * Test the property 'paymentMethodType'
     */
    @Test
    void paymentMethodTypeTest() {
        // TODO: test paymentMethodType
    }

    /**
     * Test the property 'referenceId'
     */
    @Test
    void referenceIdTest() {
        // TODO: test referenceId
    }

    /**
     * Test the property 'unifiedCode'
     */
    @Test
    void unifiedCodeTest() {
        // TODO: test unifiedCode
    }

    /**
     * Test the property 'unifiedMessage'
     */
    @Test
    void unifiedMessageTest() {
        // TODO: test unifiedMessage
    }

    /**
     * Test the property 'clientSource'
     */
    @Test
    void clientSourceTest() {
        // TODO: test clientSource
    }

    /**
     * Test the property 'clientVersion'
     */
    @Test
    void clientVersionTest() {
        // TODO: test clientVersion
    }

}
