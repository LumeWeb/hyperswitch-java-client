/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import java.time.OffsetDateTime;
import com.hyperswitch.client.model.PaymentListResponse;
import com.hyperswitch.client.model.PaymentRetrieveBody;
import com.hyperswitch.client.model.PaymentsCancelRequest;
import com.hyperswitch.client.model.PaymentsCaptureRequest;
import com.hyperswitch.client.model.PaymentsCompleteAuthorizeRequest;
import com.hyperswitch.client.model.PaymentsConfirmRequest;
import com.hyperswitch.client.model.PaymentsCreateRequest;
import com.hyperswitch.client.model.PaymentsExternalAuthenticationRequest;
import com.hyperswitch.client.model.PaymentsExternalAuthenticationResponse;
import com.hyperswitch.client.model.PaymentsIncrementalAuthorizationRequest;
import com.hyperswitch.client.model.PaymentsPostSessionTokensRequest;
import com.hyperswitch.client.model.PaymentsPostSessionTokensResponse;
import com.hyperswitch.client.model.PaymentsResponse;
import com.hyperswitch.client.model.PaymentsSessionRequest;
import com.hyperswitch.client.model.PaymentsSessionResponse;
import com.hyperswitch.client.model.PaymentsUpdateRequest;
import com.hyperswitch.client.model.RetrievePaymentLinkRequest;
import com.hyperswitch.client.model.RetrievePaymentLinkResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PaymentsApi extends BaseApi {

  public PaymentsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PaymentsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Payments - Cancel
   * A Payment could can be cancelled when it is in one of these statuses: &#x60;requires_payment_method&#x60;, &#x60;requires_capture&#x60;, &#x60;requires_confirmation&#x60;, &#x60;requires_customer_action&#x60;.
   * @param paymentId The identifier for payment (required)
   * @param paymentsCancelRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void cancelAPayment(String paymentId, PaymentsCancelRequest paymentsCancelRequest) throws ApiException {
    this.cancelAPayment(paymentId, paymentsCancelRequest, Collections.emptyMap());
  }


  /**
   * Payments - Cancel
   * A Payment could can be cancelled when it is in one of these statuses: &#x60;requires_payment_method&#x60;, &#x60;requires_capture&#x60;, &#x60;requires_confirmation&#x60;, &#x60;requires_customer_action&#x60;.
   * @param paymentId The identifier for payment (required)
   * @param paymentsCancelRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void cancelAPayment(String paymentId, PaymentsCancelRequest paymentsCancelRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsCancelRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling cancelAPayment");
    }
    
    // verify the required parameter 'paymentsCancelRequest' is set
    if (paymentsCancelRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsCancelRequest' when calling cancelAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/cancel"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Payments - Capture
   * To capture the funds for an uncaptured payment
   * @param paymentId The identifier for payment (required)
   * @param paymentsCaptureRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse captureAPayment(String paymentId, PaymentsCaptureRequest paymentsCaptureRequest) throws ApiException {
    return this.captureAPayment(paymentId, paymentsCaptureRequest, Collections.emptyMap());
  }


  /**
   * Payments - Capture
   * To capture the funds for an uncaptured payment
   * @param paymentId The identifier for payment (required)
   * @param paymentsCaptureRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse captureAPayment(String paymentId, PaymentsCaptureRequest paymentsCaptureRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsCaptureRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling captureAPayment");
    }
    
    // verify the required parameter 'paymentsCaptureRequest' is set
    if (paymentsCaptureRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsCaptureRequest' when calling captureAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/capture"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Complete Authorize
   * 
   * @param paymentId The identifier for payment (required)
   * @param paymentsCompleteAuthorizeRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse completeAuthorizeAPayment(String paymentId, PaymentsCompleteAuthorizeRequest paymentsCompleteAuthorizeRequest) throws ApiException {
    return this.completeAuthorizeAPayment(paymentId, paymentsCompleteAuthorizeRequest, Collections.emptyMap());
  }


  /**
   * Payments - Complete Authorize
   * 
   * @param paymentId The identifier for payment (required)
   * @param paymentsCompleteAuthorizeRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse completeAuthorizeAPayment(String paymentId, PaymentsCompleteAuthorizeRequest paymentsCompleteAuthorizeRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsCompleteAuthorizeRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling completeAuthorizeAPayment");
    }
    
    // verify the required parameter 'paymentsCompleteAuthorizeRequest' is set
    if (paymentsCompleteAuthorizeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsCompleteAuthorizeRequest' when calling completeAuthorizeAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/{payment_id}/complete_authorize"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Confirm
   * **Use this API to confirm the payment and forward the payment to the payment processor.**  Alternatively you can confirm the payment within the *Payments/Create* API by setting &#x60;confirm&#x3D;true&#x60;. After confirmation, the payment could either:  1. fail with &#x60;failed&#x60; status or  2. transition to a &#x60;requires_customer_action&#x60; status with a &#x60;next_action&#x60; block or  3. succeed with either &#x60;succeeded&#x60; in case of automatic capture or &#x60;requires_capture&#x60; in case of manual capture
   * @param paymentId The identifier for payment (required)
   * @param paymentsConfirmRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse confirmAPayment(String paymentId, PaymentsConfirmRequest paymentsConfirmRequest) throws ApiException {
    return this.confirmAPayment(paymentId, paymentsConfirmRequest, Collections.emptyMap());
  }


  /**
   * Payments - Confirm
   * **Use this API to confirm the payment and forward the payment to the payment processor.**  Alternatively you can confirm the payment within the *Payments/Create* API by setting &#x60;confirm&#x3D;true&#x60;. After confirmation, the payment could either:  1. fail with &#x60;failed&#x60; status or  2. transition to a &#x60;requires_customer_action&#x60; status with a &#x60;next_action&#x60; block or  3. succeed with either &#x60;succeeded&#x60; in case of automatic capture or &#x60;requires_capture&#x60; in case of manual capture
   * @param paymentId The identifier for payment (required)
   * @param paymentsConfirmRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse confirmAPayment(String paymentId, PaymentsConfirmRequest paymentsConfirmRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsConfirmRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling confirmAPayment");
    }
    
    // verify the required parameter 'paymentsConfirmRequest' is set
    if (paymentsConfirmRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsConfirmRequest' when calling confirmAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/confirm"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Create
   * **Creates a payment object when amount and currency are passed.**  This API is also used to create a mandate by passing the &#x60;mandate_object&#x60;.  Depending on the user journey you wish to achieve, you may opt to complete all the steps in a single request **by attaching a payment method, setting &#x60;confirm&#x3D;true&#x60; and &#x60;capture_method &#x3D; automatic&#x60;** in the *Payments/Create API* request.  Otherwise, To completely process a payment you will have to **create a payment, attach a payment method, confirm and capture funds**. For that you could use the following sequence of API requests -  1. Payments - Create  2. Payments - Update  3. Payments - Confirm  4. Payments - Capture.  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.  This page lists the various combinations in which the Payments - Create API can be used and the details about the various fields in the requests and responses.
   * @param paymentsCreateRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse createAPayment(PaymentsCreateRequest paymentsCreateRequest) throws ApiException {
    return this.createAPayment(paymentsCreateRequest, Collections.emptyMap());
  }


  /**
   * Payments - Create
   * **Creates a payment object when amount and currency are passed.**  This API is also used to create a mandate by passing the &#x60;mandate_object&#x60;.  Depending on the user journey you wish to achieve, you may opt to complete all the steps in a single request **by attaching a payment method, setting &#x60;confirm&#x3D;true&#x60; and &#x60;capture_method &#x3D; automatic&#x60;** in the *Payments/Create API* request.  Otherwise, To completely process a payment you will have to **create a payment, attach a payment method, confirm and capture funds**. For that you could use the following sequence of API requests -  1. Payments - Create  2. Payments - Update  3. Payments - Confirm  4. Payments - Capture.  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.  This page lists the various combinations in which the Payments - Create API can be used and the details about the various fields in the requests and responses.
   * @param paymentsCreateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse createAPayment(PaymentsCreateRequest paymentsCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsCreateRequest;
    
    // verify the required parameter 'paymentsCreateRequest' is set
    if (paymentsCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsCreateRequest' when calling createAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Post Session Tokens
   * 
   * @param paymentId The unique identifier for the payment (required)
   * @param paymentsPostSessionTokensRequest  (required)
   * @return PaymentsPostSessionTokensResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsPostSessionTokensResponse createPostSessionTokensForAPayment(String paymentId, PaymentsPostSessionTokensRequest paymentsPostSessionTokensRequest) throws ApiException {
    return this.createPostSessionTokensForAPayment(paymentId, paymentsPostSessionTokensRequest, Collections.emptyMap());
  }


  /**
   * Payments - Post Session Tokens
   * 
   * @param paymentId The unique identifier for the payment (required)
   * @param paymentsPostSessionTokensRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsPostSessionTokensResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsPostSessionTokensResponse createPostSessionTokensForAPayment(String paymentId, PaymentsPostSessionTokensRequest paymentsPostSessionTokensRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsPostSessionTokensRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling createPostSessionTokensForAPayment");
    }
    
    // verify the required parameter 'paymentsPostSessionTokensRequest' is set
    if (paymentsPostSessionTokensRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsPostSessionTokensRequest' when calling createPostSessionTokensForAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/post_session_tokens"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key" };

    TypeReference<PaymentsPostSessionTokensResponse> localVarReturnType = new TypeReference<PaymentsPostSessionTokensResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Session token
   * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
   * @param paymentsSessionRequest  (required)
   * @return PaymentsSessionResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsSessionResponse createSessionTokensForAPayment(PaymentsSessionRequest paymentsSessionRequest) throws ApiException {
    return this.createSessionTokensForAPayment(paymentsSessionRequest, Collections.emptyMap());
  }


  /**
   * Payments - Session token
   * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
   * @param paymentsSessionRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsSessionResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsSessionResponse createSessionTokensForAPayment(PaymentsSessionRequest paymentsSessionRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsSessionRequest;
    
    // verify the required parameter 'paymentsSessionRequest' is set
    if (paymentsSessionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsSessionRequest' when calling createSessionTokensForAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/session_tokens";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key" };

    TypeReference<PaymentsSessionResponse> localVarReturnType = new TypeReference<PaymentsSessionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Incremental Authorization
   * Authorized amount for a payment can be incremented if it is in status: requires_capture
   * @param paymentId The identifier for payment (required)
   * @param paymentsIncrementalAuthorizationRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse incrementAuthorizedAmountForAPayment(String paymentId, PaymentsIncrementalAuthorizationRequest paymentsIncrementalAuthorizationRequest) throws ApiException {
    return this.incrementAuthorizedAmountForAPayment(paymentId, paymentsIncrementalAuthorizationRequest, Collections.emptyMap());
  }


  /**
   * Payments - Incremental Authorization
   * Authorized amount for a payment can be incremented if it is in status: requires_capture
   * @param paymentId The identifier for payment (required)
   * @param paymentsIncrementalAuthorizationRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse incrementAuthorizedAmountForAPayment(String paymentId, PaymentsIncrementalAuthorizationRequest paymentsIncrementalAuthorizationRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsIncrementalAuthorizationRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling incrementAuthorizedAmountForAPayment");
    }
    
    // verify the required parameter 'paymentsIncrementalAuthorizationRequest' is set
    if (paymentsIncrementalAuthorizationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsIncrementalAuthorizationRequest' when calling incrementAuthorizedAmountForAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/incremental_authorization"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - External 3DS Authentication
   * External 3DS Authentication is performed and returns the AuthenticationResponse
   * @param paymentId The identifier for payment (required)
   * @param paymentsExternalAuthenticationRequest  (required)
   * @return PaymentsExternalAuthenticationResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsExternalAuthenticationResponse initiateExternalAuthenticationForAPayment(String paymentId, PaymentsExternalAuthenticationRequest paymentsExternalAuthenticationRequest) throws ApiException {
    return this.initiateExternalAuthenticationForAPayment(paymentId, paymentsExternalAuthenticationRequest, Collections.emptyMap());
  }


  /**
   * Payments - External 3DS Authentication
   * External 3DS Authentication is performed and returns the AuthenticationResponse
   * @param paymentId The identifier for payment (required)
   * @param paymentsExternalAuthenticationRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsExternalAuthenticationResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsExternalAuthenticationResponse initiateExternalAuthenticationForAPayment(String paymentId, PaymentsExternalAuthenticationRequest paymentsExternalAuthenticationRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsExternalAuthenticationRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling initiateExternalAuthenticationForAPayment");
    }
    
    // verify the required parameter 'paymentsExternalAuthenticationRequest' is set
    if (paymentsExternalAuthenticationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsExternalAuthenticationRequest' when calling initiateExternalAuthenticationForAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}/3ds/authentication"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key" };

    TypeReference<PaymentsExternalAuthenticationResponse> localVarReturnType = new TypeReference<PaymentsExternalAuthenticationResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - List
   * To list the *payments*
   * @param customerId The identifier for the customer (required)
   * @param startingAfter A cursor for use in pagination, fetch the next list after some object (required)
   * @param endingBefore A cursor for use in pagination, fetch the previous list before some object (required)
   * @param limit Limit on the number of objects to return (required)
   * @param created The time at which payment is created (required)
   * @param createdLt Time less than the payment created time (required)
   * @param createdGt Time greater than the payment created time (required)
   * @param createdLte Time less than or equals to the payment created time (required)
   * @param createdGte Time greater than or equals to the payment created time (required)
   * @return List&lt;PaymentListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<PaymentListResponse> listAllPayments(String customerId, String startingAfter, String endingBefore, Long limit, OffsetDateTime created, OffsetDateTime createdLt, OffsetDateTime createdGt, OffsetDateTime createdLte, OffsetDateTime createdGte) throws ApiException {
    return this.listAllPayments(customerId, startingAfter, endingBefore, limit, created, createdLt, createdGt, createdLte, createdGte, Collections.emptyMap());
  }


  /**
   * Payments - List
   * To list the *payments*
   * @param customerId The identifier for the customer (required)
   * @param startingAfter A cursor for use in pagination, fetch the next list after some object (required)
   * @param endingBefore A cursor for use in pagination, fetch the previous list before some object (required)
   * @param limit Limit on the number of objects to return (required)
   * @param created The time at which payment is created (required)
   * @param createdLt Time less than the payment created time (required)
   * @param createdGt Time greater than the payment created time (required)
   * @param createdLte Time less than or equals to the payment created time (required)
   * @param createdGte Time greater than or equals to the payment created time (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;PaymentListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<PaymentListResponse> listAllPayments(String customerId, String startingAfter, String endingBefore, Long limit, OffsetDateTime created, OffsetDateTime createdLt, OffsetDateTime createdGt, OffsetDateTime createdLte, OffsetDateTime createdGte, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listAllPayments");
    }
    
    // verify the required parameter 'startingAfter' is set
    if (startingAfter == null) {
      throw new ApiException(400, "Missing the required parameter 'startingAfter' when calling listAllPayments");
    }
    
    // verify the required parameter 'endingBefore' is set
    if (endingBefore == null) {
      throw new ApiException(400, "Missing the required parameter 'endingBefore' when calling listAllPayments");
    }
    
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling listAllPayments");
    }
    
    // verify the required parameter 'created' is set
    if (created == null) {
      throw new ApiException(400, "Missing the required parameter 'created' when calling listAllPayments");
    }
    
    // verify the required parameter 'createdLt' is set
    if (createdLt == null) {
      throw new ApiException(400, "Missing the required parameter 'createdLt' when calling listAllPayments");
    }
    
    // verify the required parameter 'createdGt' is set
    if (createdGt == null) {
      throw new ApiException(400, "Missing the required parameter 'createdGt' when calling listAllPayments");
    }
    
    // verify the required parameter 'createdLte' is set
    if (createdLte == null) {
      throw new ApiException(400, "Missing the required parameter 'createdLte' when calling listAllPayments");
    }
    
    // verify the required parameter 'createdGte' is set
    if (createdGte == null) {
      throw new ApiException(400, "Missing the required parameter 'createdGte' when calling listAllPayments");
    }
    
    // create path and map variables
    String localVarPath = "/payments/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("customer_id", customerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("starting_after", startingAfter));
    localVarQueryParams.addAll(apiClient.parameterToPair("ending_before", endingBefore));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("created", created));
    localVarQueryParams.addAll(apiClient.parameterToPair("created_lt", createdLt));
    localVarQueryParams.addAll(apiClient.parameterToPair("created_gt", createdGt));
    localVarQueryParams.addAll(apiClient.parameterToPair("created_lte", createdLte));
    localVarQueryParams.addAll(apiClient.parameterToPair("created_gte", createdGte));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<PaymentListResponse>> localVarReturnType = new TypeReference<List<PaymentListResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Retrieve
   * Retrieves a Payment. This API can also be used to get the status of a previously initiated payment or next action for an ongoing payment
   * @param paymentId The identifier for payment (required)
   * @param paymentRetrieveBody  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse retrieveAPayment(String paymentId, PaymentRetrieveBody paymentRetrieveBody) throws ApiException {
    return this.retrieveAPayment(paymentId, paymentRetrieveBody, Collections.emptyMap());
  }


  /**
   * Payments - Retrieve
   * Retrieves a Payment. This API can also be used to get the status of a previously initiated payment or next action for an ongoing payment
   * @param paymentId The identifier for payment (required)
   * @param paymentRetrieveBody  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse retrieveAPayment(String paymentId, PaymentRetrieveBody paymentRetrieveBody, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentRetrieveBody;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling retrieveAPayment");
    }
    
    // verify the required parameter 'paymentRetrieveBody' is set
    if (paymentRetrieveBody == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentRetrieveBody' when calling retrieveAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments Link - Retrieve
   * To retrieve the properties of a Payment Link. This may be used to get the status of a previously initiated payment or next action for an ongoing payment
   * @param paymentLinkId The identifier for payment link (required)
   * @param retrievePaymentLinkRequest  (required)
   * @return RetrievePaymentLinkResponse
   * @throws ApiException if fails to make API call
   */
  public RetrievePaymentLinkResponse retrieveAPaymentLink(String paymentLinkId, RetrievePaymentLinkRequest retrievePaymentLinkRequest) throws ApiException {
    return this.retrieveAPaymentLink(paymentLinkId, retrievePaymentLinkRequest, Collections.emptyMap());
  }


  /**
   * Payments Link - Retrieve
   * To retrieve the properties of a Payment Link. This may be used to get the status of a previously initiated payment or next action for an ongoing payment
   * @param paymentLinkId The identifier for payment link (required)
   * @param retrievePaymentLinkRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RetrievePaymentLinkResponse
   * @throws ApiException if fails to make API call
   */
  public RetrievePaymentLinkResponse retrieveAPaymentLink(String paymentLinkId, RetrievePaymentLinkRequest retrievePaymentLinkRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = retrievePaymentLinkRequest;
    
    // verify the required parameter 'paymentLinkId' is set
    if (paymentLinkId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentLinkId' when calling retrieveAPaymentLink");
    }
    
    // verify the required parameter 'retrievePaymentLinkRequest' is set
    if (retrievePaymentLinkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'retrievePaymentLinkRequest' when calling retrieveAPaymentLink");
    }
    
    // create path and map variables
    String localVarPath = "/payment_link/{payment_link_id}"
      .replaceAll("\\{" + "payment_link_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentLinkId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<RetrievePaymentLinkResponse> localVarReturnType = new TypeReference<RetrievePaymentLinkResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payments - Update
   * To update the properties of a *PaymentIntent* object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created
   * @param paymentId The identifier for payment (required)
   * @param paymentsUpdateRequest  (required)
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse updateAPayment(String paymentId, PaymentsUpdateRequest paymentsUpdateRequest) throws ApiException {
    return this.updateAPayment(paymentId, paymentsUpdateRequest, Collections.emptyMap());
  }


  /**
   * Payments - Update
   * To update the properties of a *PaymentIntent* object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created
   * @param paymentId The identifier for payment (required)
   * @param paymentsUpdateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsResponse updateAPayment(String paymentId, PaymentsUpdateRequest paymentsUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentsUpdateRequest;
    
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling updateAPayment");
    }
    
    // verify the required parameter 'paymentsUpdateRequest' is set
    if (paymentsUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsUpdateRequest' when calling updateAPayment");
    }
    
    // create path and map variables
    String localVarPath = "/payments/{payment_id}"
      .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<PaymentsResponse> localVarReturnType = new TypeReference<PaymentsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
