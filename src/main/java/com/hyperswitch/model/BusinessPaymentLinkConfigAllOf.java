/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.PaymentLinkConfigRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BusinessPaymentLinkConfigAllOf
 */
@JsonPropertyOrder({
  BusinessPaymentLinkConfigAllOf.JSON_PROPERTY_DOMAIN_NAME,
  BusinessPaymentLinkConfigAllOf.JSON_PROPERTY_BUSINESS_SPECIFIC_CONFIGS,
  BusinessPaymentLinkConfigAllOf.JSON_PROPERTY_ALLOWED_DOMAINS
})
@JsonTypeName("BusinessPaymentLinkConfig_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BusinessPaymentLinkConfigAllOf {
  public static final String JSON_PROPERTY_DOMAIN_NAME = "domain_name";
  private JsonNullable<String> domainName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BUSINESS_SPECIFIC_CONFIGS = "business_specific_configs";
  private JsonNullable<Map<String, PaymentLinkConfigRequest>> businessSpecificConfigs = JsonNullable.<Map<String, PaymentLinkConfigRequest>>undefined();

  public static final String JSON_PROPERTY_ALLOWED_DOMAINS = "allowed_domains";
  private JsonNullable<Set<String>> allowedDomains = JsonNullable.<Set<String>>undefined();

  public BusinessPaymentLinkConfigAllOf() { 
  }

  public BusinessPaymentLinkConfigAllOf domainName(String domainName) {
    this.domainName = JsonNullable.<String>of(domainName);
    
    return this;
  }

   /**
   * Custom domain name to be used for hosting the link in your own domain
   * @return domainName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom domain name to be used for hosting the link in your own domain")
  @JsonIgnore

  public String getDomainName() {
        return domainName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDomainName_JsonNullable() {
    return domainName;
  }
  
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  public void setDomainName_JsonNullable(JsonNullable<String> domainName) {
    this.domainName = domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = JsonNullable.<String>of(domainName);
  }


  public BusinessPaymentLinkConfigAllOf businessSpecificConfigs(Map<String, PaymentLinkConfigRequest> businessSpecificConfigs) {
    this.businessSpecificConfigs = JsonNullable.<Map<String, PaymentLinkConfigRequest>>of(businessSpecificConfigs);
    
    return this;
  }

  public BusinessPaymentLinkConfigAllOf putBusinessSpecificConfigsItem(String key, PaymentLinkConfigRequest businessSpecificConfigsItem) {
    if (this.businessSpecificConfigs == null || !this.businessSpecificConfigs.isPresent()) {
      this.businessSpecificConfigs = JsonNullable.<Map<String, PaymentLinkConfigRequest>>of(new HashMap<>());
    }
    try {
      this.businessSpecificConfigs.get().put(key, businessSpecificConfigsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * list of configs for multi theme setup
   * @return businessSpecificConfigs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of configs for multi theme setup")
  @JsonIgnore

  public Map<String, PaymentLinkConfigRequest> getBusinessSpecificConfigs() {
        return businessSpecificConfigs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BUSINESS_SPECIFIC_CONFIGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, PaymentLinkConfigRequest>> getBusinessSpecificConfigs_JsonNullable() {
    return businessSpecificConfigs;
  }
  
  @JsonProperty(JSON_PROPERTY_BUSINESS_SPECIFIC_CONFIGS)
  public void setBusinessSpecificConfigs_JsonNullable(JsonNullable<Map<String, PaymentLinkConfigRequest>> businessSpecificConfigs) {
    this.businessSpecificConfigs = businessSpecificConfigs;
  }

  public void setBusinessSpecificConfigs(Map<String, PaymentLinkConfigRequest> businessSpecificConfigs) {
    this.businessSpecificConfigs = JsonNullable.<Map<String, PaymentLinkConfigRequest>>of(businessSpecificConfigs);
  }


  public BusinessPaymentLinkConfigAllOf allowedDomains(Set<String> allowedDomains) {
    this.allowedDomains = JsonNullable.<Set<String>>of(allowedDomains);
    
    return this;
  }

  public BusinessPaymentLinkConfigAllOf addAllowedDomainsItem(String allowedDomainsItem) {
    if (this.allowedDomains == null || !this.allowedDomains.isPresent()) {
      this.allowedDomains = JsonNullable.<Set<String>>of(new LinkedHashSet<>());
    }
    try {
      this.allowedDomains.get().add(allowedDomainsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * A list of allowed domains (glob patterns) where this link can be embedded / opened from
   * @return allowedDomains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of allowed domains (glob patterns) where this link can be embedded / opened from")
  @JsonIgnore

  public Set<String> getAllowedDomains() {
        return allowedDomains.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALLOWED_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Set<String>> getAllowedDomains_JsonNullable() {
    return allowedDomains;
  }
  
  @JsonProperty(JSON_PROPERTY_ALLOWED_DOMAINS)
  public void setAllowedDomains_JsonNullable(JsonNullable<Set<String>> allowedDomains) {
    this.allowedDomains = allowedDomains;
  }

  public void setAllowedDomains(Set<String> allowedDomains) {
    this.allowedDomains = JsonNullable.<Set<String>>of(allowedDomains);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessPaymentLinkConfigAllOf businessPaymentLinkConfigAllOf = (BusinessPaymentLinkConfigAllOf) o;
    return equalsNullable(this.domainName, businessPaymentLinkConfigAllOf.domainName) &&
        equalsNullable(this.businessSpecificConfigs, businessPaymentLinkConfigAllOf.businessSpecificConfigs) &&
        equalsNullable(this.allowedDomains, businessPaymentLinkConfigAllOf.allowedDomains);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(domainName), hashCodeNullable(businessSpecificConfigs), hashCodeNullable(allowedDomains));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessPaymentLinkConfigAllOf {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    businessSpecificConfigs: ").append(toIndentedString(businessSpecificConfigs)).append("\n");
    sb.append("    allowedDomains: ").append(toIndentedString(allowedDomains)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

