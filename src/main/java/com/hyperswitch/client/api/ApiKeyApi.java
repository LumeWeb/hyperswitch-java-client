/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.CreateApiKeyRequest;
import com.hyperswitch.client.model.CreateApiKeyResponse;
import com.hyperswitch.client.model.RetrieveApiKeyResponse;
import com.hyperswitch.client.model.RevokeApiKeyResponse;
import com.hyperswitch.client.model.UpdateApiKeyRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiKeyApi {


  private ApiClient apiClient;

  public ApiKeyApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ApiKeyApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * API Key - Create
   * Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be displayed only once on creation, so ensure you store it securely.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param createApiKeyRequest  (required)
   * @return CreateApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public CreateApiKeyResponse createAnAPIKey(String merchantId, CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    return this.createAnAPIKey(merchantId, createApiKeyRequest, Collections.emptyMap());
  }


  /**
   * API Key - Create
   * Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be displayed only once on creation, so ensure you store it securely.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param createApiKeyRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public CreateApiKeyResponse createAnAPIKey(String merchantId, CreateApiKeyRequest createApiKeyRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiKeyRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling createAnAPIKey");
    }
    
    // verify the required parameter 'createApiKeyRequest' is set
    if (createApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiKeyRequest' when calling createAnAPIKey");
    }
    
    // create path and map variables
    String localVarPath = "/api_keys/{merchant_id}"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<CreateApiKeyResponse> localVarReturnType = new TypeReference<CreateApiKeyResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * API Key - List
   * List all the API Keys associated to a merchant account.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param limit The maximum number of API Keys to include in the response (optional)
   * @param skip The number of API Keys to skip when retrieving the list of API keys. (optional)
   * @return List&lt;RetrieveApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetrieveApiKeyResponse> listAllAPIKeysAssociatedWithAMerchantAccount(String merchantId, Long limit, Long skip) throws ApiException {
    return this.listAllAPIKeysAssociatedWithAMerchantAccount(merchantId, limit, skip, Collections.emptyMap());
  }


  /**
   * API Key - List
   * List all the API Keys associated to a merchant account.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param limit The maximum number of API Keys to include in the response (optional)
   * @param skip The number of API Keys to skip when retrieving the list of API keys. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;RetrieveApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetrieveApiKeyResponse> listAllAPIKeysAssociatedWithAMerchantAccount(String merchantId, Long limit, Long skip, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling listAllAPIKeysAssociatedWithAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/api_keys/{merchant_id}/list"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<List<RetrieveApiKeyResponse>> localVarReturnType = new TypeReference<List<RetrieveApiKeyResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * API Key - Retrieve
   * Retrieve information about the specified API Key.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse retrieveAnAPIKey(String merchantId, String keyId) throws ApiException {
    return this.retrieveAnAPIKey(merchantId, keyId, Collections.emptyMap());
  }


  /**
   * API Key - Retrieve
   * Retrieve information about the specified API Key.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse retrieveAnAPIKey(String merchantId, String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling retrieveAnAPIKey");
    }
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling retrieveAnAPIKey");
    }
    
    // create path and map variables
    String localVarPath = "/api_keys/{merchant_id}/{key_id}"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(keyId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<RetrieveApiKeyResponse> localVarReturnType = new TypeReference<RetrieveApiKeyResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * API Key - Revoke
   * Revoke the specified API Key. Once revoked, the API Key can no longer be used for authenticating with our APIs.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @return RevokeApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RevokeApiKeyResponse revokeAnAPIKey(String merchantId, String keyId) throws ApiException {
    return this.revokeAnAPIKey(merchantId, keyId, Collections.emptyMap());
  }


  /**
   * API Key - Revoke
   * Revoke the specified API Key. Once revoked, the API Key can no longer be used for authenticating with our APIs.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RevokeApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RevokeApiKeyResponse revokeAnAPIKey(String merchantId, String keyId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling revokeAnAPIKey");
    }
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling revokeAnAPIKey");
    }
    
    // create path and map variables
    String localVarPath = "/api_keys/{merchant_id}/{key_id}"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(keyId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<RevokeApiKeyResponse> localVarReturnType = new TypeReference<RevokeApiKeyResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * API Key - Update
   * Update information for the specified API Key.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @param updateApiKeyRequest  (required)
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse updateAnAPIKey(String merchantId, String keyId, UpdateApiKeyRequest updateApiKeyRequest) throws ApiException {
    return this.updateAnAPIKey(merchantId, keyId, updateApiKeyRequest, Collections.emptyMap());
  }


  /**
   * API Key - Update
   * Update information for the specified API Key.
   * @param merchantId The unique identifier for the merchant account (required)
   * @param keyId The unique identifier for the API Key (required)
   * @param updateApiKeyRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse updateAnAPIKey(String merchantId, String keyId, UpdateApiKeyRequest updateApiKeyRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updateApiKeyRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling updateAnAPIKey");
    }
    
    // verify the required parameter 'keyId' is set
    if (keyId == null) {
      throw new ApiException(400, "Missing the required parameter 'keyId' when calling updateAnAPIKey");
    }
    
    // verify the required parameter 'updateApiKeyRequest' is set
    if (updateApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateApiKeyRequest' when calling updateAnAPIKey");
    }
    
    // create path and map variables
    String localVarPath = "/api_keys/{merchant_id}/{key_id}"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "key_id" + "\\}", apiClient.escapeString(keyId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<RetrieveApiKeyResponse> localVarReturnType = new TypeReference<RetrieveApiKeyResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
