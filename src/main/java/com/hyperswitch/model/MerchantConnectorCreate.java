/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.AdditionalMerchantData;
import com.hyperswitch.model.Connector;
import com.hyperswitch.model.ConnectorStatus;
import com.hyperswitch.model.ConnectorType;
import com.hyperswitch.model.ConnectorWalletDetails;
import com.hyperswitch.model.FrmConfigs;
import com.hyperswitch.model.MerchantConnectorDetails;
import com.hyperswitch.model.MerchantConnectorWebhookDetails;
import com.hyperswitch.model.PaymentMethodsEnabled;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.hyperswitch.client.ApiClient;
/**
 * Create a new Merchant Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialized services like Fraud / Accounting etc.\&quot;
 */
@JsonPropertyOrder({
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_TYPE,
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_NAME,
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_LABEL,
  MerchantConnectorCreate.JSON_PROPERTY_PROFILE_ID,
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_ACCOUNT_DETAILS,
  MerchantConnectorCreate.JSON_PROPERTY_PAYMENT_METHODS_ENABLED,
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_WEBHOOK_DETAILS,
  MerchantConnectorCreate.JSON_PROPERTY_METADATA,
  MerchantConnectorCreate.JSON_PROPERTY_DISABLED,
  MerchantConnectorCreate.JSON_PROPERTY_FRM_CONFIGS,
  MerchantConnectorCreate.JSON_PROPERTY_PM_AUTH_CONFIG,
  MerchantConnectorCreate.JSON_PROPERTY_STATUS,
  MerchantConnectorCreate.JSON_PROPERTY_ADDITIONAL_MERCHANT_DATA,
  MerchantConnectorCreate.JSON_PROPERTY_CONNECTOR_WALLETS_DETAILS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MerchantConnectorCreate {
  public static final String JSON_PROPERTY_CONNECTOR_TYPE = "connector_type";
  @javax.annotation.Nonnull
  private ConnectorType connectorType;

  public static final String JSON_PROPERTY_CONNECTOR_NAME = "connector_name";
  @javax.annotation.Nonnull
  private Connector connectorName;

  public static final String JSON_PROPERTY_CONNECTOR_LABEL = "connector_label";
  private JsonNullable<String> connectorLabel = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PROFILE_ID = "profile_id";
  @javax.annotation.Nonnull
  private String profileId;

  public static final String JSON_PROPERTY_CONNECTOR_ACCOUNT_DETAILS = "connector_account_details";
  private JsonNullable<MerchantConnectorDetails> connectorAccountDetails = JsonNullable.<MerchantConnectorDetails>undefined();

  public static final String JSON_PROPERTY_PAYMENT_METHODS_ENABLED = "payment_methods_enabled";
  private JsonNullable<List<PaymentMethodsEnabled>> paymentMethodsEnabled = JsonNullable.<List<PaymentMethodsEnabled>>undefined();

  public static final String JSON_PROPERTY_CONNECTOR_WEBHOOK_DETAILS = "connector_webhook_details";
  private JsonNullable<MerchantConnectorWebhookDetails> connectorWebhookDetails = JsonNullable.<MerchantConnectorWebhookDetails>undefined();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private JsonNullable<Object> metadata = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  private JsonNullable<Boolean> disabled = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_FRM_CONFIGS = "frm_configs";
  private JsonNullable<List<FrmConfigs>> frmConfigs = JsonNullable.<List<FrmConfigs>>undefined();

  public static final String JSON_PROPERTY_PM_AUTH_CONFIG = "pm_auth_config";
  private JsonNullable<Object> pmAuthConfig = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_STATUS = "status";
  private JsonNullable<ConnectorStatus> status = JsonNullable.<ConnectorStatus>undefined();

  public static final String JSON_PROPERTY_ADDITIONAL_MERCHANT_DATA = "additional_merchant_data";
  private JsonNullable<AdditionalMerchantData> additionalMerchantData = JsonNullable.<AdditionalMerchantData>undefined();

  public static final String JSON_PROPERTY_CONNECTOR_WALLETS_DETAILS = "connector_wallets_details";
  private JsonNullable<ConnectorWalletDetails> connectorWalletsDetails = JsonNullable.<ConnectorWalletDetails>undefined();

  public MerchantConnectorCreate() { 
  }

  public MerchantConnectorCreate connectorType(@javax.annotation.Nonnull ConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ConnectorType getConnectorType() {
    return connectorType;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectorType(@javax.annotation.Nonnull ConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  public MerchantConnectorCreate connectorName(@javax.annotation.Nonnull Connector connectorName) {
    this.connectorName = connectorName;
    return this;
  }

  /**
   * Get connectorName
   * @return connectorName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONNECTOR_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Connector getConnectorName() {
    return connectorName;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectorName(@javax.annotation.Nonnull Connector connectorName) {
    this.connectorName = connectorName;
  }


  public MerchantConnectorCreate connectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = JsonNullable.<String>of(connectorLabel);
    return this;
  }

  /**
   * This is an unique label you can generate and pass in order to identify this connector account on your Hyperswitch dashboard and reports, If not passed then if will take &#x60;connector_name&#x60;_&#x60;profile_name&#x60;. Eg: if your profile label is &#x60;default&#x60;, connector label can be &#x60;stripe_default&#x60;
   * @return connectorLabel
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getConnectorLabel() {
        return connectorLabel.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConnectorLabel_JsonNullable() {
    return connectorLabel;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_LABEL)
  public void setConnectorLabel_JsonNullable(JsonNullable<String> connectorLabel) {
    this.connectorLabel = connectorLabel;
  }

  public void setConnectorLabel(@javax.annotation.Nullable String connectorLabel) {
    this.connectorLabel = JsonNullable.<String>of(connectorLabel);
  }


  public MerchantConnectorCreate profileId(@javax.annotation.Nonnull String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * Identifier for the profile, if not provided default will be chosen from merchant account
   * @return profileId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getProfileId() {
    return profileId;
  }


  @JsonProperty(JSON_PROPERTY_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProfileId(@javax.annotation.Nonnull String profileId) {
    this.profileId = profileId;
  }


  public MerchantConnectorCreate connectorAccountDetails(@javax.annotation.Nullable MerchantConnectorDetails connectorAccountDetails) {
    this.connectorAccountDetails = JsonNullable.<MerchantConnectorDetails>of(connectorAccountDetails);
    return this;
  }

  /**
   * Get connectorAccountDetails
   * @return connectorAccountDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public MerchantConnectorDetails getConnectorAccountDetails() {
        return connectorAccountDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_ACCOUNT_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MerchantConnectorDetails> getConnectorAccountDetails_JsonNullable() {
    return connectorAccountDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_ACCOUNT_DETAILS)
  public void setConnectorAccountDetails_JsonNullable(JsonNullable<MerchantConnectorDetails> connectorAccountDetails) {
    this.connectorAccountDetails = connectorAccountDetails;
  }

  public void setConnectorAccountDetails(@javax.annotation.Nullable MerchantConnectorDetails connectorAccountDetails) {
    this.connectorAccountDetails = JsonNullable.<MerchantConnectorDetails>of(connectorAccountDetails);
  }


  public MerchantConnectorCreate paymentMethodsEnabled(@javax.annotation.Nullable List<PaymentMethodsEnabled> paymentMethodsEnabled) {
    this.paymentMethodsEnabled = JsonNullable.<List<PaymentMethodsEnabled>>of(paymentMethodsEnabled);
    return this;
  }

  public MerchantConnectorCreate addPaymentMethodsEnabledItem(PaymentMethodsEnabled paymentMethodsEnabledItem) {
    if (this.paymentMethodsEnabled == null || !this.paymentMethodsEnabled.isPresent()) {
      this.paymentMethodsEnabled = JsonNullable.<List<PaymentMethodsEnabled>>of(new ArrayList<>());
    }
    try {
      this.paymentMethodsEnabled.get().add(paymentMethodsEnabledItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * An object containing the details about the payment methods that need to be enabled under this merchant connector account
   * @return paymentMethodsEnabled
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<PaymentMethodsEnabled> getPaymentMethodsEnabled() {
        return paymentMethodsEnabled.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<PaymentMethodsEnabled>> getPaymentMethodsEnabled_JsonNullable() {
    return paymentMethodsEnabled;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS_ENABLED)
  public void setPaymentMethodsEnabled_JsonNullable(JsonNullable<List<PaymentMethodsEnabled>> paymentMethodsEnabled) {
    this.paymentMethodsEnabled = paymentMethodsEnabled;
  }

  public void setPaymentMethodsEnabled(@javax.annotation.Nullable List<PaymentMethodsEnabled> paymentMethodsEnabled) {
    this.paymentMethodsEnabled = JsonNullable.<List<PaymentMethodsEnabled>>of(paymentMethodsEnabled);
  }


  public MerchantConnectorCreate connectorWebhookDetails(@javax.annotation.Nullable MerchantConnectorWebhookDetails connectorWebhookDetails) {
    this.connectorWebhookDetails = JsonNullable.<MerchantConnectorWebhookDetails>of(connectorWebhookDetails);
    return this;
  }

  /**
   * Get connectorWebhookDetails
   * @return connectorWebhookDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public MerchantConnectorWebhookDetails getConnectorWebhookDetails() {
        return connectorWebhookDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_WEBHOOK_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MerchantConnectorWebhookDetails> getConnectorWebhookDetails_JsonNullable() {
    return connectorWebhookDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_WEBHOOK_DETAILS)
  public void setConnectorWebhookDetails_JsonNullable(JsonNullable<MerchantConnectorWebhookDetails> connectorWebhookDetails) {
    this.connectorWebhookDetails = connectorWebhookDetails;
  }

  public void setConnectorWebhookDetails(@javax.annotation.Nullable MerchantConnectorWebhookDetails connectorWebhookDetails) {
    this.connectorWebhookDetails = JsonNullable.<MerchantConnectorWebhookDetails>of(connectorWebhookDetails);
  }


  public MerchantConnectorCreate metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
    return this;
  }

  /**
   * Metadata is useful for storing additional, unstructured information on an object.
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getMetadata() {
        return metadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMetadata_JsonNullable() {
    return metadata;
  }
  
  @JsonProperty(JSON_PROPERTY_METADATA)
  public void setMetadata_JsonNullable(JsonNullable<Object> metadata) {
    this.metadata = metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
  }


  public MerchantConnectorCreate disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = JsonNullable.<Boolean>of(disabled);
    return this;
  }

  /**
   * A boolean value to indicate if the connector is disabled. By default, its value is false.
   * @return disabled
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getDisabled() {
        return disabled.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getDisabled_JsonNullable() {
    return disabled;
  }
  
  @JsonProperty(JSON_PROPERTY_DISABLED)
  public void setDisabled_JsonNullable(JsonNullable<Boolean> disabled) {
    this.disabled = disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = JsonNullable.<Boolean>of(disabled);
  }


  public MerchantConnectorCreate frmConfigs(@javax.annotation.Nullable List<FrmConfigs> frmConfigs) {
    this.frmConfigs = JsonNullable.<List<FrmConfigs>>of(frmConfigs);
    return this;
  }

  public MerchantConnectorCreate addFrmConfigsItem(FrmConfigs frmConfigsItem) {
    if (this.frmConfigs == null || !this.frmConfigs.isPresent()) {
      this.frmConfigs = JsonNullable.<List<FrmConfigs>>of(new ArrayList<>());
    }
    try {
      this.frmConfigs.get().add(frmConfigsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Contains the frm configs for the merchant connector
   * @return frmConfigs
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<FrmConfigs> getFrmConfigs() {
        return frmConfigs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FRM_CONFIGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FrmConfigs>> getFrmConfigs_JsonNullable() {
    return frmConfigs;
  }
  
  @JsonProperty(JSON_PROPERTY_FRM_CONFIGS)
  public void setFrmConfigs_JsonNullable(JsonNullable<List<FrmConfigs>> frmConfigs) {
    this.frmConfigs = frmConfigs;
  }

  public void setFrmConfigs(@javax.annotation.Nullable List<FrmConfigs> frmConfigs) {
    this.frmConfigs = JsonNullable.<List<FrmConfigs>>of(frmConfigs);
  }


  public MerchantConnectorCreate pmAuthConfig(@javax.annotation.Nullable Object pmAuthConfig) {
    this.pmAuthConfig = JsonNullable.<Object>of(pmAuthConfig);
    return this;
  }

  /**
   * pm_auth_config will relate MCA records to their respective chosen auth services, based on payment_method and pmt
   * @return pmAuthConfig
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getPmAuthConfig() {
        return pmAuthConfig.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PM_AUTH_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getPmAuthConfig_JsonNullable() {
    return pmAuthConfig;
  }
  
  @JsonProperty(JSON_PROPERTY_PM_AUTH_CONFIG)
  public void setPmAuthConfig_JsonNullable(JsonNullable<Object> pmAuthConfig) {
    this.pmAuthConfig = pmAuthConfig;
  }

  public void setPmAuthConfig(@javax.annotation.Nullable Object pmAuthConfig) {
    this.pmAuthConfig = JsonNullable.<Object>of(pmAuthConfig);
  }


  public MerchantConnectorCreate status(@javax.annotation.Nullable ConnectorStatus status) {
    this.status = JsonNullable.<ConnectorStatus>of(status);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public ConnectorStatus getStatus() {
        return status.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ConnectorStatus> getStatus_JsonNullable() {
    return status;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUS)
  public void setStatus_JsonNullable(JsonNullable<ConnectorStatus> status) {
    this.status = status;
  }

  public void setStatus(@javax.annotation.Nullable ConnectorStatus status) {
    this.status = JsonNullable.<ConnectorStatus>of(status);
  }


  public MerchantConnectorCreate additionalMerchantData(@javax.annotation.Nullable AdditionalMerchantData additionalMerchantData) {
    this.additionalMerchantData = JsonNullable.<AdditionalMerchantData>of(additionalMerchantData);
    return this;
  }

  /**
   * Get additionalMerchantData
   * @return additionalMerchantData
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public AdditionalMerchantData getAdditionalMerchantData() {
        return additionalMerchantData.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_MERCHANT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AdditionalMerchantData> getAdditionalMerchantData_JsonNullable() {
    return additionalMerchantData;
  }
  
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_MERCHANT_DATA)
  public void setAdditionalMerchantData_JsonNullable(JsonNullable<AdditionalMerchantData> additionalMerchantData) {
    this.additionalMerchantData = additionalMerchantData;
  }

  public void setAdditionalMerchantData(@javax.annotation.Nullable AdditionalMerchantData additionalMerchantData) {
    this.additionalMerchantData = JsonNullable.<AdditionalMerchantData>of(additionalMerchantData);
  }


  public MerchantConnectorCreate connectorWalletsDetails(@javax.annotation.Nullable ConnectorWalletDetails connectorWalletsDetails) {
    this.connectorWalletsDetails = JsonNullable.<ConnectorWalletDetails>of(connectorWalletsDetails);
    return this;
  }

  /**
   * Get connectorWalletsDetails
   * @return connectorWalletsDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public ConnectorWalletDetails getConnectorWalletsDetails() {
        return connectorWalletsDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_WALLETS_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ConnectorWalletDetails> getConnectorWalletsDetails_JsonNullable() {
    return connectorWalletsDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_WALLETS_DETAILS)
  public void setConnectorWalletsDetails_JsonNullable(JsonNullable<ConnectorWalletDetails> connectorWalletsDetails) {
    this.connectorWalletsDetails = connectorWalletsDetails;
  }

  public void setConnectorWalletsDetails(@javax.annotation.Nullable ConnectorWalletDetails connectorWalletsDetails) {
    this.connectorWalletsDetails = JsonNullable.<ConnectorWalletDetails>of(connectorWalletsDetails);
  }


  /**
   * Return true if this MerchantConnectorCreate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantConnectorCreate merchantConnectorCreate = (MerchantConnectorCreate) o;
    return Objects.equals(this.connectorType, merchantConnectorCreate.connectorType) &&
        Objects.equals(this.connectorName, merchantConnectorCreate.connectorName) &&
        equalsNullable(this.connectorLabel, merchantConnectorCreate.connectorLabel) &&
        Objects.equals(this.profileId, merchantConnectorCreate.profileId) &&
        equalsNullable(this.connectorAccountDetails, merchantConnectorCreate.connectorAccountDetails) &&
        equalsNullable(this.paymentMethodsEnabled, merchantConnectorCreate.paymentMethodsEnabled) &&
        equalsNullable(this.connectorWebhookDetails, merchantConnectorCreate.connectorWebhookDetails) &&
        equalsNullable(this.metadata, merchantConnectorCreate.metadata) &&
        equalsNullable(this.disabled, merchantConnectorCreate.disabled) &&
        equalsNullable(this.frmConfigs, merchantConnectorCreate.frmConfigs) &&
        equalsNullable(this.pmAuthConfig, merchantConnectorCreate.pmAuthConfig) &&
        equalsNullable(this.status, merchantConnectorCreate.status) &&
        equalsNullable(this.additionalMerchantData, merchantConnectorCreate.additionalMerchantData) &&
        equalsNullable(this.connectorWalletsDetails, merchantConnectorCreate.connectorWalletsDetails);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorType, connectorName, hashCodeNullable(connectorLabel), profileId, hashCodeNullable(connectorAccountDetails), hashCodeNullable(paymentMethodsEnabled), hashCodeNullable(connectorWebhookDetails), hashCodeNullable(metadata), hashCodeNullable(disabled), hashCodeNullable(frmConfigs), hashCodeNullable(pmAuthConfig), hashCodeNullable(status), hashCodeNullable(additionalMerchantData), hashCodeNullable(connectorWalletsDetails));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantConnectorCreate {\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    connectorLabel: ").append(toIndentedString(connectorLabel)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    connectorAccountDetails: ").append(toIndentedString(connectorAccountDetails)).append("\n");
    sb.append("    paymentMethodsEnabled: ").append(toIndentedString(paymentMethodsEnabled)).append("\n");
    sb.append("    connectorWebhookDetails: ").append(toIndentedString(connectorWebhookDetails)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    frmConfigs: ").append(toIndentedString(frmConfigs)).append("\n");
    sb.append("    pmAuthConfig: ").append(toIndentedString(pmAuthConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalMerchantData: ").append(toIndentedString(additionalMerchantData)).append("\n");
    sb.append("    connectorWalletsDetails: ").append(toIndentedString(connectorWalletsDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `connector_type` to the URL query string
    if (getConnectorType() != null) {
      joiner.add(String.format("%sconnector_type%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConnectorType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `connector_name` to the URL query string
    if (getConnectorName() != null) {
      joiner.add(String.format("%sconnector_name%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConnectorName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `connector_label` to the URL query string
    if (getConnectorLabel() != null) {
      joiner.add(String.format("%sconnector_label%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConnectorLabel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `profile_id` to the URL query string
    if (getProfileId() != null) {
      joiner.add(String.format("%sprofile_id%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getProfileId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `connector_account_details` to the URL query string
    if (getConnectorAccountDetails() != null) {
      joiner.add(getConnectorAccountDetails().toUrlQueryString(prefix + "connector_account_details" + suffix));
    }

    // add `payment_methods_enabled` to the URL query string
    if (getPaymentMethodsEnabled() != null) {
      for (int i = 0; i < getPaymentMethodsEnabled().size(); i++) {
        if (getPaymentMethodsEnabled().get(i) != null) {
          joiner.add(getPaymentMethodsEnabled().get(i).toUrlQueryString(String.format("%spayment_methods_enabled%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `connector_webhook_details` to the URL query string
    if (getConnectorWebhookDetails() != null) {
      joiner.add(getConnectorWebhookDetails().toUrlQueryString(prefix + "connector_webhook_details" + suffix));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `disabled` to the URL query string
    if (getDisabled() != null) {
      joiner.add(String.format("%sdisabled%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDisabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `frm_configs` to the URL query string
    if (getFrmConfigs() != null) {
      for (int i = 0; i < getFrmConfigs().size(); i++) {
        if (getFrmConfigs().get(i) != null) {
          joiner.add(getFrmConfigs().get(i).toUrlQueryString(String.format("%sfrm_configs%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `pm_auth_config` to the URL query string
    if (getPmAuthConfig() != null) {
      joiner.add(String.format("%spm_auth_config%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPmAuthConfig()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `additional_merchant_data` to the URL query string
    if (getAdditionalMerchantData() != null) {
      joiner.add(getAdditionalMerchantData().toUrlQueryString(prefix + "additional_merchant_data" + suffix));
    }

    // add `connector_wallets_details` to the URL query string
    if (getConnectorWalletsDetails() != null) {
      joiner.add(getConnectorWalletsDetails().toUrlQueryString(prefix + "connector_wallets_details" + suffix));
    }

    return joiner.toString();
  }
}

