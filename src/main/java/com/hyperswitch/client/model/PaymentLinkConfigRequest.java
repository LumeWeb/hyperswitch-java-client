/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.PaymentLinkBackgroundImageConfig;
import com.hyperswitch.client.model.PaymentLinkDetailsLayout;
import com.hyperswitch.client.model.PaymentLinkTransactionDetails;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PaymentLinkConfigRequest
 */
@JsonPropertyOrder({
  PaymentLinkConfigRequest.JSON_PROPERTY_THEME,
  PaymentLinkConfigRequest.JSON_PROPERTY_LOGO,
  PaymentLinkConfigRequest.JSON_PROPERTY_SELLER_NAME,
  PaymentLinkConfigRequest.JSON_PROPERTY_SDK_LAYOUT,
  PaymentLinkConfigRequest.JSON_PROPERTY_DISPLAY_SDK_ONLY,
  PaymentLinkConfigRequest.JSON_PROPERTY_ENABLED_SAVED_PAYMENT_METHOD,
  PaymentLinkConfigRequest.JSON_PROPERTY_HIDE_CARD_NICKNAME_FIELD,
  PaymentLinkConfigRequest.JSON_PROPERTY_SHOW_CARD_FORM_BY_DEFAULT,
  PaymentLinkConfigRequest.JSON_PROPERTY_TRANSACTION_DETAILS,
  PaymentLinkConfigRequest.JSON_PROPERTY_BACKGROUND_IMAGE,
  PaymentLinkConfigRequest.JSON_PROPERTY_DETAILS_LAYOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PaymentLinkConfigRequest {
  public static final String JSON_PROPERTY_THEME = "theme";
  @javax.annotation.Nullable
  private JsonNullable<String> theme = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_LOGO = "logo";
  @javax.annotation.Nullable
  private JsonNullable<String> logo = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SELLER_NAME = "seller_name";
  @javax.annotation.Nullable
  private JsonNullable<String> sellerName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SDK_LAYOUT = "sdk_layout";
  @javax.annotation.Nullable
  private JsonNullable<String> sdkLayout = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DISPLAY_SDK_ONLY = "display_sdk_only";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> displaySdkOnly = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_ENABLED_SAVED_PAYMENT_METHOD = "enabled_saved_payment_method";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> enabledSavedPaymentMethod = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_HIDE_CARD_NICKNAME_FIELD = "hide_card_nickname_field";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> hideCardNicknameField = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_SHOW_CARD_FORM_BY_DEFAULT = "show_card_form_by_default";
  @javax.annotation.Nullable
  private JsonNullable<Boolean> showCardFormByDefault = JsonNullable.<Boolean>of(true);

  public static final String JSON_PROPERTY_TRANSACTION_DETAILS = "transaction_details";
  @javax.annotation.Nullable
  private JsonNullable<List<PaymentLinkTransactionDetails>> transactionDetails = JsonNullable.<List<PaymentLinkTransactionDetails>>undefined();

  public static final String JSON_PROPERTY_BACKGROUND_IMAGE = "background_image";
  @javax.annotation.Nullable
  private JsonNullable<PaymentLinkBackgroundImageConfig> backgroundImage = JsonNullable.<PaymentLinkBackgroundImageConfig>undefined();

  public static final String JSON_PROPERTY_DETAILS_LAYOUT = "details_layout";
  @javax.annotation.Nullable
  private JsonNullable<PaymentLinkDetailsLayout> detailsLayout = JsonNullable.<PaymentLinkDetailsLayout>undefined();

  public PaymentLinkConfigRequest() {
  }

  public PaymentLinkConfigRequest theme(@javax.annotation.Nullable String theme) {
    this.theme = JsonNullable.<String>of(theme);
    
    return this;
  }

  /**
   * custom theme for the payment link
   * @return theme
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getTheme() {
        return theme.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTheme_JsonNullable() {
    return theme;
  }
  
  @JsonProperty(JSON_PROPERTY_THEME)
  public void setTheme_JsonNullable(JsonNullable<String> theme) {
    this.theme = theme;
  }

  public void setTheme(@javax.annotation.Nullable String theme) {
    this.theme = JsonNullable.<String>of(theme);
  }

  public PaymentLinkConfigRequest logo(@javax.annotation.Nullable String logo) {
    this.logo = JsonNullable.<String>of(logo);
    
    return this;
  }

  /**
   * merchant display logo
   * @return logo
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getLogo() {
        return logo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLogo_JsonNullable() {
    return logo;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGO)
  public void setLogo_JsonNullable(JsonNullable<String> logo) {
    this.logo = logo;
  }

  public void setLogo(@javax.annotation.Nullable String logo) {
    this.logo = JsonNullable.<String>of(logo);
  }

  public PaymentLinkConfigRequest sellerName(@javax.annotation.Nullable String sellerName) {
    this.sellerName = JsonNullable.<String>of(sellerName);
    
    return this;
  }

  /**
   * Custom merchant name for payment link
   * @return sellerName
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSellerName() {
        return sellerName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SELLER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSellerName_JsonNullable() {
    return sellerName;
  }
  
  @JsonProperty(JSON_PROPERTY_SELLER_NAME)
  public void setSellerName_JsonNullable(JsonNullable<String> sellerName) {
    this.sellerName = sellerName;
  }

  public void setSellerName(@javax.annotation.Nullable String sellerName) {
    this.sellerName = JsonNullable.<String>of(sellerName);
  }

  public PaymentLinkConfigRequest sdkLayout(@javax.annotation.Nullable String sdkLayout) {
    this.sdkLayout = JsonNullable.<String>of(sdkLayout);
    
    return this;
  }

  /**
   * Custom layout for sdk
   * @return sdkLayout
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSdkLayout() {
        return sdkLayout.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SDK_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSdkLayout_JsonNullable() {
    return sdkLayout;
  }
  
  @JsonProperty(JSON_PROPERTY_SDK_LAYOUT)
  public void setSdkLayout_JsonNullable(JsonNullable<String> sdkLayout) {
    this.sdkLayout = sdkLayout;
  }

  public void setSdkLayout(@javax.annotation.Nullable String sdkLayout) {
    this.sdkLayout = JsonNullable.<String>of(sdkLayout);
  }

  public PaymentLinkConfigRequest displaySdkOnly(@javax.annotation.Nullable Boolean displaySdkOnly) {
    this.displaySdkOnly = JsonNullable.<Boolean>of(displaySdkOnly);
    
    return this;
  }

  /**
   * Display only the sdk for payment link
   * @return displaySdkOnly
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getDisplaySdkOnly() {
        return displaySdkOnly.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISPLAY_SDK_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getDisplaySdkOnly_JsonNullable() {
    return displaySdkOnly;
  }
  
  @JsonProperty(JSON_PROPERTY_DISPLAY_SDK_ONLY)
  public void setDisplaySdkOnly_JsonNullable(JsonNullable<Boolean> displaySdkOnly) {
    this.displaySdkOnly = displaySdkOnly;
  }

  public void setDisplaySdkOnly(@javax.annotation.Nullable Boolean displaySdkOnly) {
    this.displaySdkOnly = JsonNullable.<Boolean>of(displaySdkOnly);
  }

  public PaymentLinkConfigRequest enabledSavedPaymentMethod(@javax.annotation.Nullable Boolean enabledSavedPaymentMethod) {
    this.enabledSavedPaymentMethod = JsonNullable.<Boolean>of(enabledSavedPaymentMethod);
    
    return this;
  }

  /**
   * Enable saved payment method option for payment link
   * @return enabledSavedPaymentMethod
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getEnabledSavedPaymentMethod() {
        return enabledSavedPaymentMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ENABLED_SAVED_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getEnabledSavedPaymentMethod_JsonNullable() {
    return enabledSavedPaymentMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_ENABLED_SAVED_PAYMENT_METHOD)
  public void setEnabledSavedPaymentMethod_JsonNullable(JsonNullable<Boolean> enabledSavedPaymentMethod) {
    this.enabledSavedPaymentMethod = enabledSavedPaymentMethod;
  }

  public void setEnabledSavedPaymentMethod(@javax.annotation.Nullable Boolean enabledSavedPaymentMethod) {
    this.enabledSavedPaymentMethod = JsonNullable.<Boolean>of(enabledSavedPaymentMethod);
  }

  public PaymentLinkConfigRequest hideCardNicknameField(@javax.annotation.Nullable Boolean hideCardNicknameField) {
    this.hideCardNicknameField = JsonNullable.<Boolean>of(hideCardNicknameField);
    
    return this;
  }

  /**
   * Hide card nickname field option for payment link
   * @return hideCardNicknameField
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getHideCardNicknameField() {
        return hideCardNicknameField.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HIDE_CARD_NICKNAME_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getHideCardNicknameField_JsonNullable() {
    return hideCardNicknameField;
  }
  
  @JsonProperty(JSON_PROPERTY_HIDE_CARD_NICKNAME_FIELD)
  public void setHideCardNicknameField_JsonNullable(JsonNullable<Boolean> hideCardNicknameField) {
    this.hideCardNicknameField = hideCardNicknameField;
  }

  public void setHideCardNicknameField(@javax.annotation.Nullable Boolean hideCardNicknameField) {
    this.hideCardNicknameField = JsonNullable.<Boolean>of(hideCardNicknameField);
  }

  public PaymentLinkConfigRequest showCardFormByDefault(@javax.annotation.Nullable Boolean showCardFormByDefault) {
    this.showCardFormByDefault = JsonNullable.<Boolean>of(showCardFormByDefault);
    
    return this;
  }

  /**
   * Show card form by default for payment link
   * @return showCardFormByDefault
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getShowCardFormByDefault() {
        return showCardFormByDefault.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHOW_CARD_FORM_BY_DEFAULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getShowCardFormByDefault_JsonNullable() {
    return showCardFormByDefault;
  }
  
  @JsonProperty(JSON_PROPERTY_SHOW_CARD_FORM_BY_DEFAULT)
  public void setShowCardFormByDefault_JsonNullable(JsonNullable<Boolean> showCardFormByDefault) {
    this.showCardFormByDefault = showCardFormByDefault;
  }

  public void setShowCardFormByDefault(@javax.annotation.Nullable Boolean showCardFormByDefault) {
    this.showCardFormByDefault = JsonNullable.<Boolean>of(showCardFormByDefault);
  }

  public PaymentLinkConfigRequest transactionDetails(@javax.annotation.Nullable List<PaymentLinkTransactionDetails> transactionDetails) {
    this.transactionDetails = JsonNullable.<List<PaymentLinkTransactionDetails>>of(transactionDetails);
    
    return this;
  }

  public PaymentLinkConfigRequest addTransactionDetailsItem(PaymentLinkTransactionDetails transactionDetailsItem) {
    if (this.transactionDetails == null || !this.transactionDetails.isPresent()) {
      this.transactionDetails = JsonNullable.<List<PaymentLinkTransactionDetails>>of(new ArrayList<>());
    }
    try {
      this.transactionDetails.get().add(transactionDetailsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Dynamic details related to merchant to be rendered in payment link
   * @return transactionDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public List<PaymentLinkTransactionDetails> getTransactionDetails() {
        return transactionDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<PaymentLinkTransactionDetails>> getTransactionDetails_JsonNullable() {
    return transactionDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DETAILS)
  public void setTransactionDetails_JsonNullable(JsonNullable<List<PaymentLinkTransactionDetails>> transactionDetails) {
    this.transactionDetails = transactionDetails;
  }

  public void setTransactionDetails(@javax.annotation.Nullable List<PaymentLinkTransactionDetails> transactionDetails) {
    this.transactionDetails = JsonNullable.<List<PaymentLinkTransactionDetails>>of(transactionDetails);
  }

  public PaymentLinkConfigRequest backgroundImage(@javax.annotation.Nullable PaymentLinkBackgroundImageConfig backgroundImage) {
    this.backgroundImage = JsonNullable.<PaymentLinkBackgroundImageConfig>of(backgroundImage);
    
    return this;
  }

  /**
   * Get backgroundImage
   * @return backgroundImage
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentLinkBackgroundImageConfig getBackgroundImage() {
        return backgroundImage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BACKGROUND_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentLinkBackgroundImageConfig> getBackgroundImage_JsonNullable() {
    return backgroundImage;
  }
  
  @JsonProperty(JSON_PROPERTY_BACKGROUND_IMAGE)
  public void setBackgroundImage_JsonNullable(JsonNullable<PaymentLinkBackgroundImageConfig> backgroundImage) {
    this.backgroundImage = backgroundImage;
  }

  public void setBackgroundImage(@javax.annotation.Nullable PaymentLinkBackgroundImageConfig backgroundImage) {
    this.backgroundImage = JsonNullable.<PaymentLinkBackgroundImageConfig>of(backgroundImage);
  }

  public PaymentLinkConfigRequest detailsLayout(@javax.annotation.Nullable PaymentLinkDetailsLayout detailsLayout) {
    this.detailsLayout = JsonNullable.<PaymentLinkDetailsLayout>of(detailsLayout);
    
    return this;
  }

  /**
   * Get detailsLayout
   * @return detailsLayout
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentLinkDetailsLayout getDetailsLayout() {
        return detailsLayout.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DETAILS_LAYOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentLinkDetailsLayout> getDetailsLayout_JsonNullable() {
    return detailsLayout;
  }
  
  @JsonProperty(JSON_PROPERTY_DETAILS_LAYOUT)
  public void setDetailsLayout_JsonNullable(JsonNullable<PaymentLinkDetailsLayout> detailsLayout) {
    this.detailsLayout = detailsLayout;
  }

  public void setDetailsLayout(@javax.annotation.Nullable PaymentLinkDetailsLayout detailsLayout) {
    this.detailsLayout = JsonNullable.<PaymentLinkDetailsLayout>of(detailsLayout);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentLinkConfigRequest paymentLinkConfigRequest = (PaymentLinkConfigRequest) o;
    return equalsNullable(this.theme, paymentLinkConfigRequest.theme) &&
        equalsNullable(this.logo, paymentLinkConfigRequest.logo) &&
        equalsNullable(this.sellerName, paymentLinkConfigRequest.sellerName) &&
        equalsNullable(this.sdkLayout, paymentLinkConfigRequest.sdkLayout) &&
        equalsNullable(this.displaySdkOnly, paymentLinkConfigRequest.displaySdkOnly) &&
        equalsNullable(this.enabledSavedPaymentMethod, paymentLinkConfigRequest.enabledSavedPaymentMethod) &&
        equalsNullable(this.hideCardNicknameField, paymentLinkConfigRequest.hideCardNicknameField) &&
        equalsNullable(this.showCardFormByDefault, paymentLinkConfigRequest.showCardFormByDefault) &&
        equalsNullable(this.transactionDetails, paymentLinkConfigRequest.transactionDetails) &&
        equalsNullable(this.backgroundImage, paymentLinkConfigRequest.backgroundImage) &&
        equalsNullable(this.detailsLayout, paymentLinkConfigRequest.detailsLayout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(theme), hashCodeNullable(logo), hashCodeNullable(sellerName), hashCodeNullable(sdkLayout), hashCodeNullable(displaySdkOnly), hashCodeNullable(enabledSavedPaymentMethod), hashCodeNullable(hideCardNicknameField), hashCodeNullable(showCardFormByDefault), hashCodeNullable(transactionDetails), hashCodeNullable(backgroundImage), hashCodeNullable(detailsLayout));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentLinkConfigRequest {\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sdkLayout: ").append(toIndentedString(sdkLayout)).append("\n");
    sb.append("    displaySdkOnly: ").append(toIndentedString(displaySdkOnly)).append("\n");
    sb.append("    enabledSavedPaymentMethod: ").append(toIndentedString(enabledSavedPaymentMethod)).append("\n");
    sb.append("    hideCardNicknameField: ").append(toIndentedString(hideCardNicknameField)).append("\n");
    sb.append("    showCardFormByDefault: ").append(toIndentedString(showCardFormByDefault)).append("\n");
    sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    detailsLayout: ").append(toIndentedString(detailsLayout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `theme` to the URL query string
    if (getTheme() != null) {
      try {
        joiner.add(String.format("%stheme%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTheme()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logo` to the URL query string
    if (getLogo() != null) {
      try {
        joiner.add(String.format("%slogo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seller_name` to the URL query string
    if (getSellerName() != null) {
      try {
        joiner.add(String.format("%sseller_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSellerName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sdk_layout` to the URL query string
    if (getSdkLayout() != null) {
      try {
        joiner.add(String.format("%ssdk_layout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSdkLayout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `display_sdk_only` to the URL query string
    if (getDisplaySdkOnly() != null) {
      try {
        joiner.add(String.format("%sdisplay_sdk_only%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisplaySdkOnly()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `enabled_saved_payment_method` to the URL query string
    if (getEnabledSavedPaymentMethod() != null) {
      try {
        joiner.add(String.format("%senabled_saved_payment_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnabledSavedPaymentMethod()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hide_card_nickname_field` to the URL query string
    if (getHideCardNicknameField() != null) {
      try {
        joiner.add(String.format("%shide_card_nickname_field%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHideCardNicknameField()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `show_card_form_by_default` to the URL query string
    if (getShowCardFormByDefault() != null) {
      try {
        joiner.add(String.format("%sshow_card_form_by_default%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShowCardFormByDefault()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transaction_details` to the URL query string
    if (getTransactionDetails() != null) {
      for (int i = 0; i < getTransactionDetails().size(); i++) {
        if (getTransactionDetails().get(i) != null) {
          joiner.add(getTransactionDetails().get(i).toUrlQueryString(String.format("%stransaction_details%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `background_image` to the URL query string
    if (getBackgroundImage() != null) {
      joiner.add(getBackgroundImage().toUrlQueryString(prefix + "background_image" + suffix));
    }

    // add `details_layout` to the URL query string
    if (getDetailsLayout() != null) {
      try {
        joiner.add(String.format("%sdetails_layout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDetailsLayout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

