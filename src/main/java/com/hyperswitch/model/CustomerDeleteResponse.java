/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CustomerDeleteResponse
 */
@JsonPropertyOrder({
  CustomerDeleteResponse.JSON_PROPERTY_MERCHANT_REFERENCE_ID,
  CustomerDeleteResponse.JSON_PROPERTY_CUSTOMER_DELETED,
  CustomerDeleteResponse.JSON_PROPERTY_ADDRESS_DELETED,
  CustomerDeleteResponse.JSON_PROPERTY_PAYMENT_METHODS_DELETED,
  CustomerDeleteResponse.JSON_PROPERTY_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerDeleteResponse {
  public static final String JSON_PROPERTY_MERCHANT_REFERENCE_ID = "merchant_reference_id";
  private String merchantReferenceId;

  public static final String JSON_PROPERTY_CUSTOMER_DELETED = "customer_deleted";
  private Boolean customerDeleted;

  public static final String JSON_PROPERTY_ADDRESS_DELETED = "address_deleted";
  private Boolean addressDeleted;

  public static final String JSON_PROPERTY_PAYMENT_METHODS_DELETED = "payment_methods_deleted";
  private Boolean paymentMethodsDeleted;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public CustomerDeleteResponse() {
  }

  public CustomerDeleteResponse merchantReferenceId(String merchantReferenceId) {
    
    this.merchantReferenceId = merchantReferenceId;
    return this;
  }

   /**
   * The identifier for the customer object
   * @return merchantReferenceId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantReferenceId() {
    return merchantReferenceId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantReferenceId(String merchantReferenceId) {
    this.merchantReferenceId = merchantReferenceId;
  }


  public CustomerDeleteResponse customerDeleted(Boolean customerDeleted) {
    
    this.customerDeleted = customerDeleted;
    return this;
  }

   /**
   * Whether customer was deleted or not
   * @return customerDeleted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getCustomerDeleted() {
    return customerDeleted;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerDeleted(Boolean customerDeleted) {
    this.customerDeleted = customerDeleted;
  }


  public CustomerDeleteResponse addressDeleted(Boolean addressDeleted) {
    
    this.addressDeleted = addressDeleted;
    return this;
  }

   /**
   * Whether address was deleted or not
   * @return addressDeleted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAddressDeleted() {
    return addressDeleted;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddressDeleted(Boolean addressDeleted) {
    this.addressDeleted = addressDeleted;
  }


  public CustomerDeleteResponse paymentMethodsDeleted(Boolean paymentMethodsDeleted) {
    
    this.paymentMethodsDeleted = paymentMethodsDeleted;
    return this;
  }

   /**
   * Whether payment methods deleted or not
   * @return paymentMethodsDeleted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getPaymentMethodsDeleted() {
    return paymentMethodsDeleted;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHODS_DELETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentMethodsDeleted(Boolean paymentMethodsDeleted) {
    this.paymentMethodsDeleted = paymentMethodsDeleted;
  }


  public CustomerDeleteResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Global id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDeleteResponse customerDeleteResponse = (CustomerDeleteResponse) o;
    return Objects.equals(this.merchantReferenceId, customerDeleteResponse.merchantReferenceId) &&
        Objects.equals(this.customerDeleted, customerDeleteResponse.customerDeleted) &&
        Objects.equals(this.addressDeleted, customerDeleteResponse.addressDeleted) &&
        Objects.equals(this.paymentMethodsDeleted, customerDeleteResponse.paymentMethodsDeleted) &&
        Objects.equals(this.id, customerDeleteResponse.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantReferenceId, customerDeleted, addressDeleted, paymentMethodsDeleted, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDeleteResponse {\n");
    sb.append("    merchantReferenceId: ").append(toIndentedString(merchantReferenceId)).append("\n");
    sb.append("    customerDeleted: ").append(toIndentedString(customerDeleted)).append("\n");
    sb.append("    addressDeleted: ").append(toIndentedString(addressDeleted)).append("\n");
    sb.append("    paymentMethodsDeleted: ").append(toIndentedString(paymentMethodsDeleted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

