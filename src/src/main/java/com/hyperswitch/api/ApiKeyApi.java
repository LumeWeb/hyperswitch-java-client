/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.api;

import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiResponse;
import com.hyperswitch.client.Pair;

import com.hyperswitch.model.CreateApiKeyRequest;
import com.hyperswitch.model.CreateApiKeyResponse;
import com.hyperswitch.model.RetrieveApiKeyResponse;
import com.hyperswitch.model.RevokeApiKeyResponse;
import com.hyperswitch.model.UpdateApiKeyRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ApiKeyApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ApiKeyApi() {
    this(new ApiClient());
  }

  public ApiKeyApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * API Key - Create
   * Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be displayed only once on creation, so ensure you store it securely.
   * @param createApiKeyRequest  (required)
   * @return CreateApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public CreateApiKeyResponse createAnAPIKey(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    ApiResponse<CreateApiKeyResponse> localVarResponse = createAnAPIKeyWithHttpInfo(createApiKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * API Key - Create
   * Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be displayed only once on creation, so ensure you store it securely.
   * @param createApiKeyRequest  (required)
   * @return ApiResponse&lt;CreateApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CreateApiKeyResponse> createAnAPIKeyWithHttpInfo(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAnAPIKeyRequestBuilder(createApiKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAnAPIKey", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<CreateApiKeyResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<CreateApiKeyResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<CreateApiKeyResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAnAPIKeyRequestBuilder(CreateApiKeyRequest createApiKeyRequest) throws ApiException {
    // verify the required parameter 'createApiKeyRequest' is set
    if (createApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiKeyRequest' when calling createAnAPIKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/api_keys";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createApiKeyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * API Key - List
   * List all the API Keys associated to a merchant account.
   * @param limit The maximum number of API Keys to include in the response (optional)
   * @param skip The number of API Keys to skip when retrieving the list of API keys. (optional)
   * @return List&lt;RetrieveApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetrieveApiKeyResponse> listAllAPIKeysAssociatedWithAMerchantAccount(Long limit, Long skip) throws ApiException {
    ApiResponse<List<RetrieveApiKeyResponse>> localVarResponse = listAllAPIKeysAssociatedWithAMerchantAccountWithHttpInfo(limit, skip);
    return localVarResponse.getData();
  }

  /**
   * API Key - List
   * List all the API Keys associated to a merchant account.
   * @param limit The maximum number of API Keys to include in the response (optional)
   * @param skip The number of API Keys to skip when retrieving the list of API keys. (optional)
   * @return ApiResponse&lt;List&lt;RetrieveApiKeyResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RetrieveApiKeyResponse>> listAllAPIKeysAssociatedWithAMerchantAccountWithHttpInfo(Long limit, Long skip) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAllAPIKeysAssociatedWithAMerchantAccountRequestBuilder(limit, skip);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAllAPIKeysAssociatedWithAMerchantAccount", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<RetrieveApiKeyResponse>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<RetrieveApiKeyResponse>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<RetrieveApiKeyResponse>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAllAPIKeysAssociatedWithAMerchantAccountRequestBuilder(Long limit, Long skip) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/api_keys/list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * API Key - Retrieve
   * Retrieve information about the specified API Key.
   * @param id The unique identifier for the API Key (required)
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse retrieveAnAPIKey(String id) throws ApiException {
    ApiResponse<RetrieveApiKeyResponse> localVarResponse = retrieveAnAPIKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * API Key - Retrieve
   * Retrieve information about the specified API Key.
   * @param id The unique identifier for the API Key (required)
   * @return ApiResponse&lt;RetrieveApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RetrieveApiKeyResponse> retrieveAnAPIKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveAnAPIKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveAnAPIKey", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<RetrieveApiKeyResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<RetrieveApiKeyResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<RetrieveApiKeyResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveAnAPIKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveAnAPIKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/api_keys/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * API Key - Revoke
   * Revoke the specified API Key. Once revoked, the API Key can no longer be used for authenticating with our APIs.
   * @param id The unique identifier for the API Key (required)
   * @return RevokeApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RevokeApiKeyResponse revokeAnAPIKey(String id) throws ApiException {
    ApiResponse<RevokeApiKeyResponse> localVarResponse = revokeAnAPIKeyWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * API Key - Revoke
   * Revoke the specified API Key. Once revoked, the API Key can no longer be used for authenticating with our APIs.
   * @param id The unique identifier for the API Key (required)
   * @return ApiResponse&lt;RevokeApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RevokeApiKeyResponse> revokeAnAPIKeyWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revokeAnAPIKeyRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revokeAnAPIKey", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<RevokeApiKeyResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<RevokeApiKeyResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<RevokeApiKeyResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revokeAnAPIKeyRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling revokeAnAPIKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/api_keys/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * API Key - Update
   * Update information for the specified API Key.
   * @param id The unique identifier for the API Key (required)
   * @param updateApiKeyRequest  (required)
   * @return RetrieveApiKeyResponse
   * @throws ApiException if fails to make API call
   */
  public RetrieveApiKeyResponse updateAnAPIKey(String id, UpdateApiKeyRequest updateApiKeyRequest) throws ApiException {
    ApiResponse<RetrieveApiKeyResponse> localVarResponse = updateAnAPIKeyWithHttpInfo(id, updateApiKeyRequest);
    return localVarResponse.getData();
  }

  /**
   * API Key - Update
   * Update information for the specified API Key.
   * @param id The unique identifier for the API Key (required)
   * @param updateApiKeyRequest  (required)
   * @return ApiResponse&lt;RetrieveApiKeyResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RetrieveApiKeyResponse> updateAnAPIKeyWithHttpInfo(String id, UpdateApiKeyRequest updateApiKeyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAnAPIKeyRequestBuilder(id, updateApiKeyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAnAPIKey", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<RetrieveApiKeyResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<RetrieveApiKeyResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<RetrieveApiKeyResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAnAPIKeyRequestBuilder(String id, UpdateApiKeyRequest updateApiKeyRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAnAPIKey");
    }
    // verify the required parameter 'updateApiKeyRequest' is set
    if (updateApiKeyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateApiKeyRequest' when calling updateAnAPIKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/api_keys/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateApiKeyRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
