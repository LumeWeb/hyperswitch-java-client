/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.SessionToken;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentsSessionResponse
 */
@JsonPropertyOrder({
  PaymentsSessionResponse.JSON_PROPERTY_PAYMENT_ID,
  PaymentsSessionResponse.JSON_PROPERTY_CLIENT_SECRET,
  PaymentsSessionResponse.JSON_PROPERTY_SESSION_TOKEN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class PaymentsSessionResponse {
  public static final String JSON_PROPERTY_PAYMENT_ID = "payment_id";
  @javax.annotation.Nonnull
  private String paymentId;

  public static final String JSON_PROPERTY_CLIENT_SECRET = "client_secret";
  @javax.annotation.Nonnull
  private String clientSecret;

  public static final String JSON_PROPERTY_SESSION_TOKEN = "session_token";
  @javax.annotation.Nonnull
  private List<SessionToken> sessionToken = new ArrayList<>();

  public PaymentsSessionResponse() {
  }

  public PaymentsSessionResponse paymentId(@javax.annotation.Nonnull String paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The identifier for the payment
   * @return paymentId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentId(@javax.annotation.Nonnull String paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentsSessionResponse clientSecret(@javax.annotation.Nonnull String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClientSecret() {
    return clientSecret;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientSecret(@javax.annotation.Nonnull String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public PaymentsSessionResponse sessionToken(@javax.annotation.Nonnull List<SessionToken> sessionToken) {
    
    this.sessionToken = sessionToken;
    return this;
  }

  public PaymentsSessionResponse addSessionTokenItem(SessionToken sessionTokenItem) {
    if (this.sessionToken == null) {
      this.sessionToken = new ArrayList<>();
    }
    this.sessionToken.add(sessionTokenItem);
    return this;
  }

  /**
   * The list of session token object
   * @return sessionToken
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SessionToken> getSessionToken() {
    return sessionToken;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionToken(@javax.annotation.Nonnull List<SessionToken> sessionToken) {
    this.sessionToken = sessionToken;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsSessionResponse paymentsSessionResponse = (PaymentsSessionResponse) o;
    return Objects.equals(this.paymentId, paymentsSessionResponse.paymentId) &&
        Objects.equals(this.clientSecret, paymentsSessionResponse.clientSecret) &&
        Objects.equals(this.sessionToken, paymentsSessionResponse.sessionToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, clientSecret, sessionToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsSessionResponse {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

