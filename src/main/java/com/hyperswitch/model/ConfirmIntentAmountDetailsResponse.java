/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.Currency;
import com.hyperswitch.model.SurchargeCalculationOverride;
import com.hyperswitch.model.TaxCalculationOverride;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConfirmIntentAmountDetailsResponse
 */
@JsonPropertyOrder({
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_ORDER_AMOUNT,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_CURRENCY,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_SHIPPING_COST,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_ORDER_TAX_AMOUNT,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_SURCHARGE_AMOUNT,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_TAX_ON_SURCHARGE,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_NET_AMOUNT,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_AMOUNT_TO_CAPTURE,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_AMOUNT_CAPTURABLE,
  ConfirmIntentAmountDetailsResponse.JSON_PROPERTY_AMOUNT_CAPTURED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ConfirmIntentAmountDetailsResponse {
  public static final String JSON_PROPERTY_ORDER_AMOUNT = "order_amount";
  @javax.annotation.Nullable
  private Long orderAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  @javax.annotation.Nonnull
  private Currency currency;

  public static final String JSON_PROPERTY_SHIPPING_COST = "shipping_cost";
  private JsonNullable<Long> shippingCost = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_ORDER_TAX_AMOUNT = "order_tax_amount";
  private JsonNullable<Long> orderTaxAmount = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION = "skip_external_tax_calculation";
  @javax.annotation.Nonnull
  private TaxCalculationOverride skipExternalTaxCalculation;

  public static final String JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION = "skip_surcharge_calculation";
  @javax.annotation.Nonnull
  private SurchargeCalculationOverride skipSurchargeCalculation;

  public static final String JSON_PROPERTY_SURCHARGE_AMOUNT = "surcharge_amount";
  private JsonNullable<Long> surchargeAmount = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_TAX_ON_SURCHARGE = "tax_on_surcharge";
  private JsonNullable<Long> taxOnSurcharge = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_NET_AMOUNT = "net_amount";
  @javax.annotation.Nonnull
  private Long netAmount;

  public static final String JSON_PROPERTY_AMOUNT_TO_CAPTURE = "amount_to_capture";
  private JsonNullable<Long> amountToCapture = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_AMOUNT_CAPTURABLE = "amount_capturable";
  @javax.annotation.Nonnull
  private Long amountCapturable;

  public static final String JSON_PROPERTY_AMOUNT_CAPTURED = "amount_captured";
  private JsonNullable<Long> amountCaptured = JsonNullable.<Long>undefined();

  public ConfirmIntentAmountDetailsResponse() {
  }

  public ConfirmIntentAmountDetailsResponse orderAmount(@javax.annotation.Nullable Long orderAmount) {
    
    this.orderAmount = orderAmount;
    return this;
  }

  /**
   * The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)
   * minimum: 0
   * @return orderAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOrderAmount() {
    return orderAmount;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderAmount(@javax.annotation.Nullable Long orderAmount) {
    this.orderAmount = orderAmount;
  }


  public ConfirmIntentAmountDetailsResponse currency(@javax.annotation.Nonnull Currency currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(@javax.annotation.Nonnull Currency currency) {
    this.currency = currency;
  }


  public ConfirmIntentAmountDetailsResponse shippingCost(@javax.annotation.Nullable Long shippingCost) {
    this.shippingCost = JsonNullable.<Long>of(shippingCost);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return shippingCost
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getShippingCost() {
        return shippingCost.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getShippingCost_JsonNullable() {
    return shippingCost;
  }
  
  @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
  public void setShippingCost_JsonNullable(JsonNullable<Long> shippingCost) {
    this.shippingCost = shippingCost;
  }

  public void setShippingCost(@javax.annotation.Nullable Long shippingCost) {
    this.shippingCost = JsonNullable.<Long>of(shippingCost);
  }


  public ConfirmIntentAmountDetailsResponse orderTaxAmount(@javax.annotation.Nullable Long orderTaxAmount) {
    this.orderTaxAmount = JsonNullable.<Long>of(orderTaxAmount);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return orderTaxAmount
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getOrderTaxAmount() {
        return orderTaxAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORDER_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getOrderTaxAmount_JsonNullable() {
    return orderTaxAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_ORDER_TAX_AMOUNT)
  public void setOrderTaxAmount_JsonNullable(JsonNullable<Long> orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }

  public void setOrderTaxAmount(@javax.annotation.Nullable Long orderTaxAmount) {
    this.orderTaxAmount = JsonNullable.<Long>of(orderTaxAmount);
  }


  public ConfirmIntentAmountDetailsResponse skipExternalTaxCalculation(@javax.annotation.Nonnull TaxCalculationOverride skipExternalTaxCalculation) {
    
    this.skipExternalTaxCalculation = skipExternalTaxCalculation;
    return this;
  }

  /**
   * Get skipExternalTaxCalculation
   * @return skipExternalTaxCalculation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TaxCalculationOverride getSkipExternalTaxCalculation() {
    return skipExternalTaxCalculation;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkipExternalTaxCalculation(@javax.annotation.Nonnull TaxCalculationOverride skipExternalTaxCalculation) {
    this.skipExternalTaxCalculation = skipExternalTaxCalculation;
  }


  public ConfirmIntentAmountDetailsResponse skipSurchargeCalculation(@javax.annotation.Nonnull SurchargeCalculationOverride skipSurchargeCalculation) {
    
    this.skipSurchargeCalculation = skipSurchargeCalculation;
    return this;
  }

  /**
   * Get skipSurchargeCalculation
   * @return skipSurchargeCalculation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SurchargeCalculationOverride getSkipSurchargeCalculation() {
    return skipSurchargeCalculation;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkipSurchargeCalculation(@javax.annotation.Nonnull SurchargeCalculationOverride skipSurchargeCalculation) {
    this.skipSurchargeCalculation = skipSurchargeCalculation;
  }


  public ConfirmIntentAmountDetailsResponse surchargeAmount(@javax.annotation.Nullable Long surchargeAmount) {
    this.surchargeAmount = JsonNullable.<Long>of(surchargeAmount);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return surchargeAmount
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getSurchargeAmount() {
        return surchargeAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SURCHARGE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getSurchargeAmount_JsonNullable() {
    return surchargeAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_SURCHARGE_AMOUNT)
  public void setSurchargeAmount_JsonNullable(JsonNullable<Long> surchargeAmount) {
    this.surchargeAmount = surchargeAmount;
  }

  public void setSurchargeAmount(@javax.annotation.Nullable Long surchargeAmount) {
    this.surchargeAmount = JsonNullable.<Long>of(surchargeAmount);
  }


  public ConfirmIntentAmountDetailsResponse taxOnSurcharge(@javax.annotation.Nullable Long taxOnSurcharge) {
    this.taxOnSurcharge = JsonNullable.<Long>of(taxOnSurcharge);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return taxOnSurcharge
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getTaxOnSurcharge() {
        return taxOnSurcharge.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAX_ON_SURCHARGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getTaxOnSurcharge_JsonNullable() {
    return taxOnSurcharge;
  }
  
  @JsonProperty(JSON_PROPERTY_TAX_ON_SURCHARGE)
  public void setTaxOnSurcharge_JsonNullable(JsonNullable<Long> taxOnSurcharge) {
    this.taxOnSurcharge = taxOnSurcharge;
  }

  public void setTaxOnSurcharge(@javax.annotation.Nullable Long taxOnSurcharge) {
    this.taxOnSurcharge = JsonNullable.<Long>of(taxOnSurcharge);
  }


  public ConfirmIntentAmountDetailsResponse netAmount(@javax.annotation.Nonnull Long netAmount) {
    
    this.netAmount = netAmount;
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return netAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getNetAmount() {
    return netAmount;
  }


  @JsonProperty(JSON_PROPERTY_NET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetAmount(@javax.annotation.Nonnull Long netAmount) {
    this.netAmount = netAmount;
  }


  public ConfirmIntentAmountDetailsResponse amountToCapture(@javax.annotation.Nullable Long amountToCapture) {
    this.amountToCapture = JsonNullable.<Long>of(amountToCapture);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return amountToCapture
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getAmountToCapture() {
        return amountToCapture.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_TO_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAmountToCapture_JsonNullable() {
    return amountToCapture;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_TO_CAPTURE)
  public void setAmountToCapture_JsonNullable(JsonNullable<Long> amountToCapture) {
    this.amountToCapture = amountToCapture;
  }

  public void setAmountToCapture(@javax.annotation.Nullable Long amountToCapture) {
    this.amountToCapture = JsonNullable.<Long>of(amountToCapture);
  }


  public ConfirmIntentAmountDetailsResponse amountCapturable(@javax.annotation.Nonnull Long amountCapturable) {
    
    this.amountCapturable = amountCapturable;
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return amountCapturable
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_CAPTURABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAmountCapturable() {
    return amountCapturable;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_CAPTURABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmountCapturable(@javax.annotation.Nonnull Long amountCapturable) {
    this.amountCapturable = amountCapturable;
  }


  public ConfirmIntentAmountDetailsResponse amountCaptured(@javax.annotation.Nullable Long amountCaptured) {
    this.amountCaptured = JsonNullable.<Long>of(amountCaptured);
    
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return amountCaptured
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getAmountCaptured() {
        return amountCaptured.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_CAPTURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAmountCaptured_JsonNullable() {
    return amountCaptured;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_CAPTURED)
  public void setAmountCaptured_JsonNullable(JsonNullable<Long> amountCaptured) {
    this.amountCaptured = amountCaptured;
  }

  public void setAmountCaptured(@javax.annotation.Nullable Long amountCaptured) {
    this.amountCaptured = JsonNullable.<Long>of(amountCaptured);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfirmIntentAmountDetailsResponse confirmIntentAmountDetailsResponse = (ConfirmIntentAmountDetailsResponse) o;
    return Objects.equals(this.orderAmount, confirmIntentAmountDetailsResponse.orderAmount) &&
        Objects.equals(this.currency, confirmIntentAmountDetailsResponse.currency) &&
        equalsNullable(this.shippingCost, confirmIntentAmountDetailsResponse.shippingCost) &&
        equalsNullable(this.orderTaxAmount, confirmIntentAmountDetailsResponse.orderTaxAmount) &&
        Objects.equals(this.skipExternalTaxCalculation, confirmIntentAmountDetailsResponse.skipExternalTaxCalculation) &&
        Objects.equals(this.skipSurchargeCalculation, confirmIntentAmountDetailsResponse.skipSurchargeCalculation) &&
        equalsNullable(this.surchargeAmount, confirmIntentAmountDetailsResponse.surchargeAmount) &&
        equalsNullable(this.taxOnSurcharge, confirmIntentAmountDetailsResponse.taxOnSurcharge) &&
        Objects.equals(this.netAmount, confirmIntentAmountDetailsResponse.netAmount) &&
        equalsNullable(this.amountToCapture, confirmIntentAmountDetailsResponse.amountToCapture) &&
        Objects.equals(this.amountCapturable, confirmIntentAmountDetailsResponse.amountCapturable) &&
        equalsNullable(this.amountCaptured, confirmIntentAmountDetailsResponse.amountCaptured);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderAmount, currency, hashCodeNullable(shippingCost), hashCodeNullable(orderTaxAmount), skipExternalTaxCalculation, skipSurchargeCalculation, hashCodeNullable(surchargeAmount), hashCodeNullable(taxOnSurcharge), netAmount, hashCodeNullable(amountToCapture), amountCapturable, hashCodeNullable(amountCaptured));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfirmIntentAmountDetailsResponse {\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    skipExternalTaxCalculation: ").append(toIndentedString(skipExternalTaxCalculation)).append("\n");
    sb.append("    skipSurchargeCalculation: ").append(toIndentedString(skipSurchargeCalculation)).append("\n");
    sb.append("    surchargeAmount: ").append(toIndentedString(surchargeAmount)).append("\n");
    sb.append("    taxOnSurcharge: ").append(toIndentedString(taxOnSurcharge)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    amountToCapture: ").append(toIndentedString(amountToCapture)).append("\n");
    sb.append("    amountCapturable: ").append(toIndentedString(amountCapturable)).append("\n");
    sb.append("    amountCaptured: ").append(toIndentedString(amountCaptured)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

