/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.api;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.model.CreateApiKeyRequest;
import com.hyperswitch.model.CreateApiKeyResponse;
import com.hyperswitch.model.RetrieveApiKeyResponse;
import com.hyperswitch.model.RevokeApiKeyResponse;
import com.hyperswitch.model.UpdateApiKeyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ApiKeyApi
 */
@Disabled
public class ApiKeyApiTest {

    private final ApiKeyApi api = new ApiKeyApi();

    
    /**
     * API Key - Create
     *
     * Create a new API Key for accessing our APIs from your servers. The plaintext API Key will be displayed only once on creation, so ensure you store it securely.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnAPIKeyTest() throws ApiException {
        CreateApiKeyRequest createApiKeyRequest = null;
        CreateApiKeyResponse response = 
        api.createAnAPIKey(createApiKeyRequest);
        
        // TODO: test validations
    }
    
    /**
     * API Key - List
     *
     * List all the API Keys associated to a merchant account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllAPIKeysAssociatedWithAMerchantAccountTest() throws ApiException {
        Long limit = null;
        Long skip = null;
        List<RetrieveApiKeyResponse> response = 
        api.listAllAPIKeysAssociatedWithAMerchantAccount(limit, skip);
        
        // TODO: test validations
    }
    
    /**
     * API Key - Retrieve
     *
     * Retrieve information about the specified API Key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAnAPIKeyTest() throws ApiException {
        String id = null;
        RetrieveApiKeyResponse response = 
        api.retrieveAnAPIKey(id);
        
        // TODO: test validations
    }
    
    /**
     * API Key - Revoke
     *
     * Revoke the specified API Key. Once revoked, the API Key can no longer be used for authenticating with our APIs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeAnAPIKeyTest() throws ApiException {
        String id = null;
        RevokeApiKeyResponse response = 
        api.revokeAnAPIKey(id);
        
        // TODO: test validations
    }
    
    /**
     * API Key - Update
     *
     * Update information for the specified API Key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnAPIKeyTest() throws ApiException {
        String id = null;
        UpdateApiKeyRequest updateApiKeyRequest = null;
        RetrieveApiKeyResponse response = 
        api.updateAnAPIKey(id, updateApiKeyRequest);
        
        // TODO: test validations
    }
    
}
