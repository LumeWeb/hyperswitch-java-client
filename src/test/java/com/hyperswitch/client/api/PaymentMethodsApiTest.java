/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.api;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.model.Currency;
import com.hyperswitch.client.model.CustomerDefaultPaymentMethodResponse;
import com.hyperswitch.client.model.CustomerPaymentMethodsListResponse;
import com.hyperswitch.client.model.PaymentMethodCreate;
import com.hyperswitch.client.model.PaymentMethodDeleteResponse;
import com.hyperswitch.client.model.PaymentMethodListResponse;
import com.hyperswitch.client.model.PaymentMethodResponse;
import com.hyperswitch.client.model.PaymentMethodUpdate;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentMethodsApi
 */
@Disabled
public class PaymentMethodsApiTest {

    private final PaymentMethodsApi api = new PaymentMethodsApi();

    /**
     * PaymentMethods - Create
     *
     * Creates and stores a payment method against a customer. In case of cards, this API should be used only by PCI compliant merchants.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAPaymentMethodTest() throws ApiException {
        PaymentMethodCreate paymentMethodCreate = null;
        PaymentMethodResponse response = api.createAPaymentMethod(paymentMethodCreate);

        // TODO: test validations
    }
    /**
     * Payment Method - Delete
     *
     * Deletes a payment method of a customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAPaymentMethodTest() throws ApiException {
        String methodId = null;
        PaymentMethodDeleteResponse response = api.deleteAPaymentMethod(methodId);

        // TODO: test validations
    }
    /**
     * List payment methods for a Customer
     *
     * Lists all the applicable payment methods for a particular Customer ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllPaymentMethodsForACustomerTest() throws ApiException {
        String customerId = null;
        List<String> acceptedCountry = null;
        List<Currency> acceptedCurrency = null;
        Long minimumAmount = null;
        Long maximumAmount = null;
        Boolean recurringPaymentEnabled = null;
        Boolean installmentPaymentEnabled = null;
        CustomerPaymentMethodsListResponse response = api.listAllPaymentMethodsForACustomer(customerId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled);

        // TODO: test validations
    }
    /**
     * List payment methods for a Merchant
     *
     * Lists the applicable payment methods for a particular Merchant ID. Use the client secret and publishable key authorization to list all relevant payment methods of the merchant for the payment corresponding to the client secret.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllPaymentMethodsForAMerchantTest() throws ApiException {
        String accountId = null;
        List<String> acceptedCountry = null;
        List<Currency> acceptedCurrency = null;
        Long minimumAmount = null;
        Long maximumAmount = null;
        Boolean recurringPaymentEnabled = null;
        Boolean installmentPaymentEnabled = null;
        PaymentMethodListResponse response = api.listAllPaymentMethodsForAMerchant(accountId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled);

        // TODO: test validations
    }
    /**
     * List customer saved payment methods for a Payment
     *
     * Lists all the applicable payment methods for a particular payment tied to the &#x60;client_secret&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCustomerPaymentMethodsTest() throws ApiException {
        String clientSecret = null;
        String customerId = null;
        List<String> acceptedCountry = null;
        List<Currency> acceptedCurrency = null;
        Long minimumAmount = null;
        Long maximumAmount = null;
        Boolean recurringPaymentEnabled = null;
        Boolean installmentPaymentEnabled = null;
        CustomerPaymentMethodsListResponse response = api.listCustomerPaymentMethods(clientSecret, customerId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled);

        // TODO: test validations
    }
    /**
     * Payment Method - Retrieve
     *
     * Retrieves a payment method of a customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAPaymentMethodTest() throws ApiException {
        String methodId = null;
        PaymentMethodResponse response = api.retrieveAPaymentMethod(methodId);

        // TODO: test validations
    }
    /**
     * Payment Method - Set Default Payment Method for Customer
     *
     * Set the Payment Method as Default for the Customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setThePaymentMethodAsDefaultTest() throws ApiException {
        String customerId = null;
        String paymentMethodId = null;
        CustomerDefaultPaymentMethodResponse response = api.setThePaymentMethodAsDefault(customerId, paymentMethodId);

        // TODO: test validations
    }
    /**
     * Payment Method - Update
     *
     * Update an existing payment method of a customer. This API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAPaymentMethodTest() throws ApiException {
        String methodId = null;
        PaymentMethodUpdate paymentMethodUpdate = null;
        PaymentMethodResponse response = api.updateAPaymentMethod(methodId, paymentMethodUpdate);

        // TODO: test validations
    }
}
