/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.ApplePayPaymentRequest;
import com.hyperswitch.client.model.ApplePaySessionResponse;
import com.hyperswitch.client.model.Currency;
import com.hyperswitch.client.model.GpayAllowedPaymentMethods;
import com.hyperswitch.client.model.GpayMerchantInfo;
import com.hyperswitch.client.model.GpayShippingAddressParameters;
import com.hyperswitch.client.model.GpayTransactionInfo;
import com.hyperswitch.client.model.SamsungPayAmountDetails;
import com.hyperswitch.client.model.SamsungPayMerchantPaymentInformation;
import com.hyperswitch.client.model.SamsungPayProtocolType;
import com.hyperswitch.client.model.SdkNextAction;
import com.hyperswitch.client.model.SecretInfoToInitiateSdk;
import com.hyperswitch.client.model.SessionTokenOneOf;
import com.hyperswitch.client.model.SessionTokenOneOf1;
import com.hyperswitch.client.model.SessionTokenOneOf2;
import com.hyperswitch.client.model.SessionTokenOneOf3;
import com.hyperswitch.client.model.SessionTokenOneOf4;
import com.hyperswitch.client.model.SessionTokenOneOf5;
import com.hyperswitch.client.model.SessionTokenOneOf6;
import com.hyperswitch.client.model.SessionTokenOneOf7;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
* SessionToken
*/
    @JsonPropertyOrder({
        SessionToken.JSON_PROPERTY_DELAYED_SESSION_TOKEN,
        SessionToken.JSON_PROPERTY_CONNECTOR,
        SessionToken.JSON_PROPERTY_SDK_NEXT_ACTION,
        SessionToken.JSON_PROPERTY_MERCHANT_INFO,
        SessionToken.JSON_PROPERTY_SHIPPING_ADDRESS_REQUIRED,
        SessionToken.JSON_PROPERTY_EMAIL_REQUIRED,
        SessionToken.JSON_PROPERTY_SHIPPING_ADDRESS_PARAMETERS,
        SessionToken.JSON_PROPERTY_ALLOWED_PAYMENT_METHODS,
        SessionToken.JSON_PROPERTY_TRANSACTION_INFO,
        SessionToken.JSON_PROPERTY_SECRETS,
        SessionToken.JSON_PROPERTY_WALLET_NAME,
        SessionToken.JSON_PROPERTY_VERSION,
        SessionToken.JSON_PROPERTY_SERVICE_ID,
        SessionToken.JSON_PROPERTY_ORDER_NUMBER,
        SessionToken.JSON_PROPERTY_MERCHANT,
        SessionToken.JSON_PROPERTY_AMOUNT,
        SessionToken.JSON_PROPERTY_PROTOCOL,
        SessionToken.JSON_PROPERTY_ALLOWED_BRANDS,
        SessionToken.JSON_PROPERTY_SESSION_TOKEN,
        SessionToken.JSON_PROPERTY_SESSION_ID,
        SessionToken.JSON_PROPERTY_SESSION_TOKEN_DATA,
        SessionToken.JSON_PROPERTY_PAYMENT_REQUEST_DATA,
        SessionToken.JSON_PROPERTY_CONNECTOR_REFERENCE_ID,
        SessionToken.JSON_PROPERTY_CONNECTOR_SDK_PUBLIC_KEY,
        SessionToken.JSON_PROPERTY_CONNECTOR_MERCHANT_ID,
        SessionToken.JSON_PROPERTY_OPEN_BANKING_SESSION_TOKEN,
        SessionToken.JSON_PROPERTY_CLIENT_ID,
        SessionToken.JSON_PROPERTY_CLIENT_NAME,
        SessionToken.JSON_PROPERTY_CLIENT_PROFILE_ID,
        SessionToken.JSON_PROPERTY_TRANSACTION_CURRENCY_CODE,
        SessionToken.JSON_PROPERTY_TRANSACTION_AMOUNT,
        SessionToken.JSON_PROPERTY_EMAIL_ADDRESS
    })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
@JsonIgnoreProperties(
  value = "wallet_name", // ignore manually set wallet_name, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the wallet_name to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "wallet_name", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = SessionTokenOneOf.class, name = "SessionToken_oneOf"),
  @JsonSubTypes.Type(value = SessionTokenOneOf1.class, name = "SessionToken_oneOf_1"),
  @JsonSubTypes.Type(value = SessionTokenOneOf2.class, name = "SessionToken_oneOf_2"),
  @JsonSubTypes.Type(value = SessionTokenOneOf3.class, name = "SessionToken_oneOf_3"),
  @JsonSubTypes.Type(value = SessionTokenOneOf4.class, name = "SessionToken_oneOf_4"),
  @JsonSubTypes.Type(value = SessionTokenOneOf5.class, name = "SessionToken_oneOf_5"),
  @JsonSubTypes.Type(value = SessionTokenOneOf6.class, name = "SessionToken_oneOf_6"),
  @JsonSubTypes.Type(value = SessionTokenOneOf7.class, name = "SessionToken_oneOf_7"),
})

    public static SessionTokenOneOf1 paymentMethodId(String paymentMethodId) {
        SessionTokenOneOf1 result = new SessionTokenOneOf1();
        result.setType(SessionTokenOneOf1.TypeEnum.PAYMENT_METHOD_ID);
        result.setData(paymentMethodId);
        return result;
    }

    public static SessionTokenOneOf mandateId(String mandateId) {
        SessionTokenOneOf result = new SessionTokenOneOf();
        result.setType(SessionTokenOneOf.TypeEnum.MANDATE_ID);
        result.setData(mandateId);
        return result;
    }

    public static SessionTokenOneOf2 processorPaymentToken(ProcessorPaymentToken token) {
        SessionTokenOneOf2 result = new SessionTokenOneOf2();
        result.setType(SessionTokenOneOf2.TypeEnum.PROCESSOR_PAYMENT_TOKEN);
        result.setData(token);
        return result;
    }

    public static SessionTokenOneOf3 networkTransactionIdAndCardDetails(NetworkTransactionIdAndCardDetails details) {
        SessionTokenOneOf3 result = new SessionTokenOneOf3();
        result.setType(SessionTokenOneOf3.TypeEnum.NETWORK_TRANSACTION_ID_AND_CARD_DETAILS);
        result.setData(details);
        return result;
    }
public class SessionToken extends SessionToken {
        public static final String JSON_PROPERTY_DELAYED_SESSION_TOKEN = "delayed_session_token";
    @javax.annotation.Nonnull
            private Boolean delayedSessionToken;

        public static final String JSON_PROPERTY_CONNECTOR = "connector";
    @javax.annotation.Nonnull
            private String connector;

        public static final String JSON_PROPERTY_SDK_NEXT_ACTION = "sdk_next_action";
    @javax.annotation.Nonnull
            private SdkNextAction sdkNextAction;

        public static final String JSON_PROPERTY_MERCHANT_INFO = "merchant_info";
    @javax.annotation.Nonnull
            private GpayMerchantInfo merchantInfo;

        public static final String JSON_PROPERTY_SHIPPING_ADDRESS_REQUIRED = "shipping_address_required";
    @javax.annotation.Nonnull
            private Boolean shippingAddressRequired;

        public static final String JSON_PROPERTY_EMAIL_REQUIRED = "email_required";
    @javax.annotation.Nonnull
            private Boolean emailRequired;

        public static final String JSON_PROPERTY_SHIPPING_ADDRESS_PARAMETERS = "shipping_address_parameters";
    @javax.annotation.Nonnull
            private GpayShippingAddressParameters shippingAddressParameters;

        public static final String JSON_PROPERTY_ALLOWED_PAYMENT_METHODS = "allowed_payment_methods";
    @javax.annotation.Nonnull
            private List<GpayAllowedPaymentMethods> allowedPaymentMethods = new ArrayList<>();

        public static final String JSON_PROPERTY_TRANSACTION_INFO = "transaction_info";
    @javax.annotation.Nonnull
            private GpayTransactionInfo transactionInfo;

        public static final String JSON_PROPERTY_SECRETS = "secrets";
    @javax.annotation.Nullable
            private JsonNullable<SecretInfoToInitiateSdk> secrets = JsonNullable.<SecretInfoToInitiateSdk>undefined();

              /**
   * Gets or Sets walletName
   */
  public enum WalletNameEnum {
    NO_SESSION_TOKEN_RECEIVED(String.valueOf("no_session_token_received"));

    private String value;

    WalletNameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WalletNameEnum fromValue(String value) {
      for (WalletNameEnum b : WalletNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

        public static final String JSON_PROPERTY_WALLET_NAME = "wallet_name";
    @javax.annotation.Nonnull
            private WalletNameEnum walletName;

        public static final String JSON_PROPERTY_VERSION = "version";
    @javax.annotation.Nonnull
            private String version;

        public static final String JSON_PROPERTY_SERVICE_ID = "service_id";
    @javax.annotation.Nonnull
            private String serviceId;

        public static final String JSON_PROPERTY_ORDER_NUMBER = "order_number";
    @javax.annotation.Nonnull
            private String orderNumber;

        public static final String JSON_PROPERTY_MERCHANT = "merchant";
    @javax.annotation.Nonnull
            private SamsungPayMerchantPaymentInformation merchant;

        public static final String JSON_PROPERTY_AMOUNT = "amount";
    @javax.annotation.Nonnull
            private SamsungPayAmountDetails amount;

        public static final String JSON_PROPERTY_PROTOCOL = "protocol";
    @javax.annotation.Nonnull
            private SamsungPayProtocolType protocol;

        public static final String JSON_PROPERTY_ALLOWED_BRANDS = "allowed_brands";
    @javax.annotation.Nonnull
            private List<String> allowedBrands = new ArrayList<>();

        public static final String JSON_PROPERTY_SESSION_TOKEN = "session_token";
    @javax.annotation.Nonnull
            private String sessionToken;

        public static final String JSON_PROPERTY_SESSION_ID = "session_id";
    @javax.annotation.Nonnull
            private String sessionId;

        public static final String JSON_PROPERTY_SESSION_TOKEN_DATA = "session_token_data";
    @javax.annotation.Nullable
            private JsonNullable<ApplePaySessionResponse> sessionTokenData = JsonNullable.<ApplePaySessionResponse>undefined();

        public static final String JSON_PROPERTY_PAYMENT_REQUEST_DATA = "payment_request_data";
    @javax.annotation.Nullable
            private JsonNullable<ApplePayPaymentRequest> paymentRequestData = JsonNullable.<ApplePayPaymentRequest>undefined();

        public static final String JSON_PROPERTY_CONNECTOR_REFERENCE_ID = "connector_reference_id";
    @javax.annotation.Nullable
            private JsonNullable<String> connectorReferenceId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_CONNECTOR_SDK_PUBLIC_KEY = "connector_sdk_public_key";
    @javax.annotation.Nullable
            private JsonNullable<String> connectorSdkPublicKey = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_CONNECTOR_MERCHANT_ID = "connector_merchant_id";
    @javax.annotation.Nullable
            private JsonNullable<String> connectorMerchantId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_OPEN_BANKING_SESSION_TOKEN = "open_banking_session_token";
    @javax.annotation.Nonnull
            private String openBankingSessionToken;

        public static final String JSON_PROPERTY_CLIENT_ID = "client_id";
    @javax.annotation.Nonnull
            private String clientId;

        public static final String JSON_PROPERTY_CLIENT_NAME = "client_name";
    @javax.annotation.Nonnull
            private String clientName;

        public static final String JSON_PROPERTY_CLIENT_PROFILE_ID = "client_profile_id";
    @javax.annotation.Nonnull
            private String clientProfileId;

        public static final String JSON_PROPERTY_TRANSACTION_CURRENCY_CODE = "transaction_currency_code";
    @javax.annotation.Nonnull
            private Currency transactionCurrencyCode;

        public static final String JSON_PROPERTY_TRANSACTION_AMOUNT = "transaction_amount";
    @javax.annotation.Nonnull
            private String transactionAmount;

        public static final String JSON_PROPERTY_EMAIL_ADDRESS = "email_address";
    @javax.annotation.Nullable
            private JsonNullable<String> emailAddress = JsonNullable.<String>undefined();

public SessionToken() {
}

        public SessionToken delayedSessionToken(@javax.annotation.Nonnull Boolean delayedSessionToken) {
        
        this.delayedSessionToken = delayedSessionToken;
        return this;
        }

    /**
        * Identifier for the delayed session response
    * @return delayedSessionToken
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_DELAYED_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Boolean getDelayedSessionToken() {
        return delayedSessionToken;
    }


          @JsonProperty(JSON_PROPERTY_DELAYED_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelayedSessionToken(@javax.annotation.Nonnull Boolean delayedSessionToken) {
            this.delayedSessionToken = delayedSessionToken;
        }

        public SessionToken connector(@javax.annotation.Nonnull String connector) {
        
        this.connector = connector;
        return this;
        }

    /**
        * The session token is w.r.t this connector
    * @return connector
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getConnector() {
        return connector;
    }


          @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnector(@javax.annotation.Nonnull String connector) {
            this.connector = connector;
        }

        public SessionToken sdkNextAction(@javax.annotation.Nonnull SdkNextAction sdkNextAction) {
        
        this.sdkNextAction = sdkNextAction;
        return this;
        }

    /**
        * Get sdkNextAction
    * @return sdkNextAction
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SDK_NEXT_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SdkNextAction getSdkNextAction() {
        return sdkNextAction;
    }


          @JsonProperty(JSON_PROPERTY_SDK_NEXT_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSdkNextAction(@javax.annotation.Nonnull SdkNextAction sdkNextAction) {
            this.sdkNextAction = sdkNextAction;
        }

        public SessionToken merchantInfo(@javax.annotation.Nonnull GpayMerchantInfo merchantInfo) {
        
        this.merchantInfo = merchantInfo;
        return this;
        }

    /**
        * Get merchantInfo
    * @return merchantInfo
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_MERCHANT_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public GpayMerchantInfo getMerchantInfo() {
        return merchantInfo;
    }


          @JsonProperty(JSON_PROPERTY_MERCHANT_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantInfo(@javax.annotation.Nonnull GpayMerchantInfo merchantInfo) {
            this.merchantInfo = merchantInfo;
        }

        public SessionToken shippingAddressRequired(@javax.annotation.Nonnull Boolean shippingAddressRequired) {
        
        this.shippingAddressRequired = shippingAddressRequired;
        return this;
        }

    /**
        * Is shipping address required
    * @return shippingAddressRequired
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Boolean getShippingAddressRequired() {
        return shippingAddressRequired;
    }


          @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShippingAddressRequired(@javax.annotation.Nonnull Boolean shippingAddressRequired) {
            this.shippingAddressRequired = shippingAddressRequired;
        }

        public SessionToken emailRequired(@javax.annotation.Nonnull Boolean emailRequired) {
        
        this.emailRequired = emailRequired;
        return this;
        }

    /**
        * Is email required
    * @return emailRequired
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_EMAIL_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Boolean getEmailRequired() {
        return emailRequired;
    }


          @JsonProperty(JSON_PROPERTY_EMAIL_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmailRequired(@javax.annotation.Nonnull Boolean emailRequired) {
            this.emailRequired = emailRequired;
        }

        public SessionToken shippingAddressParameters(@javax.annotation.Nonnull GpayShippingAddressParameters shippingAddressParameters) {
        
        this.shippingAddressParameters = shippingAddressParameters;
        return this;
        }

    /**
        * Get shippingAddressParameters
    * @return shippingAddressParameters
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public GpayShippingAddressParameters getShippingAddressParameters() {
        return shippingAddressParameters;
    }


          @JsonProperty(JSON_PROPERTY_SHIPPING_ADDRESS_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShippingAddressParameters(@javax.annotation.Nonnull GpayShippingAddressParameters shippingAddressParameters) {
            this.shippingAddressParameters = shippingAddressParameters;
        }

        public SessionToken allowedPaymentMethods(@javax.annotation.Nonnull List<GpayAllowedPaymentMethods> allowedPaymentMethods) {
        
        this.allowedPaymentMethods = allowedPaymentMethods;
        return this;
        }

            public SessionToken addAllowedPaymentMethodsItem(GpayAllowedPaymentMethods allowedPaymentMethodsItem) {
                if (this.allowedPaymentMethods == null) {
                this.allowedPaymentMethods = new ArrayList<>();
                }
                this.allowedPaymentMethods.add(allowedPaymentMethodsItem);
                return this;
            }

    /**
        * List of the allowed payment meythods
    * @return allowedPaymentMethods
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_METHODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<GpayAllowedPaymentMethods> getAllowedPaymentMethods() {
        return allowedPaymentMethods;
    }


          @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_METHODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowedPaymentMethods(@javax.annotation.Nonnull List<GpayAllowedPaymentMethods> allowedPaymentMethods) {
            this.allowedPaymentMethods = allowedPaymentMethods;
        }

        public SessionToken transactionInfo(@javax.annotation.Nonnull GpayTransactionInfo transactionInfo) {
        
        this.transactionInfo = transactionInfo;
        return this;
        }

    /**
        * Get transactionInfo
    * @return transactionInfo
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_TRANSACTION_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public GpayTransactionInfo getTransactionInfo() {
        return transactionInfo;
    }


          @JsonProperty(JSON_PROPERTY_TRANSACTION_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionInfo(@javax.annotation.Nonnull GpayTransactionInfo transactionInfo) {
            this.transactionInfo = transactionInfo;
        }

        public SessionToken secrets(@javax.annotation.Nullable SecretInfoToInitiateSdk secrets) {
        this.secrets = JsonNullable.<SecretInfoToInitiateSdk>of(secrets);
        
        return this;
        }

    /**
        * Get secrets
    * @return secrets
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public SecretInfoToInitiateSdk getSecrets() {
                return secrets.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<SecretInfoToInitiateSdk> getSecrets_JsonNullable() {
        return secrets;
        }
    
        @JsonProperty(JSON_PROPERTY_SECRETS)
        public void setSecrets_JsonNullable(JsonNullable<SecretInfoToInitiateSdk> secrets) {
        this.secrets = secrets;
        }

          public void setSecrets(@javax.annotation.Nullable SecretInfoToInitiateSdk secrets) {
            this.secrets = JsonNullable.<SecretInfoToInitiateSdk>of(secrets);
        }

        public SessionToken walletName(@javax.annotation.Nonnull WalletNameEnum walletName) {
        
        this.walletName = walletName;
        return this;
        }

    /**
        * Get walletName
    * @return walletName
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_WALLET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public WalletNameEnum getWalletName() {
        return walletName;
    }


          @JsonProperty(JSON_PROPERTY_WALLET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWalletName(@javax.annotation.Nonnull WalletNameEnum walletName) {
            this.walletName = walletName;
        }

        public SessionToken version(@javax.annotation.Nonnull String version) {
        
        this.version = version;
        return this;
        }

    /**
        * Samsung Pay API version
    * @return version
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getVersion() {
        return version;
    }


          @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull String version) {
            this.version = version;
        }

        public SessionToken serviceId(@javax.annotation.Nonnull String serviceId) {
        
        this.serviceId = serviceId;
        return this;
        }

    /**
        * Samsung Pay service ID to which session call needs to be made
    * @return serviceId
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SERVICE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getServiceId() {
        return serviceId;
    }


          @JsonProperty(JSON_PROPERTY_SERVICE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServiceId(@javax.annotation.Nonnull String serviceId) {
            this.serviceId = serviceId;
        }

        public SessionToken orderNumber(@javax.annotation.Nonnull String orderNumber) {
        
        this.orderNumber = orderNumber;
        return this;
        }

    /**
        * Order number of the transaction
    * @return orderNumber
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_ORDER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getOrderNumber() {
        return orderNumber;
    }


          @JsonProperty(JSON_PROPERTY_ORDER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderNumber(@javax.annotation.Nonnull String orderNumber) {
            this.orderNumber = orderNumber;
        }

        public SessionToken merchant(@javax.annotation.Nonnull SamsungPayMerchantPaymentInformation merchant) {
        
        this.merchant = merchant;
        return this;
        }

    /**
        * Get merchant
    * @return merchant
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_MERCHANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SamsungPayMerchantPaymentInformation getMerchant() {
        return merchant;
    }


          @JsonProperty(JSON_PROPERTY_MERCHANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchant(@javax.annotation.Nonnull SamsungPayMerchantPaymentInformation merchant) {
            this.merchant = merchant;
        }

        public SessionToken amount(@javax.annotation.Nonnull SamsungPayAmountDetails amount) {
        
        this.amount = amount;
        return this;
        }

    /**
        * Get amount
    * @return amount
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SamsungPayAmountDetails getAmount() {
        return amount;
    }


          @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(@javax.annotation.Nonnull SamsungPayAmountDetails amount) {
            this.amount = amount;
        }

        public SessionToken protocol(@javax.annotation.Nonnull SamsungPayProtocolType protocol) {
        
        this.protocol = protocol;
        return this;
        }

    /**
        * Get protocol
    * @return protocol
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SamsungPayProtocolType getProtocol() {
        return protocol;
    }


          @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProtocol(@javax.annotation.Nonnull SamsungPayProtocolType protocol) {
            this.protocol = protocol;
        }

        public SessionToken allowedBrands(@javax.annotation.Nonnull List<String> allowedBrands) {
        
        this.allowedBrands = allowedBrands;
        return this;
        }

            public SessionToken addAllowedBrandsItem(String allowedBrandsItem) {
                if (this.allowedBrands == null) {
                this.allowedBrands = new ArrayList<>();
                }
                this.allowedBrands.add(allowedBrandsItem);
                return this;
            }

    /**
        * List of supported card brands
    * @return allowedBrands
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_ALLOWED_BRANDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public List<String> getAllowedBrands() {
        return allowedBrands;
    }


          @JsonProperty(JSON_PROPERTY_ALLOWED_BRANDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowedBrands(@javax.annotation.Nonnull List<String> allowedBrands) {
            this.allowedBrands = allowedBrands;
        }

        public SessionToken sessionToken(@javax.annotation.Nonnull String sessionToken) {
        
        this.sessionToken = sessionToken;
        return this;
        }

    /**
        * The session token for PayPal
    * @return sessionToken
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getSessionToken() {
        return sessionToken;
    }


          @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionToken(@javax.annotation.Nonnull String sessionToken) {
            this.sessionToken = sessionToken;
        }

        public SessionToken sessionId(@javax.annotation.Nonnull String sessionId) {
        
        this.sessionId = sessionId;
        return this;
        }

    /**
        * The identifier for the session
    * @return sessionId
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getSessionId() {
        return sessionId;
    }


          @JsonProperty(JSON_PROPERTY_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionId(@javax.annotation.Nonnull String sessionId) {
            this.sessionId = sessionId;
        }

        public SessionToken sessionTokenData(@javax.annotation.Nullable ApplePaySessionResponse sessionTokenData) {
        this.sessionTokenData = JsonNullable.<ApplePaySessionResponse>of(sessionTokenData);
        
        return this;
        }

    /**
        * Get sessionTokenData
    * @return sessionTokenData
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public ApplePaySessionResponse getSessionTokenData() {
                return sessionTokenData.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SESSION_TOKEN_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<ApplePaySessionResponse> getSessionTokenData_JsonNullable() {
        return sessionTokenData;
        }
    
        @JsonProperty(JSON_PROPERTY_SESSION_TOKEN_DATA)
        public void setSessionTokenData_JsonNullable(JsonNullable<ApplePaySessionResponse> sessionTokenData) {
        this.sessionTokenData = sessionTokenData;
        }

          public void setSessionTokenData(@javax.annotation.Nullable ApplePaySessionResponse sessionTokenData) {
            this.sessionTokenData = JsonNullable.<ApplePaySessionResponse>of(sessionTokenData);
        }

        public SessionToken paymentRequestData(@javax.annotation.Nullable ApplePayPaymentRequest paymentRequestData) {
        this.paymentRequestData = JsonNullable.<ApplePayPaymentRequest>of(paymentRequestData);
        
        return this;
        }

    /**
        * Get paymentRequestData
    * @return paymentRequestData
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public ApplePayPaymentRequest getPaymentRequestData() {
                return paymentRequestData.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_REQUEST_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<ApplePayPaymentRequest> getPaymentRequestData_JsonNullable() {
        return paymentRequestData;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_REQUEST_DATA)
        public void setPaymentRequestData_JsonNullable(JsonNullable<ApplePayPaymentRequest> paymentRequestData) {
        this.paymentRequestData = paymentRequestData;
        }

          public void setPaymentRequestData(@javax.annotation.Nullable ApplePayPaymentRequest paymentRequestData) {
            this.paymentRequestData = JsonNullable.<ApplePayPaymentRequest>of(paymentRequestData);
        }

        public SessionToken connectorReferenceId(@javax.annotation.Nullable String connectorReferenceId) {
        this.connectorReferenceId = JsonNullable.<String>of(connectorReferenceId);
        
        return this;
        }

    /**
        * The connector transaction id
    * @return connectorReferenceId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getConnectorReferenceId() {
                return connectorReferenceId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONNECTOR_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getConnectorReferenceId_JsonNullable() {
        return connectorReferenceId;
        }
    
        @JsonProperty(JSON_PROPERTY_CONNECTOR_REFERENCE_ID)
        public void setConnectorReferenceId_JsonNullable(JsonNullable<String> connectorReferenceId) {
        this.connectorReferenceId = connectorReferenceId;
        }

          public void setConnectorReferenceId(@javax.annotation.Nullable String connectorReferenceId) {
            this.connectorReferenceId = JsonNullable.<String>of(connectorReferenceId);
        }

        public SessionToken connectorSdkPublicKey(@javax.annotation.Nullable String connectorSdkPublicKey) {
        this.connectorSdkPublicKey = JsonNullable.<String>of(connectorSdkPublicKey);
        
        return this;
        }

    /**
        * The public key id is to invoke third party sdk
    * @return connectorSdkPublicKey
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getConnectorSdkPublicKey() {
                return connectorSdkPublicKey.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONNECTOR_SDK_PUBLIC_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getConnectorSdkPublicKey_JsonNullable() {
        return connectorSdkPublicKey;
        }
    
        @JsonProperty(JSON_PROPERTY_CONNECTOR_SDK_PUBLIC_KEY)
        public void setConnectorSdkPublicKey_JsonNullable(JsonNullable<String> connectorSdkPublicKey) {
        this.connectorSdkPublicKey = connectorSdkPublicKey;
        }

          public void setConnectorSdkPublicKey(@javax.annotation.Nullable String connectorSdkPublicKey) {
            this.connectorSdkPublicKey = JsonNullable.<String>of(connectorSdkPublicKey);
        }

        public SessionToken connectorMerchantId(@javax.annotation.Nullable String connectorMerchantId) {
        this.connectorMerchantId = JsonNullable.<String>of(connectorMerchantId);
        
        return this;
        }

    /**
        * The connector merchant id
    * @return connectorMerchantId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getConnectorMerchantId() {
                return connectorMerchantId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONNECTOR_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getConnectorMerchantId_JsonNullable() {
        return connectorMerchantId;
        }
    
        @JsonProperty(JSON_PROPERTY_CONNECTOR_MERCHANT_ID)
        public void setConnectorMerchantId_JsonNullable(JsonNullable<String> connectorMerchantId) {
        this.connectorMerchantId = connectorMerchantId;
        }

          public void setConnectorMerchantId(@javax.annotation.Nullable String connectorMerchantId) {
            this.connectorMerchantId = JsonNullable.<String>of(connectorMerchantId);
        }

        public SessionToken openBankingSessionToken(@javax.annotation.Nonnull String openBankingSessionToken) {
        
        this.openBankingSessionToken = openBankingSessionToken;
        return this;
        }

    /**
        * The session token for OpenBanking Connectors
    * @return openBankingSessionToken
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_OPEN_BANKING_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getOpenBankingSessionToken() {
        return openBankingSessionToken;
    }


          @JsonProperty(JSON_PROPERTY_OPEN_BANKING_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOpenBankingSessionToken(@javax.annotation.Nonnull String openBankingSessionToken) {
            this.openBankingSessionToken = openBankingSessionToken;
        }

        public SessionToken clientId(@javax.annotation.Nonnull String clientId) {
        
        this.clientId = clientId;
        return this;
        }

    /**
        * Paze Client ID
    * @return clientId
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getClientId() {
        return clientId;
    }


          @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientId(@javax.annotation.Nonnull String clientId) {
            this.clientId = clientId;
        }

        public SessionToken clientName(@javax.annotation.Nonnull String clientName) {
        
        this.clientName = clientName;
        return this;
        }

    /**
        * Client Name to be displayed on the Paze screen
    * @return clientName
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_CLIENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getClientName() {
        return clientName;
    }


          @JsonProperty(JSON_PROPERTY_CLIENT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientName(@javax.annotation.Nonnull String clientName) {
            this.clientName = clientName;
        }

        public SessionToken clientProfileId(@javax.annotation.Nonnull String clientProfileId) {
        
        this.clientProfileId = clientProfileId;
        return this;
        }

    /**
        * Paze Client Profile ID
    * @return clientProfileId
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_CLIENT_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getClientProfileId() {
        return clientProfileId;
    }


          @JsonProperty(JSON_PROPERTY_CLIENT_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientProfileId(@javax.annotation.Nonnull String clientProfileId) {
            this.clientProfileId = clientProfileId;
        }

        public SessionToken transactionCurrencyCode(@javax.annotation.Nonnull Currency transactionCurrencyCode) {
        
        this.transactionCurrencyCode = transactionCurrencyCode;
        return this;
        }

    /**
        * Get transactionCurrencyCode
    * @return transactionCurrencyCode
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_TRANSACTION_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Currency getTransactionCurrencyCode() {
        return transactionCurrencyCode;
    }


          @JsonProperty(JSON_PROPERTY_TRANSACTION_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionCurrencyCode(@javax.annotation.Nonnull Currency transactionCurrencyCode) {
            this.transactionCurrencyCode = transactionCurrencyCode;
        }

        public SessionToken transactionAmount(@javax.annotation.Nonnull String transactionAmount) {
        
        this.transactionAmount = transactionAmount;
        return this;
        }

    /**
        * The transaction amount
    * @return transactionAmount
    */
    @javax.annotation.Nonnull
      @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getTransactionAmount() {
        return transactionAmount;
    }


          @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionAmount(@javax.annotation.Nonnull String transactionAmount) {
            this.transactionAmount = transactionAmount;
        }

        public SessionToken emailAddress(@javax.annotation.Nullable String emailAddress) {
        this.emailAddress = JsonNullable.<String>of(emailAddress);
        
        return this;
        }

    /**
        * Email Address
    * @return emailAddress
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getEmailAddress() {
                return emailAddress.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_EMAIL_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getEmailAddress_JsonNullable() {
        return emailAddress;
        }
    
        @JsonProperty(JSON_PROPERTY_EMAIL_ADDRESS)
        public void setEmailAddress_JsonNullable(JsonNullable<String> emailAddress) {
        this.emailAddress = emailAddress;
        }

          public void setEmailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = JsonNullable.<String>of(emailAddress);
        }

@Override
public boolean equals(Object o) {
    if (this == o) {
    return true;
    }
    if (o == null || getClass() != o.getClass()) {
    return false;
    }
        SessionToken sessionToken = (SessionToken) o;
        return Objects.equals(this.delayedSessionToken, sessionToken.delayedSessionToken) &&
        Objects.equals(this.connector, sessionToken.connector) &&
        Objects.equals(this.sdkNextAction, sessionToken.sdkNextAction) &&
        Objects.equals(this.merchantInfo, sessionToken.merchantInfo) &&
        Objects.equals(this.shippingAddressRequired, sessionToken.shippingAddressRequired) &&
        Objects.equals(this.emailRequired, sessionToken.emailRequired) &&
        Objects.equals(this.shippingAddressParameters, sessionToken.shippingAddressParameters) &&
        Objects.equals(this.allowedPaymentMethods, sessionToken.allowedPaymentMethods) &&
        Objects.equals(this.transactionInfo, sessionToken.transactionInfo) &&
        equalsNullable(this.secrets, sessionToken.secrets) &&
        Objects.equals(this.walletName, sessionToken.walletName) &&
        Objects.equals(this.version, sessionToken.version) &&
        Objects.equals(this.serviceId, sessionToken.serviceId) &&
        Objects.equals(this.orderNumber, sessionToken.orderNumber) &&
        Objects.equals(this.merchant, sessionToken.merchant) &&
        Objects.equals(this.amount, sessionToken.amount) &&
        Objects.equals(this.protocol, sessionToken.protocol) &&
        Objects.equals(this.allowedBrands, sessionToken.allowedBrands) &&
        Objects.equals(this.sessionToken, sessionToken.sessionToken) &&
        Objects.equals(this.sessionId, sessionToken.sessionId) &&
        equalsNullable(this.sessionTokenData, sessionToken.sessionTokenData) &&
        equalsNullable(this.paymentRequestData, sessionToken.paymentRequestData) &&
        equalsNullable(this.connectorReferenceId, sessionToken.connectorReferenceId) &&
        equalsNullable(this.connectorSdkPublicKey, sessionToken.connectorSdkPublicKey) &&
        equalsNullable(this.connectorMerchantId, sessionToken.connectorMerchantId) &&
        Objects.equals(this.openBankingSessionToken, sessionToken.openBankingSessionToken) &&
        Objects.equals(this.clientId, sessionToken.clientId) &&
        Objects.equals(this.clientName, sessionToken.clientName) &&
        Objects.equals(this.clientProfileId, sessionToken.clientProfileId) &&
        Objects.equals(this.transactionCurrencyCode, sessionToken.transactionCurrencyCode) &&
        Objects.equals(this.transactionAmount, sessionToken.transactionAmount) &&
        equalsNullable(this.emailAddress, sessionToken.emailAddress);
}

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
        }

    @Override
    public int hashCode() {
        return Objects.hash(delayedSessionToken, connector, sdkNextAction, merchantInfo, shippingAddressRequired, emailRequired, shippingAddressParameters, allowedPaymentMethods, transactionInfo, hashCodeNullable(secrets), walletName, version, serviceId, orderNumber, merchant, amount, protocol, allowedBrands, sessionToken, sessionId, hashCodeNullable(sessionTokenData), hashCodeNullable(paymentRequestData), hashCodeNullable(connectorReferenceId), hashCodeNullable(connectorSdkPublicKey), hashCodeNullable(connectorMerchantId), openBankingSessionToken, clientId, clientName, clientProfileId, transactionCurrencyCode, transactionAmount, hashCodeNullable(emailAddress));
    }

        private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
        return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
        }

    @Override
    public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionToken {\n");
        sb.append("    delayedSessionToken: ").append(toIndentedString(delayedSessionToken)).append("\n");
        sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
        sb.append("    sdkNextAction: ").append(toIndentedString(sdkNextAction)).append("\n");
        sb.append("    merchantInfo: ").append(toIndentedString(merchantInfo)).append("\n");
        sb.append("    shippingAddressRequired: ").append(toIndentedString(shippingAddressRequired)).append("\n");
        sb.append("    emailRequired: ").append(toIndentedString(emailRequired)).append("\n");
        sb.append("    shippingAddressParameters: ").append(toIndentedString(shippingAddressParameters)).append("\n");
        sb.append("    allowedPaymentMethods: ").append(toIndentedString(allowedPaymentMethods)).append("\n");
        sb.append("    transactionInfo: ").append(toIndentedString(transactionInfo)).append("\n");
        sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
        sb.append("    walletName: ").append(toIndentedString(walletName)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
        sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
        sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
        sb.append("    allowedBrands: ").append(toIndentedString(allowedBrands)).append("\n");
        sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
        sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
        sb.append("    sessionTokenData: ").append(toIndentedString(sessionTokenData)).append("\n");
        sb.append("    paymentRequestData: ").append(toIndentedString(paymentRequestData)).append("\n");
        sb.append("    connectorReferenceId: ").append(toIndentedString(connectorReferenceId)).append("\n");
        sb.append("    connectorSdkPublicKey: ").append(toIndentedString(connectorSdkPublicKey)).append("\n");
        sb.append("    connectorMerchantId: ").append(toIndentedString(connectorMerchantId)).append("\n");
        sb.append("    openBankingSessionToken: ").append(toIndentedString(openBankingSessionToken)).append("\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
        sb.append("    clientProfileId: ").append(toIndentedString(clientProfileId)).append("\n");
        sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
        sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
        sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
    if (o == null) {
    return "null";
    }
    return o.toString().replace("\n", "\n    ");
    }

        /**
        * Convert the instance into URL query string.
        *
        * @return URL query string
        */
        public String toUrlQueryString() {
        return toUrlQueryString(null);
        }

        /**
        * Convert the instance into URL query string.
        *
        * @param prefix prefix of the query string
        * @return URL query string
        */
        public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
        // style=form, explode=true, e.g. /pet?name=cat&type=manx
        prefix = "";
        } else {
        // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
        prefix = prefix + "[";
        suffix = "]";
        containerSuffix = "]";
        containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

            // add `delayed_session_token` to the URL query string
                        if (getDelayedSessionToken() != null) {
                        try {
                        joiner.add(String.format("%sdelayed_session_token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDelayedSessionToken()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `connector` to the URL query string
                        if (getConnector() != null) {
                        try {
                        joiner.add(String.format("%sconnector%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnector()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `sdk_next_action` to the URL query string
                            if (getSdkNextAction() != null) {
                            joiner.add(getSdkNextAction().toUrlQueryString(prefix + "sdk_next_action" + suffix));
                            }

            // add `merchant_info` to the URL query string
                            if (getMerchantInfo() != null) {
                            joiner.add(getMerchantInfo().toUrlQueryString(prefix + "merchant_info" + suffix));
                            }

            // add `shipping_address_required` to the URL query string
                        if (getShippingAddressRequired() != null) {
                        try {
                        joiner.add(String.format("%sshipping_address_required%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShippingAddressRequired()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `email_required` to the URL query string
                        if (getEmailRequired() != null) {
                        try {
                        joiner.add(String.format("%semail_required%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmailRequired()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `shipping_address_parameters` to the URL query string
                            if (getShippingAddressParameters() != null) {
                            joiner.add(getShippingAddressParameters().toUrlQueryString(prefix + "shipping_address_parameters" + suffix));
                            }

            // add `allowed_payment_methods` to the URL query string
                            if (getAllowedPaymentMethods() != null) {
                            for (int i = 0; i < getAllowedPaymentMethods().size(); i++) {
                            if (getAllowedPaymentMethods().get(i) != null) {
                            joiner.add(getAllowedPaymentMethods().get(i).toUrlQueryString(String.format("%sallowed_payment_methods%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                            }
                            }
                            }

            // add `transaction_info` to the URL query string
                            if (getTransactionInfo() != null) {
                            joiner.add(getTransactionInfo().toUrlQueryString(prefix + "transaction_info" + suffix));
                            }

            // add `secrets` to the URL query string
                            if (getSecrets() != null) {
                            joiner.add(getSecrets().toUrlQueryString(prefix + "secrets" + suffix));
                            }

            // add `wallet_name` to the URL query string
                        if (getWalletName() != null) {
                        try {
                        joiner.add(String.format("%swallet_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWalletName()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `version` to the URL query string
                        if (getVersion() != null) {
                        try {
                        joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `service_id` to the URL query string
                        if (getServiceId() != null) {
                        try {
                        joiner.add(String.format("%sservice_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getServiceId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `order_number` to the URL query string
                        if (getOrderNumber() != null) {
                        try {
                        joiner.add(String.format("%sorder_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderNumber()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `merchant` to the URL query string
                            if (getMerchant() != null) {
                            joiner.add(getMerchant().toUrlQueryString(prefix + "merchant" + suffix));
                            }

            // add `amount` to the URL query string
                            if (getAmount() != null) {
                            joiner.add(getAmount().toUrlQueryString(prefix + "amount" + suffix));
                            }

            // add `protocol` to the URL query string
                            if (getProtocol() != null) {
                            try {
                            joiner.add(String.format("%sprotocol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProtocol()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `allowed_brands` to the URL query string
                        if (getAllowedBrands() != null) {
                        for (int i = 0; i < getAllowedBrands().size(); i++) {
                        try {
                        joiner.add(String.format("%sallowed_brands%s%s=%s", prefix, suffix,
                        "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                        URLEncoder.encode(String.valueOf(getAllowedBrands().get(i)), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }
                        }

            // add `session_token` to the URL query string
                        if (getSessionToken() != null) {
                        try {
                        joiner.add(String.format("%ssession_token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionToken()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `session_id` to the URL query string
                        if (getSessionId() != null) {
                        try {
                        joiner.add(String.format("%ssession_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `session_token_data` to the URL query string
                            if (getSessionTokenData() != null) {
                            joiner.add(getSessionTokenData().toUrlQueryString(prefix + "session_token_data" + suffix));
                            }

            // add `payment_request_data` to the URL query string
                            if (getPaymentRequestData() != null) {
                            joiner.add(getPaymentRequestData().toUrlQueryString(prefix + "payment_request_data" + suffix));
                            }

            // add `connector_reference_id` to the URL query string
                        if (getConnectorReferenceId() != null) {
                        try {
                        joiner.add(String.format("%sconnector_reference_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnectorReferenceId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `connector_sdk_public_key` to the URL query string
                        if (getConnectorSdkPublicKey() != null) {
                        try {
                        joiner.add(String.format("%sconnector_sdk_public_key%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnectorSdkPublicKey()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `connector_merchant_id` to the URL query string
                        if (getConnectorMerchantId() != null) {
                        try {
                        joiner.add(String.format("%sconnector_merchant_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnectorMerchantId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `open_banking_session_token` to the URL query string
                        if (getOpenBankingSessionToken() != null) {
                        try {
                        joiner.add(String.format("%sopen_banking_session_token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOpenBankingSessionToken()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `client_id` to the URL query string
                        if (getClientId() != null) {
                        try {
                        joiner.add(String.format("%sclient_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `client_name` to the URL query string
                        if (getClientName() != null) {
                        try {
                        joiner.add(String.format("%sclient_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientName()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `client_profile_id` to the URL query string
                        if (getClientProfileId() != null) {
                        try {
                        joiner.add(String.format("%sclient_profile_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientProfileId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `transaction_currency_code` to the URL query string
                            if (getTransactionCurrencyCode() != null) {
                            try {
                            joiner.add(String.format("%stransaction_currency_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransactionCurrencyCode()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `transaction_amount` to the URL query string
                        if (getTransactionAmount() != null) {
                        try {
                        joiner.add(String.format("%stransaction_amount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransactionAmount()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `email_address` to the URL query string
                        if (getEmailAddress() != null) {
                        try {
                        joiner.add(String.format("%semail_address%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmailAddress()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

        return joiner.toString();
        }

    }

