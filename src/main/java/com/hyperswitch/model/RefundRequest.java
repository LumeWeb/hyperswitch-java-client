/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.ChargeRefunds;
import com.hyperswitch.model.MerchantConnectorDetailsWrap;
import com.hyperswitch.model.RefundType;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.hyperswitch.client.ApiClient;
/**
 * RefundRequest
 */
@JsonPropertyOrder({
  RefundRequest.JSON_PROPERTY_PAYMENT_ID,
  RefundRequest.JSON_PROPERTY_REFUND_ID,
  RefundRequest.JSON_PROPERTY_MERCHANT_ID,
  RefundRequest.JSON_PROPERTY_AMOUNT,
  RefundRequest.JSON_PROPERTY_REASON,
  RefundRequest.JSON_PROPERTY_REFUND_TYPE,
  RefundRequest.JSON_PROPERTY_METADATA,
  RefundRequest.JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS,
  RefundRequest.JSON_PROPERTY_CHARGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class RefundRequest {
  public static final String JSON_PROPERTY_PAYMENT_ID = "payment_id";
  @javax.annotation.Nonnull
  private String paymentId;

  public static final String JSON_PROPERTY_REFUND_ID = "refund_id";
  private JsonNullable<String> refundId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchant_id";
  private JsonNullable<String> merchantId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private JsonNullable<Long> amount = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_REASON = "reason";
  private JsonNullable<String> reason = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REFUND_TYPE = "refund_type";
  private JsonNullable<RefundType> refundType = JsonNullable.<RefundType>of(Instant);

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private JsonNullable<Object> metadata = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS = "merchant_connector_details";
  private JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>undefined();

  public static final String JSON_PROPERTY_CHARGES = "charges";
  private JsonNullable<ChargeRefunds> charges = JsonNullable.<ChargeRefunds>undefined();

  public RefundRequest() { 
  }

  public RefundRequest paymentId(@javax.annotation.Nonnull String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * The payment id against which refund is to be initiated
   * @return paymentId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentId(@javax.annotation.Nonnull String paymentId) {
    this.paymentId = paymentId;
  }


  public RefundRequest refundId(@javax.annotation.Nullable String refundId) {
    this.refundId = JsonNullable.<String>of(refundId);
    return this;
  }

  /**
   * Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refunds initiated against the same payment. If this is not passed by the merchant, this field shall be auto generated and provided in the API response. It is recommended to generate uuid(v4) as the refund_id.
   * @return refundId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRefundId() {
        return refundId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFUND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRefundId_JsonNullable() {
    return refundId;
  }
  
  @JsonProperty(JSON_PROPERTY_REFUND_ID)
  public void setRefundId_JsonNullable(JsonNullable<String> refundId) {
    this.refundId = refundId;
  }

  public void setRefundId(@javax.annotation.Nullable String refundId) {
    this.refundId = JsonNullable.<String>of(refundId);
  }


  public RefundRequest merchantId(@javax.annotation.Nullable String merchantId) {
    this.merchantId = JsonNullable.<String>of(merchantId);
    return this;
  }

  /**
   * The identifier for the Merchant Account
   * @return merchantId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getMerchantId() {
        return merchantId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMerchantId_JsonNullable() {
    return merchantId;
  }
  
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  public void setMerchantId_JsonNullable(JsonNullable<String> merchantId) {
    this.merchantId = merchantId;
  }

  public void setMerchantId(@javax.annotation.Nullable String merchantId) {
    this.merchantId = JsonNullable.<String>of(merchantId);
  }


  public RefundRequest amount(@javax.annotation.Nullable Long amount) {
    this.amount = JsonNullable.<Long>of(amount);
    return this;
  }

  /**
   * Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount
   * minimum: 100
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getAmount() {
        return amount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAmount_JsonNullable() {
    return amount;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  public void setAmount_JsonNullable(JsonNullable<Long> amount) {
    this.amount = amount;
  }

  public void setAmount(@javax.annotation.Nullable Long amount) {
    this.amount = JsonNullable.<Long>of(amount);
  }


  public RefundRequest reason(@javax.annotation.Nullable String reason) {
    this.reason = JsonNullable.<String>of(reason);
    return this;
  }

  /**
   * Reason for the refund. Often useful for displaying to users and your customer support executive. In case the payment went through Stripe, this field needs to be passed with one of these enums: &#x60;duplicate&#x60;, &#x60;fraudulent&#x60;, or &#x60;requested_by_customer&#x60;
   * @return reason
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getReason() {
        return reason.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getReason_JsonNullable() {
    return reason;
  }
  
  @JsonProperty(JSON_PROPERTY_REASON)
  public void setReason_JsonNullable(JsonNullable<String> reason) {
    this.reason = reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = JsonNullable.<String>of(reason);
  }


  public RefundRequest refundType(@javax.annotation.Nullable RefundType refundType) {
    this.refundType = JsonNullable.<RefundType>of(refundType);
    return this;
  }

  /**
   * Get refundType
   * @return refundType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public RefundType getRefundType() {
        return refundType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<RefundType> getRefundType_JsonNullable() {
    return refundType;
  }
  
  @JsonProperty(JSON_PROPERTY_REFUND_TYPE)
  public void setRefundType_JsonNullable(JsonNullable<RefundType> refundType) {
    this.refundType = refundType;
  }

  public void setRefundType(@javax.annotation.Nullable RefundType refundType) {
    this.refundType = JsonNullable.<RefundType>of(refundType);
  }


  public RefundRequest metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
    return this;
  }

  /**
   * You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getMetadata() {
        return metadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMetadata_JsonNullable() {
    return metadata;
  }
  
  @JsonProperty(JSON_PROPERTY_METADATA)
  public void setMetadata_JsonNullable(JsonNullable<Object> metadata) {
    this.metadata = metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = JsonNullable.<Object>of(metadata);
  }


  public RefundRequest merchantConnectorDetails(@javax.annotation.Nullable MerchantConnectorDetailsWrap merchantConnectorDetails) {
    this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
    return this;
  }

  /**
   * Get merchantConnectorDetails
   * @return merchantConnectorDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public MerchantConnectorDetailsWrap getMerchantConnectorDetails() {
        return merchantConnectorDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MerchantConnectorDetailsWrap> getMerchantConnectorDetails_JsonNullable() {
    return merchantConnectorDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
  public void setMerchantConnectorDetails_JsonNullable(JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails) {
    this.merchantConnectorDetails = merchantConnectorDetails;
  }

  public void setMerchantConnectorDetails(@javax.annotation.Nullable MerchantConnectorDetailsWrap merchantConnectorDetails) {
    this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
  }


  public RefundRequest charges(@javax.annotation.Nullable ChargeRefunds charges) {
    this.charges = JsonNullable.<ChargeRefunds>of(charges);
    return this;
  }

  /**
   * Get charges
   * @return charges
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public ChargeRefunds getCharges() {
        return charges.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<ChargeRefunds> getCharges_JsonNullable() {
    return charges;
  }
  
  @JsonProperty(JSON_PROPERTY_CHARGES)
  public void setCharges_JsonNullable(JsonNullable<ChargeRefunds> charges) {
    this.charges = charges;
  }

  public void setCharges(@javax.annotation.Nullable ChargeRefunds charges) {
    this.charges = JsonNullable.<ChargeRefunds>of(charges);
  }


  /**
   * Return true if this RefundRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundRequest refundRequest = (RefundRequest) o;
    return Objects.equals(this.paymentId, refundRequest.paymentId) &&
        equalsNullable(this.refundId, refundRequest.refundId) &&
        equalsNullable(this.merchantId, refundRequest.merchantId) &&
        equalsNullable(this.amount, refundRequest.amount) &&
        equalsNullable(this.reason, refundRequest.reason) &&
        equalsNullable(this.refundType, refundRequest.refundType) &&
        equalsNullable(this.metadata, refundRequest.metadata) &&
        equalsNullable(this.merchantConnectorDetails, refundRequest.merchantConnectorDetails) &&
        equalsNullable(this.charges, refundRequest.charges);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, hashCodeNullable(refundId), hashCodeNullable(merchantId), hashCodeNullable(amount), hashCodeNullable(reason), hashCodeNullable(refundType), hashCodeNullable(metadata), hashCodeNullable(merchantConnectorDetails), hashCodeNullable(charges));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundRequest {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    refundType: ").append(toIndentedString(refundType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    merchantConnectorDetails: ").append(toIndentedString(merchantConnectorDetails)).append("\n");
    sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `payment_id` to the URL query string
    if (getPaymentId() != null) {
      joiner.add(String.format("%spayment_id%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPaymentId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `refund_id` to the URL query string
    if (getRefundId() != null) {
      joiner.add(String.format("%srefund_id%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRefundId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `merchant_id` to the URL query string
    if (getMerchantId() != null) {
      joiner.add(String.format("%smerchant_id%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMerchantId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `reason` to the URL query string
    if (getReason() != null) {
      joiner.add(String.format("%sreason%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReason()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `refund_type` to the URL query string
    if (getRefundType() != null) {
      joiner.add(String.format("%srefund_type%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRefundType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `merchant_connector_details` to the URL query string
    if (getMerchantConnectorDetails() != null) {
      joiner.add(getMerchantConnectorDetails().toUrlQueryString(prefix + "merchant_connector_details" + suffix));
    }

    // add `charges` to the URL query string
    if (getCharges() != null) {
      joiner.add(getCharges().toUrlQueryString(prefix + "charges" + suffix));
    }

    return joiner.toString();
  }
}

