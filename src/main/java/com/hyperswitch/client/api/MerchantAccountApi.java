/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.MerchantAccountCreate;
import com.hyperswitch.client.model.MerchantAccountDeleteResponse;
import com.hyperswitch.client.model.MerchantAccountResponse;
import com.hyperswitch.client.model.MerchantAccountUpdate;
import com.hyperswitch.client.model.ToggleKVRequest;
import com.hyperswitch.client.model.ToggleKVResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class MerchantAccountApi extends BaseApi {

  public MerchantAccountApi() {
    super(Configuration.getDefaultApiClient());
  }

  public MerchantAccountApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Merchant Account - Create
   * Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.
   * @param merchantAccountCreate  (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse createAMerchantAccount(MerchantAccountCreate merchantAccountCreate) throws ApiException {
    return this.createAMerchantAccount(merchantAccountCreate, Collections.emptyMap());
  }


  /**
   * Merchant Account - Create
   * Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.
   * @param merchantAccountCreate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse createAMerchantAccount(MerchantAccountCreate merchantAccountCreate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = merchantAccountCreate;
    
    // verify the required parameter 'merchantAccountCreate' is set
    if (merchantAccountCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantAccountCreate' when calling createAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantAccountResponse> localVarReturnType = new TypeReference<MerchantAccountResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Account - Delete
   * Delete a *merchant* account
   * @param accountId The unique identifier for the merchant account (required)
   * @return MerchantAccountDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountDeleteResponse deleteAMerchantAccount(String accountId) throws ApiException {
    return this.deleteAMerchantAccount(accountId, Collections.emptyMap());
  }


  /**
   * Merchant Account - Delete
   * Delete a *merchant* account
   * @param accountId The unique identifier for the merchant account (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantAccountDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountDeleteResponse deleteAMerchantAccount(String accountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling deleteAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(accountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantAccountDeleteResponse> localVarReturnType = new TypeReference<MerchantAccountDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Account - KV Status
   * Toggle KV mode for the Merchant Account
   * @param accountId The unique identifier for the merchant account (required)
   * @param toggleKVRequest  (required)
   * @return ToggleKVResponse
   * @throws ApiException if fails to make API call
   */
  public ToggleKVResponse enableDisableKVForAMerchantAccount(String accountId, ToggleKVRequest toggleKVRequest) throws ApiException {
    return this.enableDisableKVForAMerchantAccount(accountId, toggleKVRequest, Collections.emptyMap());
  }


  /**
   * Merchant Account - KV Status
   * Toggle KV mode for the Merchant Account
   * @param accountId The unique identifier for the merchant account (required)
   * @param toggleKVRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ToggleKVResponse
   * @throws ApiException if fails to make API call
   */
  public ToggleKVResponse enableDisableKVForAMerchantAccount(String accountId, ToggleKVRequest toggleKVRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = toggleKVRequest;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling enableDisableKVForAMerchantAccount");
    }
    
    // verify the required parameter 'toggleKVRequest' is set
    if (toggleKVRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'toggleKVRequest' when calling enableDisableKVForAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/kv"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(accountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<ToggleKVResponse> localVarReturnType = new TypeReference<ToggleKVResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Account - Retrieve
   * Retrieve a *merchant* account details.
   * @param accountId The unique identifier for the merchant account (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse retrieveAMerchantAccount(String accountId) throws ApiException {
    return this.retrieveAMerchantAccount(accountId, Collections.emptyMap());
  }


  /**
   * Merchant Account - Retrieve
   * Retrieve a *merchant* account details.
   * @param accountId The unique identifier for the merchant account (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse retrieveAMerchantAccount(String accountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling retrieveAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(accountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantAccountResponse> localVarReturnType = new TypeReference<MerchantAccountResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Account - Update
   * Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc
   * @param accountId The unique identifier for the merchant account (required)
   * @param merchantAccountUpdate  (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse updateAMerchantAccount(String accountId, MerchantAccountUpdate merchantAccountUpdate) throws ApiException {
    return this.updateAMerchantAccount(accountId, merchantAccountUpdate, Collections.emptyMap());
  }


  /**
   * Merchant Account - Update
   * Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc
   * @param accountId The unique identifier for the merchant account (required)
   * @param merchantAccountUpdate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse updateAMerchantAccount(String accountId, MerchantAccountUpdate merchantAccountUpdate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = merchantAccountUpdate;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling updateAMerchantAccount");
    }
    
    // verify the required parameter 'merchantAccountUpdate' is set
    if (merchantAccountUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantAccountUpdate' when calling updateAMerchantAccount");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(accountId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantAccountResponse> localVarReturnType = new TypeReference<MerchantAccountResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
