/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.lumeweb.hyperswitch.client.ApiClient;
/**
 * NoThirdPartySdkSessionResponse
 */
@JsonPropertyOrder({
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_EPOCH_TIMESTAMP,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_EXPIRES_AT,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_NONCE,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_MERCHANT_IDENTIFIER,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_DOMAIN_NAME,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_DISPLAY_NAME,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_SIGNATURE,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_RETRIES,
  NoThirdPartySdkSessionResponse.JSON_PROPERTY_PSP_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class NoThirdPartySdkSessionResponse {
  public static final String JSON_PROPERTY_EPOCH_TIMESTAMP = "epoch_timestamp";
  @javax.annotation.Nonnull
  private Long epochTimestamp;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expires_at";
  @javax.annotation.Nonnull
  private Long expiresAt;

  public static final String JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER = "merchant_session_identifier";
  @javax.annotation.Nonnull
  private String merchantSessionIdentifier;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  @javax.annotation.Nonnull
  private String nonce;

  public static final String JSON_PROPERTY_MERCHANT_IDENTIFIER = "merchant_identifier";
  @javax.annotation.Nonnull
  private String merchantIdentifier;

  public static final String JSON_PROPERTY_DOMAIN_NAME = "domain_name";
  @javax.annotation.Nonnull
  private String domainName;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  @javax.annotation.Nonnull
  private String displayName;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  @javax.annotation.Nonnull
  private String signature;

  public static final String JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER = "operational_analytics_identifier";
  @javax.annotation.Nonnull
  private String operationalAnalyticsIdentifier;

  public static final String JSON_PROPERTY_RETRIES = "retries";
  @javax.annotation.Nonnull
  private Integer retries;

  public static final String JSON_PROPERTY_PSP_ID = "psp_id";
  @javax.annotation.Nonnull
  private String pspId;

  public NoThirdPartySdkSessionResponse() { 
  }

  public NoThirdPartySdkSessionResponse epochTimestamp(@javax.annotation.Nonnull Long epochTimestamp) {
    this.epochTimestamp = epochTimestamp;
    return this;
  }

  /**
   * Timestamp at which session is requested
   * minimum: 0
   * @return epochTimestamp
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EPOCH_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getEpochTimestamp() {
    return epochTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_EPOCH_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEpochTimestamp(@javax.annotation.Nonnull Long epochTimestamp) {
    this.epochTimestamp = epochTimestamp;
  }


  public NoThirdPartySdkSessionResponse expiresAt(@javax.annotation.Nonnull Long expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Timestamp at which session expires
   * minimum: 0
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@javax.annotation.Nonnull Long expiresAt) {
    this.expiresAt = expiresAt;
  }


  public NoThirdPartySdkSessionResponse merchantSessionIdentifier(@javax.annotation.Nonnull String merchantSessionIdentifier) {
    this.merchantSessionIdentifier = merchantSessionIdentifier;
    return this;
  }

  /**
   * The identifier for the merchant session
   * @return merchantSessionIdentifier
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getMerchantSessionIdentifier() {
    return merchantSessionIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantSessionIdentifier(@javax.annotation.Nonnull String merchantSessionIdentifier) {
    this.merchantSessionIdentifier = merchantSessionIdentifier;
  }


  public NoThirdPartySdkSessionResponse nonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Apple pay generated unique ID (UUID) value
   * @return nonce
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
  }


  public NoThirdPartySdkSessionResponse merchantIdentifier(@javax.annotation.Nonnull String merchantIdentifier) {
    this.merchantIdentifier = merchantIdentifier;
    return this;
  }

  /**
   * The identifier for the merchant
   * @return merchantIdentifier
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getMerchantIdentifier() {
    return merchantIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantIdentifier(@javax.annotation.Nonnull String merchantIdentifier) {
    this.merchantIdentifier = merchantIdentifier;
  }


  public NoThirdPartySdkSessionResponse domainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The domain name of the merchant which is registered in Apple Pay
   * @return domainName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDomainName() {
    return domainName;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomainName(@javax.annotation.Nonnull String domainName) {
    this.domainName = domainName;
  }


  public NoThirdPartySdkSessionResponse displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name to be displayed on Apple Pay button
   * @return displayName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public NoThirdPartySdkSessionResponse signature(@javax.annotation.Nonnull String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * A string which represents the properties of a payment
   * @return signature
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getSignature() {
    return signature;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignature(@javax.annotation.Nonnull String signature) {
    this.signature = signature;
  }


  public NoThirdPartySdkSessionResponse operationalAnalyticsIdentifier(@javax.annotation.Nonnull String operationalAnalyticsIdentifier) {
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
    return this;
  }

  /**
   * The identifier for the operational analytics
   * @return operationalAnalyticsIdentifier
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getOperationalAnalyticsIdentifier() {
    return operationalAnalyticsIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperationalAnalyticsIdentifier(@javax.annotation.Nonnull String operationalAnalyticsIdentifier) {
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
  }


  public NoThirdPartySdkSessionResponse retries(@javax.annotation.Nonnull Integer retries) {
    this.retries = retries;
    return this;
  }

  /**
   * The number of retries to get the session response
   * minimum: 0
   * @return retries
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getRetries() {
    return retries;
  }


  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRetries(@javax.annotation.Nonnull Integer retries) {
    this.retries = retries;
  }


  public NoThirdPartySdkSessionResponse pspId(@javax.annotation.Nonnull String pspId) {
    this.pspId = pspId;
    return this;
  }

  /**
   * The identifier for the connector transaction
   * @return pspId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PSP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPspId() {
    return pspId;
  }


  @JsonProperty(JSON_PROPERTY_PSP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPspId(@javax.annotation.Nonnull String pspId) {
    this.pspId = pspId;
  }


  /**
   * Return true if this NoThirdPartySdkSessionResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoThirdPartySdkSessionResponse noThirdPartySdkSessionResponse = (NoThirdPartySdkSessionResponse) o;
    return Objects.equals(this.epochTimestamp, noThirdPartySdkSessionResponse.epochTimestamp) &&
        Objects.equals(this.expiresAt, noThirdPartySdkSessionResponse.expiresAt) &&
        Objects.equals(this.merchantSessionIdentifier, noThirdPartySdkSessionResponse.merchantSessionIdentifier) &&
        Objects.equals(this.nonce, noThirdPartySdkSessionResponse.nonce) &&
        Objects.equals(this.merchantIdentifier, noThirdPartySdkSessionResponse.merchantIdentifier) &&
        Objects.equals(this.domainName, noThirdPartySdkSessionResponse.domainName) &&
        Objects.equals(this.displayName, noThirdPartySdkSessionResponse.displayName) &&
        Objects.equals(this.signature, noThirdPartySdkSessionResponse.signature) &&
        Objects.equals(this.operationalAnalyticsIdentifier, noThirdPartySdkSessionResponse.operationalAnalyticsIdentifier) &&
        Objects.equals(this.retries, noThirdPartySdkSessionResponse.retries) &&
        Objects.equals(this.pspId, noThirdPartySdkSessionResponse.pspId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(epochTimestamp, expiresAt, merchantSessionIdentifier, nonce, merchantIdentifier, domainName, displayName, signature, operationalAnalyticsIdentifier, retries, pspId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoThirdPartySdkSessionResponse {\n");
    sb.append("    epochTimestamp: ").append(toIndentedString(epochTimestamp)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    merchantSessionIdentifier: ").append(toIndentedString(merchantSessionIdentifier)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    merchantIdentifier: ").append(toIndentedString(merchantIdentifier)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    operationalAnalyticsIdentifier: ").append(toIndentedString(operationalAnalyticsIdentifier)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    pspId: ").append(toIndentedString(pspId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `epoch_timestamp` to the URL query string
    if (getEpochTimestamp() != null) {
      joiner.add(String.format("%sepoch_timestamp%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEpochTimestamp()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_at` to the URL query string
    if (getExpiresAt() != null) {
      joiner.add(String.format("%sexpires_at%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExpiresAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `merchant_session_identifier` to the URL query string
    if (getMerchantSessionIdentifier() != null) {
      joiner.add(String.format("%smerchant_session_identifier%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMerchantSessionIdentifier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nonce` to the URL query string
    if (getNonce() != null) {
      joiner.add(String.format("%snonce%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNonce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `merchant_identifier` to the URL query string
    if (getMerchantIdentifier() != null) {
      joiner.add(String.format("%smerchant_identifier%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMerchantIdentifier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `domain_name` to the URL query string
    if (getDomainName() != null) {
      joiner.add(String.format("%sdomain_name%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDomainName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `display_name` to the URL query string
    if (getDisplayName() != null) {
      joiner.add(String.format("%sdisplay_name%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDisplayName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `signature` to the URL query string
    if (getSignature() != null) {
      joiner.add(String.format("%ssignature%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSignature()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `operational_analytics_identifier` to the URL query string
    if (getOperationalAnalyticsIdentifier() != null) {
      joiner.add(String.format("%soperational_analytics_identifier%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOperationalAnalyticsIdentifier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `retries` to the URL query string
    if (getRetries() != null) {
      joiner.add(String.format("%sretries%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRetries()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `psp_id` to the URL query string
    if (getPspId() != null) {
      joiner.add(String.format("%spsp_id%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPspId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

