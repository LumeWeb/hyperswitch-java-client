/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.Address;
import com.hyperswitch.client.model.BankDebitResponse;
import com.hyperswitch.client.model.BankRedirectResponse;
import com.hyperswitch.client.model.BankTransferResponse;
import com.hyperswitch.client.model.CardRedirectResponse;
import com.hyperswitch.client.model.CardResponse;
import com.hyperswitch.client.model.CardTokenResponse;
import com.hyperswitch.client.model.CryptoResponse;
import com.hyperswitch.client.model.GiftCardResponse;
import com.hyperswitch.client.model.MobilePaymentResponse;
import com.hyperswitch.client.model.OpenBankingResponse;
import com.hyperswitch.client.model.PaylaterResponse;
import com.hyperswitch.client.model.RealTimePaymentDataResponse;
import com.hyperswitch.client.model.UpiResponse;
import com.hyperswitch.client.model.VoucherResponse;
import com.hyperswitch.client.model.WalletResponse;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for PaymentMethodDataResponseWithBilling
 */
public class PaymentMethodDataResponseWithBillingTest {
    private final PaymentMethodDataResponseWithBilling model = new PaymentMethodDataResponseWithBilling();

    /**
     * Model tests for PaymentMethodDataResponseWithBilling
     */
    @Test
    public void testPaymentMethodDataResponseWithBilling() {
        // TODO: test PaymentMethodDataResponseWithBilling
    }

    /**
     * Test the property 'billing'
     */
    @Test
    public void billingTest() {
        // TODO: test billing
    }

    /**
     * Test the property 'card'
     */
    @Test
    public void cardTest() {
        // TODO: test card
    }

    /**
     * Test the property 'bankTransfer'
     */
    @Test
    public void bankTransferTest() {
        // TODO: test bankTransfer
    }

    /**
     * Test the property 'wallet'
     */
    @Test
    public void walletTest() {
        // TODO: test wallet
    }

    /**
     * Test the property 'payLater'
     */
    @Test
    public void payLaterTest() {
        // TODO: test payLater
    }

    /**
     * Test the property 'bankRedirect'
     */
    @Test
    public void bankRedirectTest() {
        // TODO: test bankRedirect
    }

    /**
     * Test the property 'crypto'
     */
    @Test
    public void cryptoTest() {
        // TODO: test crypto
    }

    /**
     * Test the property 'bankDebit'
     */
    @Test
    public void bankDebitTest() {
        // TODO: test bankDebit
    }

    /**
     * Test the property 'mandatePayment'
     */
    @Test
    public void mandatePaymentTest() {
        // TODO: test mandatePayment
    }

    /**
     * Test the property 'reward'
     */
    @Test
    public void rewardTest() {
        // TODO: test reward
    }

    /**
     * Test the property 'realTimePayment'
     */
    @Test
    public void realTimePaymentTest() {
        // TODO: test realTimePayment
    }

    /**
     * Test the property 'upi'
     */
    @Test
    public void upiTest() {
        // TODO: test upi
    }

    /**
     * Test the property 'voucher'
     */
    @Test
    public void voucherTest() {
        // TODO: test voucher
    }

    /**
     * Test the property 'giftCard'
     */
    @Test
    public void giftCardTest() {
        // TODO: test giftCard
    }

    /**
     * Test the property 'cardRedirect'
     */
    @Test
    public void cardRedirectTest() {
        // TODO: test cardRedirect
    }

    /**
     * Test the property 'cardToken'
     */
    @Test
    public void cardTokenTest() {
        // TODO: test cardToken
    }

    /**
     * Test the property 'openBanking'
     */
    @Test
    public void openBankingTest() {
        // TODO: test openBanking
    }

    /**
     * Test the property 'mobilePayment'
     */
    @Test
    public void mobilePaymentTest() {
        // TODO: test mobilePayment
    }

}
