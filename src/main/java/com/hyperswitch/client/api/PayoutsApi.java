/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.PayoutCancelRequest;
import com.hyperswitch.client.model.PayoutConfirmRequest;
import com.hyperswitch.client.model.PayoutCreateResponse;
import com.hyperswitch.client.model.PayoutFulfillRequest;
import com.hyperswitch.client.model.PayoutListFilterConstraints;
import com.hyperswitch.client.model.PayoutListFilters;
import com.hyperswitch.client.model.PayoutListResponse;
import com.hyperswitch.client.model.PayoutUpdateRequest;
import com.hyperswitch.client.model.PayoutsCreateRequest;
import com.hyperswitch.client.model.TimeRange;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PayoutsApi {


  private ApiClient apiClient;

  public PayoutsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PayoutsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Payouts - Cancel
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutCancelRequest  (required)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse cancelAPayout(String payoutId, PayoutCancelRequest payoutCancelRequest) throws ApiException {
    return this.cancelAPayout(payoutId, payoutCancelRequest, Collections.emptyMap());
  }


  /**
   * Payouts - Cancel
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutCancelRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse cancelAPayout(String payoutId, PayoutCancelRequest payoutCancelRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutCancelRequest;
    
    // verify the required parameter 'payoutId' is set
    if (payoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutId' when calling cancelAPayout");
    }
    
    // verify the required parameter 'payoutCancelRequest' is set
    if (payoutCancelRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutCancelRequest' when calling cancelAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/{payout_id}/cancel"
      .replaceAll("\\{" + "payout_id" + "\\}", apiClient.escapeString(payoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - Confirm
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutConfirmRequest  (required)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse confirmAPayout(String payoutId, PayoutConfirmRequest payoutConfirmRequest) throws ApiException {
    return this.confirmAPayout(payoutId, payoutConfirmRequest, Collections.emptyMap());
  }


  /**
   * Payouts - Confirm
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutConfirmRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse confirmAPayout(String payoutId, PayoutConfirmRequest payoutConfirmRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutConfirmRequest;
    
    // verify the required parameter 'payoutId' is set
    if (payoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutId' when calling confirmAPayout");
    }
    
    // verify the required parameter 'payoutConfirmRequest' is set
    if (payoutConfirmRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutConfirmRequest' when calling confirmAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/{payout_id}/confirm"
      .replaceAll("\\{" + "payout_id" + "\\}", apiClient.escapeString(payoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - Create
   * 
   * @param payoutsCreateRequest  (required)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse createAPayout(PayoutsCreateRequest payoutsCreateRequest) throws ApiException {
    return this.createAPayout(payoutsCreateRequest, Collections.emptyMap());
  }


  /**
   * Payouts - Create
   * 
   * @param payoutsCreateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse createAPayout(PayoutsCreateRequest payoutsCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutsCreateRequest;
    
    // verify the required parameter 'payoutsCreateRequest' is set
    if (payoutsCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutsCreateRequest' when calling createAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/create";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - List using filters
   * 
   * @param payoutListFilterConstraints  (required)
   * @return PayoutListResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutListResponse filterPayoutsUsingSpecificConstraints(PayoutListFilterConstraints payoutListFilterConstraints) throws ApiException {
    return this.filterPayoutsUsingSpecificConstraints(payoutListFilterConstraints, Collections.emptyMap());
  }


  /**
   * Payouts - List using filters
   * 
   * @param payoutListFilterConstraints  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutListResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutListResponse filterPayoutsUsingSpecificConstraints(PayoutListFilterConstraints payoutListFilterConstraints, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutListFilterConstraints;
    
    // verify the required parameter 'payoutListFilterConstraints' is set
    if (payoutListFilterConstraints == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutListFilterConstraints' when calling filterPayoutsUsingSpecificConstraints");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutListResponse> localVarReturnType = new TypeReference<PayoutListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - Fulfill
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutFulfillRequest  (required)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse fulfillAPayout(String payoutId, PayoutFulfillRequest payoutFulfillRequest) throws ApiException {
    return this.fulfillAPayout(payoutId, payoutFulfillRequest, Collections.emptyMap());
  }


  /**
   * Payouts - Fulfill
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutFulfillRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse fulfillAPayout(String payoutId, PayoutFulfillRequest payoutFulfillRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutFulfillRequest;
    
    // verify the required parameter 'payoutId' is set
    if (payoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutId' when calling fulfillAPayout");
    }
    
    // verify the required parameter 'payoutFulfillRequest' is set
    if (payoutFulfillRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutFulfillRequest' when calling fulfillAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/{payout_id}/fulfill"
      .replaceAll("\\{" + "payout_id" + "\\}", apiClient.escapeString(payoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - List available filters
   * 
   * @param timeRange  (required)
   * @return PayoutListFilters
   * @throws ApiException if fails to make API call
   */
  public PayoutListFilters listAvailablePayoutFilters(TimeRange timeRange) throws ApiException {
    return this.listAvailablePayoutFilters(timeRange, Collections.emptyMap());
  }


  /**
   * Payouts - List available filters
   * 
   * @param timeRange  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutListFilters
   * @throws ApiException if fails to make API call
   */
  public PayoutListFilters listAvailablePayoutFilters(TimeRange timeRange, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = timeRange;
    
    // verify the required parameter 'timeRange' is set
    if (timeRange == null) {
      throw new ApiException(400, "Missing the required parameter 'timeRange' when calling listAvailablePayoutFilters");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/filter";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutListFilters> localVarReturnType = new TypeReference<PayoutListFilters>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - List
   * 
   * @param customerId The identifier for customer (required)
   * @param startingAfter A cursor for use in pagination, fetch the next list after some object (required)
   * @param endingBefore A cursor for use in pagination, fetch the previous list before some object (required)
   * @param limit limit on the number of objects to return (required)
   * @param created The time at which payout is created (required)
   * @param timeRange The time range for which objects are needed. TimeRange has two fields start_time and end_time from which objects can be filtered as per required scenarios (created_at, time less than, greater than etc). (required)
   * @return PayoutListResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutListResponse listPayoutsUsingGenericConstraints(String customerId, String startingAfter, String endingBefore, String limit, String created, String timeRange) throws ApiException {
    return this.listPayoutsUsingGenericConstraints(customerId, startingAfter, endingBefore, limit, created, timeRange, Collections.emptyMap());
  }


  /**
   * Payouts - List
   * 
   * @param customerId The identifier for customer (required)
   * @param startingAfter A cursor for use in pagination, fetch the next list after some object (required)
   * @param endingBefore A cursor for use in pagination, fetch the previous list before some object (required)
   * @param limit limit on the number of objects to return (required)
   * @param created The time at which payout is created (required)
   * @param timeRange The time range for which objects are needed. TimeRange has two fields start_time and end_time from which objects can be filtered as per required scenarios (created_at, time less than, greater than etc). (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutListResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutListResponse listPayoutsUsingGenericConstraints(String customerId, String startingAfter, String endingBefore, String limit, String created, String timeRange, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listPayoutsUsingGenericConstraints");
    }
    
    // verify the required parameter 'startingAfter' is set
    if (startingAfter == null) {
      throw new ApiException(400, "Missing the required parameter 'startingAfter' when calling listPayoutsUsingGenericConstraints");
    }
    
    // verify the required parameter 'endingBefore' is set
    if (endingBefore == null) {
      throw new ApiException(400, "Missing the required parameter 'endingBefore' when calling listPayoutsUsingGenericConstraints");
    }
    
    // verify the required parameter 'limit' is set
    if (limit == null) {
      throw new ApiException(400, "Missing the required parameter 'limit' when calling listPayoutsUsingGenericConstraints");
    }
    
    // verify the required parameter 'created' is set
    if (created == null) {
      throw new ApiException(400, "Missing the required parameter 'created' when calling listPayoutsUsingGenericConstraints");
    }
    
    // verify the required parameter 'timeRange' is set
    if (timeRange == null) {
      throw new ApiException(400, "Missing the required parameter 'timeRange' when calling listPayoutsUsingGenericConstraints");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("customer_id", customerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("starting_after", startingAfter));
    localVarQueryParams.addAll(apiClient.parameterToPair("ending_before", endingBefore));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("created", created));
    localVarQueryParams.addAll(apiClient.parameterToPair("time_range", timeRange));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutListResponse> localVarReturnType = new TypeReference<PayoutListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - Retrieve
   * 
   * @param payoutId The identifier for payout (required)
   * @param forceSync Sync with the connector to get the payout details (defaults to false) (optional)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse retrieveAPayout(String payoutId, Boolean forceSync) throws ApiException {
    return this.retrieveAPayout(payoutId, forceSync, Collections.emptyMap());
  }


  /**
   * Payouts - Retrieve
   * 
   * @param payoutId The identifier for payout (required)
   * @param forceSync Sync with the connector to get the payout details (defaults to false) (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse retrieveAPayout(String payoutId, Boolean forceSync, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'payoutId' is set
    if (payoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutId' when calling retrieveAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/{payout_id}"
      .replaceAll("\\{" + "payout_id" + "\\}", apiClient.escapeString(payoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("force_sync", forceSync));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payouts - Update
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutUpdateRequest  (required)
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse updateAPayout(String payoutId, PayoutUpdateRequest payoutUpdateRequest) throws ApiException {
    return this.updateAPayout(payoutId, payoutUpdateRequest, Collections.emptyMap());
  }


  /**
   * Payouts - Update
   * 
   * @param payoutId The identifier for payout (required)
   * @param payoutUpdateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PayoutCreateResponse
   * @throws ApiException if fails to make API call
   */
  public PayoutCreateResponse updateAPayout(String payoutId, PayoutUpdateRequest payoutUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = payoutUpdateRequest;
    
    // verify the required parameter 'payoutId' is set
    if (payoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutId' when calling updateAPayout");
    }
    
    // verify the required parameter 'payoutUpdateRequest' is set
    if (payoutUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'payoutUpdateRequest' when calling updateAPayout");
    }
    
    // create path and map variables
    String localVarPath = "/payouts/{payout_id}"
      .replaceAll("\\{" + "payout_id" + "\\}", apiClient.escapeString(payoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PayoutCreateResponse> localVarReturnType = new TypeReference<PayoutCreateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
