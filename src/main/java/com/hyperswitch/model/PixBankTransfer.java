/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PixBankTransfer
 */
@JsonPropertyOrder({
  PixBankTransfer.JSON_PROPERTY_BANK_NAME,
  PixBankTransfer.JSON_PROPERTY_BANK_BRANCH,
  PixBankTransfer.JSON_PROPERTY_BANK_ACCOUNT_NUMBER,
  PixBankTransfer.JSON_PROPERTY_PIX_KEY,
  PixBankTransfer.JSON_PROPERTY_TAX_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PixBankTransfer {
  public static final String JSON_PROPERTY_BANK_NAME = "bank_name";
  private JsonNullable<String> bankName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BANK_BRANCH = "bank_branch";
  private JsonNullable<String> bankBranch = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BANK_ACCOUNT_NUMBER = "bank_account_number";
  private String bankAccountNumber;

  public static final String JSON_PROPERTY_PIX_KEY = "pix_key";
  private String pixKey;

  public static final String JSON_PROPERTY_TAX_ID = "tax_id";
  private JsonNullable<String> taxId = JsonNullable.<String>undefined();

  public PixBankTransfer() {
  }

  public PixBankTransfer bankName(String bankName) {
    this.bankName = JsonNullable.<String>of(bankName);
    
    return this;
  }

   /**
   * Bank name
   * @return bankName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getBankName() {
        return bankName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBankName_JsonNullable() {
    return bankName;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_NAME)
  public void setBankName_JsonNullable(JsonNullable<String> bankName) {
    this.bankName = bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = JsonNullable.<String>of(bankName);
  }


  public PixBankTransfer bankBranch(String bankBranch) {
    this.bankBranch = JsonNullable.<String>of(bankBranch);
    
    return this;
  }

   /**
   * Bank branch
   * @return bankBranch
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getBankBranch() {
        return bankBranch.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBankBranch_JsonNullable() {
    return bankBranch;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_BRANCH)
  public void setBankBranch_JsonNullable(JsonNullable<String> bankBranch) {
    this.bankBranch = bankBranch;
  }

  public void setBankBranch(String bankBranch) {
    this.bankBranch = JsonNullable.<String>of(bankBranch);
  }


  public PixBankTransfer bankAccountNumber(String bankAccountNumber) {
    
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Bank account number is an unique identifier assigned by a bank to a customer.
   * @return bankAccountNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBankAccountNumber() {
    return bankAccountNumber;
  }


  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public PixBankTransfer pixKey(String pixKey) {
    
    this.pixKey = pixKey;
    return this;
  }

   /**
   * Unique key for pix customer
   * @return pixKey
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PIX_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPixKey() {
    return pixKey;
  }


  @JsonProperty(JSON_PROPERTY_PIX_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPixKey(String pixKey) {
    this.pixKey = pixKey;
  }


  public PixBankTransfer taxId(String taxId) {
    this.taxId = JsonNullable.<String>of(taxId);
    
    return this;
  }

   /**
   * Individual taxpayer identification number
   * @return taxId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getTaxId() {
        return taxId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAX_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTaxId_JsonNullable() {
    return taxId;
  }
  
  @JsonProperty(JSON_PROPERTY_TAX_ID)
  public void setTaxId_JsonNullable(JsonNullable<String> taxId) {
    this.taxId = taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = JsonNullable.<String>of(taxId);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PixBankTransfer pixBankTransfer = (PixBankTransfer) o;
    return equalsNullable(this.bankName, pixBankTransfer.bankName) &&
        equalsNullable(this.bankBranch, pixBankTransfer.bankBranch) &&
        Objects.equals(this.bankAccountNumber, pixBankTransfer.bankAccountNumber) &&
        Objects.equals(this.pixKey, pixBankTransfer.pixKey) &&
        equalsNullable(this.taxId, pixBankTransfer.taxId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(bankName), hashCodeNullable(bankBranch), bankAccountNumber, pixKey, hashCodeNullable(taxId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PixBankTransfer {\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankBranch: ").append(toIndentedString(bankBranch)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    pixKey: ").append(toIndentedString(pixKey)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

