/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.api;

import com.lumeweb.hyperswitch.client.ApiException;
import com.lumeweb.hyperswitch.model.LinkedRoutingConfigRetrieveResponse;
import com.lumeweb.hyperswitch.model.ProfileCreate;
import com.lumeweb.hyperswitch.model.ProfileResponse;
import com.lumeweb.hyperswitch.model.RoutableConnectorChoice;
import com.lumeweb.hyperswitch.model.RoutingAlgorithmId;
import com.lumeweb.hyperswitch.model.RoutingDictionaryRecord;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for ProfileApi
 */
@Disabled
public class ProfileApiTest {

    private final ProfileApi api = new ProfileApi();

    
    /**
     * Profile - Activate routing algorithm
     *
     * Activates a routing algorithm under a profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activatesARoutingAlgorithmUnderAProfileTest() throws ApiException {
        String id = null;
        RoutingAlgorithmId routingAlgorithmId = null;
        RoutingDictionaryRecord response = 
        api.activatesARoutingAlgorithmUnderAProfile(id, routingAlgorithmId);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Create
     *
     * Creates a new *profile* for a merchant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAProfileTest() throws ApiException {
        String xMerchantId = null;
        ProfileCreate profileCreate = null;
        ProfileResponse response = 
        api.createAProfile(xMerchantId, profileCreate);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Deactivate routing algorithm
     *
     * Deactivates a routing algorithm under a profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivatesARoutingAlgorithmUnderAProfileTest() throws ApiException {
        String id = null;
        RoutingDictionaryRecord response = 
        api.deactivatesARoutingAlgorithmUnderAProfile(id);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Retrieve
     *
     * Retrieve existing *profile*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAProfileTest() throws ApiException {
        String id = null;
        String xMerchantId = null;
        ProfileResponse response = 
        api.retrieveAProfile(id, xMerchantId);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Retrieve Active Routing Algorithm
     *
     * Retrieve active routing algorithm under the profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTheActiveRoutingAlgorithmUnderTheProfileTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        LinkedRoutingConfigRetrieveResponse response = 
        api.retrieveTheActiveRoutingAlgorithmUnderTheProfile(id, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Retrieve Default Fallback Routing Algorithm
     *
     * Retrieve the default fallback routing algorithm for the profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTheDefaultFallbackRoutingAlgorithmForTheProfileTest() throws ApiException {
        String id = null;
        List<RoutableConnectorChoice> response = 
        api.retrieveTheDefaultFallbackRoutingAlgorithmForTheProfile(id);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Update
     *
     * Update the *profile*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAProfileTest() throws ApiException {
        String id = null;
        String xMerchantId = null;
        ProfileCreate profileCreate = null;
        ProfileResponse response = 
        api.updateAProfile(id, xMerchantId, profileCreate);
        
        // TODO: test validations
    }
    
    /**
     * Profile - Update Default Fallback Routing Algorithm
     *
     * Update the default fallback routing algorithm for the profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTheDefaultFallbackRoutingAlgorithmForTheProfileTest() throws ApiException {
        String id = null;
        List<RoutableConnectorChoice> routableConnectorChoice = null;
        List<RoutableConnectorChoice> response = 
        api.updateTheDefaultFallbackRoutingAlgorithmForTheProfile(id, routableConnectorChoice);
        
        // TODO: test validations
    }
    
}
