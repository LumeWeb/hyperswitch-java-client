/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.api;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.model.ProfileCreate;
import com.hyperswitch.client.model.ProfileResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileApi
 */
@Disabled
public class ProfileApiTest {

    private final ProfileApi api = new ProfileApi();

    /**
     * Profile - Create
     *
     * Creates a new *profile* for a merchant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAProfileTest() throws ApiException {
        String accountId = null;
        ProfileCreate profileCreate = null;
        ProfileResponse response = api.createAProfile(accountId, profileCreate);

        // TODO: test validations
    }
    /**
     * Profile - Delete
     *
     * Delete the *profile*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTheProfileTest() throws ApiException {
        String accountId = null;
        String profileId = null;
        Boolean response = api.deleteTheProfile(accountId, profileId);

        // TODO: test validations
    }
    /**
     * Profile - List
     *
     * Lists all the *profiles* under a merchant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProfilesTest() throws ApiException {
        String accountId = null;
        List<ProfileResponse> response = api.listProfiles(accountId);

        // TODO: test validations
    }
    /**
     * Profile - Retrieve
     *
     * Retrieve existing *profile*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAProfileTest() throws ApiException {
        String accountId = null;
        String profileId = null;
        ProfileResponse response = api.retrieveAProfile(accountId, profileId);

        // TODO: test validations
    }
    /**
     * Profile - Update
     *
     * Update the *profile*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAProfileTest() throws ApiException {
        String accountId = null;
        String profileId = null;
        ProfileCreate profileCreate = null;
        ProfileResponse response = api.updateAProfile(accountId, profileId, profileCreate);

        // TODO: test validations
    }
}
