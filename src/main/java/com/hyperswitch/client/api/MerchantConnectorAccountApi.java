/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.MerchantConnectorCreate;
import com.hyperswitch.client.model.MerchantConnectorDeleteResponse;
import com.hyperswitch.client.model.MerchantConnectorListResponse;
import com.hyperswitch.client.model.MerchantConnectorResponse;
import com.hyperswitch.client.model.MerchantConnectorUpdate;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MerchantConnectorAccountApi {


  private ApiClient apiClient;

  public MerchantConnectorAccountApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MerchantConnectorAccountApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Merchant Connector - Create
   * Creates a new Merchant Connector for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.
   * @param accountId The unique identifier for the merchant account (required)
   * @param merchantConnectorCreate  (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse createAMerchantConnector(String accountId, MerchantConnectorCreate merchantConnectorCreate) throws ApiException {
    return this.createAMerchantConnector(accountId, merchantConnectorCreate, Collections.emptyMap());
  }


  /**
   * Merchant Connector - Create
   * Creates a new Merchant Connector for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.
   * @param accountId The unique identifier for the merchant account (required)
   * @param merchantConnectorCreate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse createAMerchantConnector(String accountId, MerchantConnectorCreate merchantConnectorCreate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = merchantConnectorCreate;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling createAMerchantConnector");
    }
    
    // verify the required parameter 'merchantConnectorCreate' is set
    if (merchantConnectorCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantConnectorCreate' when calling createAMerchantConnector");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/connectors"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantConnectorResponse> localVarReturnType = new TypeReference<MerchantConnectorResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Connector - Delete
   * Delete or Detach a Merchant Connector from Merchant Account
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @return MerchantConnectorDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorDeleteResponse deleteAMerchantConnector(String accountId, Integer connectorId) throws ApiException {
    return this.deleteAMerchantConnector(accountId, connectorId, Collections.emptyMap());
  }


  /**
   * Merchant Connector - Delete
   * Delete or Detach a Merchant Connector from Merchant Account
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantConnectorDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorDeleteResponse deleteAMerchantConnector(String accountId, Integer connectorId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling deleteAMerchantConnector");
    }
    
    // verify the required parameter 'connectorId' is set
    if (connectorId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorId' when calling deleteAMerchantConnector");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/connectors/{connector_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
      .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantConnectorDeleteResponse> localVarReturnType = new TypeReference<MerchantConnectorDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Connector - List
   * List Merchant Connector Details for the merchant
   * @param accountId The unique identifier for the merchant account (required)
   * @return List&lt;MerchantConnectorListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MerchantConnectorListResponse> listAllMerchantConnectors(String accountId) throws ApiException {
    return this.listAllMerchantConnectors(accountId, Collections.emptyMap());
  }


  /**
   * Merchant Connector - List
   * List Merchant Connector Details for the merchant
   * @param accountId The unique identifier for the merchant account (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;MerchantConnectorListResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MerchantConnectorListResponse> listAllMerchantConnectors(String accountId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling listAllMerchantConnectors");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/connectors"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<List<MerchantConnectorListResponse>> localVarReturnType = new TypeReference<List<MerchantConnectorListResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Connector - Retrieve
   * Retrieves details of a Connector account
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse retrieveAMerchantConnector(String accountId, Integer connectorId) throws ApiException {
    return this.retrieveAMerchantConnector(accountId, connectorId, Collections.emptyMap());
  }


  /**
   * Merchant Connector - Retrieve
   * Retrieves details of a Connector account
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse retrieveAMerchantConnector(String accountId, Integer connectorId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling retrieveAMerchantConnector");
    }
    
    // verify the required parameter 'connectorId' is set
    if (connectorId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorId' when calling retrieveAMerchantConnector");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/connectors/{connector_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
      .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantConnectorResponse> localVarReturnType = new TypeReference<MerchantConnectorResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Merchant Connector - Update
   * To update an existing Merchant Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @param merchantConnectorUpdate  (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse updateAMerchantConnector(String accountId, Integer connectorId, MerchantConnectorUpdate merchantConnectorUpdate) throws ApiException {
    return this.updateAMerchantConnector(accountId, connectorId, merchantConnectorUpdate, Collections.emptyMap());
  }


  /**
   * Merchant Connector - Update
   * To update an existing Merchant Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector
   * @param accountId The unique identifier for the merchant account (required)
   * @param connectorId The unique identifier for the Merchant Connector (required)
   * @param merchantConnectorUpdate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse updateAMerchantConnector(String accountId, Integer connectorId, MerchantConnectorUpdate merchantConnectorUpdate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = merchantConnectorUpdate;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling updateAMerchantConnector");
    }
    
    // verify the required parameter 'connectorId' is set
    if (connectorId == null) {
      throw new ApiException(400, "Missing the required parameter 'connectorId' when calling updateAMerchantConnector");
    }
    
    // verify the required parameter 'merchantConnectorUpdate' is set
    if (merchantConnectorUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantConnectorUpdate' when calling updateAMerchantConnector");
    }
    
    // create path and map variables
    String localVarPath = "/accounts/{account_id}/connectors/{connector_id}"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
      .replaceAll("\\{" + "connector_id" + "\\}", apiClient.escapeString(connectorId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<MerchantConnectorResponse> localVarReturnType = new TypeReference<MerchantConnectorResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
