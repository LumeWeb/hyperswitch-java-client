/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.api;

import com.hyperswitch.client.ApiException;
import java.time.OffsetDateTime;
import com.hyperswitch.client.model.PaymentListResponse;
import com.hyperswitch.client.model.PaymentRetrieveBody;
import com.hyperswitch.client.model.PaymentsCancelRequest;
import com.hyperswitch.client.model.PaymentsCaptureRequest;
import com.hyperswitch.client.model.PaymentsCompleteAuthorizeRequest;
import com.hyperswitch.client.model.PaymentsConfirmRequest;
import com.hyperswitch.client.model.PaymentsCreateRequest;
import com.hyperswitch.client.model.PaymentsExternalAuthenticationRequest;
import com.hyperswitch.client.model.PaymentsExternalAuthenticationResponse;
import com.hyperswitch.client.model.PaymentsIncrementalAuthorizationRequest;
import com.hyperswitch.client.model.PaymentsPostSessionTokensRequest;
import com.hyperswitch.client.model.PaymentsPostSessionTokensResponse;
import com.hyperswitch.client.model.PaymentsResponse;
import com.hyperswitch.client.model.PaymentsSessionRequest;
import com.hyperswitch.client.model.PaymentsSessionResponse;
import com.hyperswitch.client.model.PaymentsUpdateRequest;
import com.hyperswitch.client.model.RetrievePaymentLinkRequest;
import com.hyperswitch.client.model.RetrievePaymentLinkResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * Payments - Cancel
     *
     * A Payment could can be cancelled when it is in one of these statuses: &#x60;requires_payment_method&#x60;, &#x60;requires_capture&#x60;, &#x60;requires_confirmation&#x60;, &#x60;requires_customer_action&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsCancelRequest paymentsCancelRequest = null;
        api.cancelAPayment(paymentId, paymentsCancelRequest);

        // TODO: test validations
    }
    /**
     * Payments - Capture
     *
     * To capture the funds for an uncaptured payment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captureAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsCaptureRequest paymentsCaptureRequest = null;
        PaymentsResponse response = api.captureAPayment(paymentId, paymentsCaptureRequest);

        // TODO: test validations
    }
    /**
     * Payments - Complete Authorize
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeAuthorizeAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsCompleteAuthorizeRequest paymentsCompleteAuthorizeRequest = null;
        PaymentsResponse response = api.completeAuthorizeAPayment(paymentId, paymentsCompleteAuthorizeRequest);

        // TODO: test validations
    }
    /**
     * Payments - Confirm
     *
     * **Use this API to confirm the payment and forward the payment to the payment processor.**  Alternatively you can confirm the payment within the *Payments/Create* API by setting &#x60;confirm&#x3D;true&#x60;. After confirmation, the payment could either:  1. fail with &#x60;failed&#x60; status or  2. transition to a &#x60;requires_customer_action&#x60; status with a &#x60;next_action&#x60; block or  3. succeed with either &#x60;succeeded&#x60; in case of automatic capture or &#x60;requires_capture&#x60; in case of manual capture
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsConfirmRequest paymentsConfirmRequest = null;
        PaymentsResponse response = api.confirmAPayment(paymentId, paymentsConfirmRequest);

        // TODO: test validations
    }
    /**
     * Payments - Create
     *
     * **Creates a payment object when amount and currency are passed.**  This API is also used to create a mandate by passing the &#x60;mandate_object&#x60;.  Depending on the user journey you wish to achieve, you may opt to complete all the steps in a single request **by attaching a payment method, setting &#x60;confirm&#x3D;true&#x60; and &#x60;capture_method &#x3D; automatic&#x60;** in the *Payments/Create API* request.  Otherwise, To completely process a payment you will have to **create a payment, attach a payment method, confirm and capture funds**. For that you could use the following sequence of API requests -  1. Payments - Create  2. Payments - Update  3. Payments - Confirm  4. Payments - Capture.  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.  This page lists the various combinations in which the Payments - Create API can be used and the details about the various fields in the requests and responses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAPaymentTest() throws ApiException {
        PaymentsCreateRequest paymentsCreateRequest = null;
        PaymentsResponse response = api.createAPayment(paymentsCreateRequest);

        // TODO: test validations
    }
    /**
     * Payments - Post Session Tokens
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPostSessionTokensForAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsPostSessionTokensRequest paymentsPostSessionTokensRequest = null;
        PaymentsPostSessionTokensResponse response = api.createPostSessionTokensForAPayment(paymentId, paymentsPostSessionTokensRequest);

        // TODO: test validations
    }
    /**
     * Payments - Session token
     *
     * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTokensForAPaymentTest() throws ApiException {
        PaymentsSessionRequest paymentsSessionRequest = null;
        PaymentsSessionResponse response = api.createSessionTokensForAPayment(paymentsSessionRequest);

        // TODO: test validations
    }
    /**
     * Payments - Incremental Authorization
     *
     * Authorized amount for a payment can be incremented if it is in status: requires_capture
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incrementAuthorizedAmountForAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsIncrementalAuthorizationRequest paymentsIncrementalAuthorizationRequest = null;
        PaymentsResponse response = api.incrementAuthorizedAmountForAPayment(paymentId, paymentsIncrementalAuthorizationRequest);

        // TODO: test validations
    }
    /**
     * Payments - External 3DS Authentication
     *
     * External 3DS Authentication is performed and returns the AuthenticationResponse
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateExternalAuthenticationForAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsExternalAuthenticationRequest paymentsExternalAuthenticationRequest = null;
        PaymentsExternalAuthenticationResponse response = api.initiateExternalAuthenticationForAPayment(paymentId, paymentsExternalAuthenticationRequest);

        // TODO: test validations
    }
    /**
     * Payments - List
     *
     * To list the *payments*
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllPaymentsTest() throws ApiException {
        String customerId = null;
        String startingAfter = null;
        String endingBefore = null;
        Long limit = null;
        OffsetDateTime created = null;
        OffsetDateTime createdLt = null;
        OffsetDateTime createdGt = null;
        OffsetDateTime createdLte = null;
        OffsetDateTime createdGte = null;
        List<PaymentListResponse> response = api.listAllPayments(customerId, startingAfter, endingBefore, limit, created, createdLt, createdGt, createdLte, createdGte);

        // TODO: test validations
    }
    /**
     * Payments - Retrieve
     *
     * Retrieves a Payment. This API can also be used to get the status of a previously initiated payment or next action for an ongoing payment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentRetrieveBody paymentRetrieveBody = null;
        PaymentsResponse response = api.retrieveAPayment(paymentId, paymentRetrieveBody);

        // TODO: test validations
    }
    /**
     * Payments Link - Retrieve
     *
     * To retrieve the properties of a Payment Link. This may be used to get the status of a previously initiated payment or next action for an ongoing payment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAPaymentLinkTest() throws ApiException {
        String paymentLinkId = null;
        RetrievePaymentLinkRequest retrievePaymentLinkRequest = null;
        RetrievePaymentLinkResponse response = api.retrieveAPaymentLink(paymentLinkId, retrievePaymentLinkRequest);

        // TODO: test validations
    }
    /**
     * Payments - Update
     *
     * To update the properties of a *PaymentIntent* object. This may include attaching a payment method, or attaching customer object or metadata fields after the Payment is created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAPaymentTest() throws ApiException {
        String paymentId = null;
        PaymentsUpdateRequest paymentsUpdateRequest = null;
        PaymentsResponse response = api.updateAPayment(paymentId, paymentsUpdateRequest);

        // TODO: test validations
    }
}
