/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lumeweb.hyperswitch.model.ApplePayWalletData;
import com.lumeweb.hyperswitch.model.GooglePayWalletData;
import com.lumeweb.hyperswitch.model.MbWayRedirection;
import com.lumeweb.hyperswitch.model.MifinityData;
import com.lumeweb.hyperswitch.model.PayPalWalletData;
import com.lumeweb.hyperswitch.model.PaypalRedirection;
import com.lumeweb.hyperswitch.model.PazeWalletData;
import com.lumeweb.hyperswitch.model.SamsungPayWalletData;
import com.lumeweb.hyperswitch.model.WalletDataOneOf;
import com.lumeweb.hyperswitch.model.WalletDataOneOf1;
import com.lumeweb.hyperswitch.model.WalletDataOneOf10;
import com.lumeweb.hyperswitch.model.WalletDataOneOf11;
import com.lumeweb.hyperswitch.model.WalletDataOneOf12;
import com.lumeweb.hyperswitch.model.WalletDataOneOf13;
import com.lumeweb.hyperswitch.model.WalletDataOneOf14;
import com.lumeweb.hyperswitch.model.WalletDataOneOf15;
import com.lumeweb.hyperswitch.model.WalletDataOneOf16;
import com.lumeweb.hyperswitch.model.WalletDataOneOf17;
import com.lumeweb.hyperswitch.model.WalletDataOneOf18;
import com.lumeweb.hyperswitch.model.WalletDataOneOf19;
import com.lumeweb.hyperswitch.model.WalletDataOneOf2;
import com.lumeweb.hyperswitch.model.WalletDataOneOf20;
import com.lumeweb.hyperswitch.model.WalletDataOneOf21;
import com.lumeweb.hyperswitch.model.WalletDataOneOf22;
import com.lumeweb.hyperswitch.model.WalletDataOneOf23;
import com.lumeweb.hyperswitch.model.WalletDataOneOf24;
import com.lumeweb.hyperswitch.model.WalletDataOneOf25;
import com.lumeweb.hyperswitch.model.WalletDataOneOf26;
import com.lumeweb.hyperswitch.model.WalletDataOneOf27;
import com.lumeweb.hyperswitch.model.WalletDataOneOf3;
import com.lumeweb.hyperswitch.model.WalletDataOneOf4;
import com.lumeweb.hyperswitch.model.WalletDataOneOf5;
import com.lumeweb.hyperswitch.model.WalletDataOneOf6;
import com.lumeweb.hyperswitch.model.WalletDataOneOf7;
import com.lumeweb.hyperswitch.model.WalletDataOneOf8;
import com.lumeweb.hyperswitch.model.WalletDataOneOf9;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.lumeweb.hyperswitch.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
@JsonDeserialize(using = WalletData.WalletDataDeserializer.class)
@JsonSerialize(using = WalletData.WalletDataSerializer.class)
public class WalletData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(WalletData.class.getName());

    public static class WalletDataSerializer extends StdSerializer<WalletData> {
        public WalletDataSerializer(Class<WalletData> t) {
            super(t);
        }

        public WalletDataSerializer() {
            this(null);
        }

        @Override
        public void serialize(WalletData value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class WalletDataDeserializer extends StdDeserializer<WalletData> {
        public WalletDataDeserializer() {
            this(WalletData.class);
        }

        public WalletDataDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public WalletData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize WalletDataOneOf
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf.class.equals(Integer.class) || WalletDataOneOf.class.equals(Long.class) || WalletDataOneOf.class.equals(Float.class) || WalletDataOneOf.class.equals(Double.class) || WalletDataOneOf.class.equals(Boolean.class) || WalletDataOneOf.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf.class.equals(Integer.class) || WalletDataOneOf.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf.class.equals(Float.class) || WalletDataOneOf.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf'", e);
            }

            // deserialize WalletDataOneOf1
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf1.class.equals(Integer.class) || WalletDataOneOf1.class.equals(Long.class) || WalletDataOneOf1.class.equals(Float.class) || WalletDataOneOf1.class.equals(Double.class) || WalletDataOneOf1.class.equals(Boolean.class) || WalletDataOneOf1.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf1.class.equals(Integer.class) || WalletDataOneOf1.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf1.class.equals(Float.class) || WalletDataOneOf1.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf1.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf1.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf1.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf1'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf1'", e);
            }

            // deserialize WalletDataOneOf10
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf10.class.equals(Integer.class) || WalletDataOneOf10.class.equals(Long.class) || WalletDataOneOf10.class.equals(Float.class) || WalletDataOneOf10.class.equals(Double.class) || WalletDataOneOf10.class.equals(Boolean.class) || WalletDataOneOf10.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf10.class.equals(Integer.class) || WalletDataOneOf10.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf10.class.equals(Float.class) || WalletDataOneOf10.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf10.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf10.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf10.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf10'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf10'", e);
            }

            // deserialize WalletDataOneOf11
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf11.class.equals(Integer.class) || WalletDataOneOf11.class.equals(Long.class) || WalletDataOneOf11.class.equals(Float.class) || WalletDataOneOf11.class.equals(Double.class) || WalletDataOneOf11.class.equals(Boolean.class) || WalletDataOneOf11.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf11.class.equals(Integer.class) || WalletDataOneOf11.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf11.class.equals(Float.class) || WalletDataOneOf11.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf11.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf11.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf11.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf11'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf11'", e);
            }

            // deserialize WalletDataOneOf12
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf12.class.equals(Integer.class) || WalletDataOneOf12.class.equals(Long.class) || WalletDataOneOf12.class.equals(Float.class) || WalletDataOneOf12.class.equals(Double.class) || WalletDataOneOf12.class.equals(Boolean.class) || WalletDataOneOf12.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf12.class.equals(Integer.class) || WalletDataOneOf12.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf12.class.equals(Float.class) || WalletDataOneOf12.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf12.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf12.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf12.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf12'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf12'", e);
            }

            // deserialize WalletDataOneOf13
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf13.class.equals(Integer.class) || WalletDataOneOf13.class.equals(Long.class) || WalletDataOneOf13.class.equals(Float.class) || WalletDataOneOf13.class.equals(Double.class) || WalletDataOneOf13.class.equals(Boolean.class) || WalletDataOneOf13.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf13.class.equals(Integer.class) || WalletDataOneOf13.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf13.class.equals(Float.class) || WalletDataOneOf13.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf13.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf13.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf13.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf13'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf13'", e);
            }

            // deserialize WalletDataOneOf14
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf14.class.equals(Integer.class) || WalletDataOneOf14.class.equals(Long.class) || WalletDataOneOf14.class.equals(Float.class) || WalletDataOneOf14.class.equals(Double.class) || WalletDataOneOf14.class.equals(Boolean.class) || WalletDataOneOf14.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf14.class.equals(Integer.class) || WalletDataOneOf14.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf14.class.equals(Float.class) || WalletDataOneOf14.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf14.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf14.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf14.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf14'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf14'", e);
            }

            // deserialize WalletDataOneOf15
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf15.class.equals(Integer.class) || WalletDataOneOf15.class.equals(Long.class) || WalletDataOneOf15.class.equals(Float.class) || WalletDataOneOf15.class.equals(Double.class) || WalletDataOneOf15.class.equals(Boolean.class) || WalletDataOneOf15.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf15.class.equals(Integer.class) || WalletDataOneOf15.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf15.class.equals(Float.class) || WalletDataOneOf15.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf15.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf15.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf15.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf15'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf15'", e);
            }

            // deserialize WalletDataOneOf16
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf16.class.equals(Integer.class) || WalletDataOneOf16.class.equals(Long.class) || WalletDataOneOf16.class.equals(Float.class) || WalletDataOneOf16.class.equals(Double.class) || WalletDataOneOf16.class.equals(Boolean.class) || WalletDataOneOf16.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf16.class.equals(Integer.class) || WalletDataOneOf16.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf16.class.equals(Float.class) || WalletDataOneOf16.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf16.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf16.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf16.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf16'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf16'", e);
            }

            // deserialize WalletDataOneOf17
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf17.class.equals(Integer.class) || WalletDataOneOf17.class.equals(Long.class) || WalletDataOneOf17.class.equals(Float.class) || WalletDataOneOf17.class.equals(Double.class) || WalletDataOneOf17.class.equals(Boolean.class) || WalletDataOneOf17.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf17.class.equals(Integer.class) || WalletDataOneOf17.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf17.class.equals(Float.class) || WalletDataOneOf17.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf17.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf17.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf17.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf17'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf17'", e);
            }

            // deserialize WalletDataOneOf18
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf18.class.equals(Integer.class) || WalletDataOneOf18.class.equals(Long.class) || WalletDataOneOf18.class.equals(Float.class) || WalletDataOneOf18.class.equals(Double.class) || WalletDataOneOf18.class.equals(Boolean.class) || WalletDataOneOf18.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf18.class.equals(Integer.class) || WalletDataOneOf18.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf18.class.equals(Float.class) || WalletDataOneOf18.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf18.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf18.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf18.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf18'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf18'", e);
            }

            // deserialize WalletDataOneOf19
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf19.class.equals(Integer.class) || WalletDataOneOf19.class.equals(Long.class) || WalletDataOneOf19.class.equals(Float.class) || WalletDataOneOf19.class.equals(Double.class) || WalletDataOneOf19.class.equals(Boolean.class) || WalletDataOneOf19.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf19.class.equals(Integer.class) || WalletDataOneOf19.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf19.class.equals(Float.class) || WalletDataOneOf19.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf19.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf19.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf19.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf19'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf19'", e);
            }

            // deserialize WalletDataOneOf2
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf2.class.equals(Integer.class) || WalletDataOneOf2.class.equals(Long.class) || WalletDataOneOf2.class.equals(Float.class) || WalletDataOneOf2.class.equals(Double.class) || WalletDataOneOf2.class.equals(Boolean.class) || WalletDataOneOf2.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf2.class.equals(Integer.class) || WalletDataOneOf2.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf2.class.equals(Float.class) || WalletDataOneOf2.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf2.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf2.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf2'", e);
            }

            // deserialize WalletDataOneOf20
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf20.class.equals(Integer.class) || WalletDataOneOf20.class.equals(Long.class) || WalletDataOneOf20.class.equals(Float.class) || WalletDataOneOf20.class.equals(Double.class) || WalletDataOneOf20.class.equals(Boolean.class) || WalletDataOneOf20.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf20.class.equals(Integer.class) || WalletDataOneOf20.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf20.class.equals(Float.class) || WalletDataOneOf20.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf20.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf20.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf20.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf20'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf20'", e);
            }

            // deserialize WalletDataOneOf21
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf21.class.equals(Integer.class) || WalletDataOneOf21.class.equals(Long.class) || WalletDataOneOf21.class.equals(Float.class) || WalletDataOneOf21.class.equals(Double.class) || WalletDataOneOf21.class.equals(Boolean.class) || WalletDataOneOf21.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf21.class.equals(Integer.class) || WalletDataOneOf21.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf21.class.equals(Float.class) || WalletDataOneOf21.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf21.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf21.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf21.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf21'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf21'", e);
            }

            // deserialize WalletDataOneOf22
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf22.class.equals(Integer.class) || WalletDataOneOf22.class.equals(Long.class) || WalletDataOneOf22.class.equals(Float.class) || WalletDataOneOf22.class.equals(Double.class) || WalletDataOneOf22.class.equals(Boolean.class) || WalletDataOneOf22.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf22.class.equals(Integer.class) || WalletDataOneOf22.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf22.class.equals(Float.class) || WalletDataOneOf22.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf22.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf22.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf22.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf22'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf22'", e);
            }

            // deserialize WalletDataOneOf23
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf23.class.equals(Integer.class) || WalletDataOneOf23.class.equals(Long.class) || WalletDataOneOf23.class.equals(Float.class) || WalletDataOneOf23.class.equals(Double.class) || WalletDataOneOf23.class.equals(Boolean.class) || WalletDataOneOf23.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf23.class.equals(Integer.class) || WalletDataOneOf23.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf23.class.equals(Float.class) || WalletDataOneOf23.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf23.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf23.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf23.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf23'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf23'", e);
            }

            // deserialize WalletDataOneOf24
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf24.class.equals(Integer.class) || WalletDataOneOf24.class.equals(Long.class) || WalletDataOneOf24.class.equals(Float.class) || WalletDataOneOf24.class.equals(Double.class) || WalletDataOneOf24.class.equals(Boolean.class) || WalletDataOneOf24.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf24.class.equals(Integer.class) || WalletDataOneOf24.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf24.class.equals(Float.class) || WalletDataOneOf24.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf24.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf24.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf24.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf24'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf24'", e);
            }

            // deserialize WalletDataOneOf25
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf25.class.equals(Integer.class) || WalletDataOneOf25.class.equals(Long.class) || WalletDataOneOf25.class.equals(Float.class) || WalletDataOneOf25.class.equals(Double.class) || WalletDataOneOf25.class.equals(Boolean.class) || WalletDataOneOf25.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf25.class.equals(Integer.class) || WalletDataOneOf25.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf25.class.equals(Float.class) || WalletDataOneOf25.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf25.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf25.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf25.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf25'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf25'", e);
            }

            // deserialize WalletDataOneOf26
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf26.class.equals(Integer.class) || WalletDataOneOf26.class.equals(Long.class) || WalletDataOneOf26.class.equals(Float.class) || WalletDataOneOf26.class.equals(Double.class) || WalletDataOneOf26.class.equals(Boolean.class) || WalletDataOneOf26.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf26.class.equals(Integer.class) || WalletDataOneOf26.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf26.class.equals(Float.class) || WalletDataOneOf26.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf26.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf26.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf26.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf26'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf26'", e);
            }

            // deserialize WalletDataOneOf27
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf27.class.equals(Integer.class) || WalletDataOneOf27.class.equals(Long.class) || WalletDataOneOf27.class.equals(Float.class) || WalletDataOneOf27.class.equals(Double.class) || WalletDataOneOf27.class.equals(Boolean.class) || WalletDataOneOf27.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf27.class.equals(Integer.class) || WalletDataOneOf27.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf27.class.equals(Float.class) || WalletDataOneOf27.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf27.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf27.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf27.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf27'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf27'", e);
            }

            // deserialize WalletDataOneOf3
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf3.class.equals(Integer.class) || WalletDataOneOf3.class.equals(Long.class) || WalletDataOneOf3.class.equals(Float.class) || WalletDataOneOf3.class.equals(Double.class) || WalletDataOneOf3.class.equals(Boolean.class) || WalletDataOneOf3.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf3.class.equals(Integer.class) || WalletDataOneOf3.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf3.class.equals(Float.class) || WalletDataOneOf3.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf3.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf3.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf3.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf3'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf3'", e);
            }

            // deserialize WalletDataOneOf4
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf4.class.equals(Integer.class) || WalletDataOneOf4.class.equals(Long.class) || WalletDataOneOf4.class.equals(Float.class) || WalletDataOneOf4.class.equals(Double.class) || WalletDataOneOf4.class.equals(Boolean.class) || WalletDataOneOf4.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf4.class.equals(Integer.class) || WalletDataOneOf4.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf4.class.equals(Float.class) || WalletDataOneOf4.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf4.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf4.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf4.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf4'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf4'", e);
            }

            // deserialize WalletDataOneOf5
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf5.class.equals(Integer.class) || WalletDataOneOf5.class.equals(Long.class) || WalletDataOneOf5.class.equals(Float.class) || WalletDataOneOf5.class.equals(Double.class) || WalletDataOneOf5.class.equals(Boolean.class) || WalletDataOneOf5.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf5.class.equals(Integer.class) || WalletDataOneOf5.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf5.class.equals(Float.class) || WalletDataOneOf5.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf5.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf5.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf5.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf5'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf5'", e);
            }

            // deserialize WalletDataOneOf6
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf6.class.equals(Integer.class) || WalletDataOneOf6.class.equals(Long.class) || WalletDataOneOf6.class.equals(Float.class) || WalletDataOneOf6.class.equals(Double.class) || WalletDataOneOf6.class.equals(Boolean.class) || WalletDataOneOf6.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf6.class.equals(Integer.class) || WalletDataOneOf6.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf6.class.equals(Float.class) || WalletDataOneOf6.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf6.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf6.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf6.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf6'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf6'", e);
            }

            // deserialize WalletDataOneOf7
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf7.class.equals(Integer.class) || WalletDataOneOf7.class.equals(Long.class) || WalletDataOneOf7.class.equals(Float.class) || WalletDataOneOf7.class.equals(Double.class) || WalletDataOneOf7.class.equals(Boolean.class) || WalletDataOneOf7.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf7.class.equals(Integer.class) || WalletDataOneOf7.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf7.class.equals(Float.class) || WalletDataOneOf7.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf7.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf7.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf7.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf7'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf7'", e);
            }

            // deserialize WalletDataOneOf8
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf8.class.equals(Integer.class) || WalletDataOneOf8.class.equals(Long.class) || WalletDataOneOf8.class.equals(Float.class) || WalletDataOneOf8.class.equals(Double.class) || WalletDataOneOf8.class.equals(Boolean.class) || WalletDataOneOf8.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf8.class.equals(Integer.class) || WalletDataOneOf8.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf8.class.equals(Float.class) || WalletDataOneOf8.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf8.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf8.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf8.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf8'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf8'", e);
            }

            // deserialize WalletDataOneOf9
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (WalletDataOneOf9.class.equals(Integer.class) || WalletDataOneOf9.class.equals(Long.class) || WalletDataOneOf9.class.equals(Float.class) || WalletDataOneOf9.class.equals(Double.class) || WalletDataOneOf9.class.equals(Boolean.class) || WalletDataOneOf9.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((WalletDataOneOf9.class.equals(Integer.class) || WalletDataOneOf9.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((WalletDataOneOf9.class.equals(Float.class) || WalletDataOneOf9.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (WalletDataOneOf9.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (WalletDataOneOf9.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(WalletDataOneOf9.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'WalletDataOneOf9'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'WalletDataOneOf9'", e);
            }

            if (match == 1) {
                WalletData ret = new WalletData();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for WalletData: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public WalletData getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "WalletData cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public WalletData() {
        super("oneOf", Boolean.FALSE);
    }

    public WalletData(WalletDataOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf10 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf11 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf12 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf13 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf14 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf15 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf16 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf17 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf18 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf19 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf20 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf21 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf22 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf23 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf24 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf25 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf26 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf27 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf4 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf5 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf6 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf7 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf8 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WalletData(WalletDataOneOf9 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("WalletDataOneOf", WalletDataOneOf.class);
        schemas.put("WalletDataOneOf1", WalletDataOneOf1.class);
        schemas.put("WalletDataOneOf10", WalletDataOneOf10.class);
        schemas.put("WalletDataOneOf11", WalletDataOneOf11.class);
        schemas.put("WalletDataOneOf12", WalletDataOneOf12.class);
        schemas.put("WalletDataOneOf13", WalletDataOneOf13.class);
        schemas.put("WalletDataOneOf14", WalletDataOneOf14.class);
        schemas.put("WalletDataOneOf15", WalletDataOneOf15.class);
        schemas.put("WalletDataOneOf16", WalletDataOneOf16.class);
        schemas.put("WalletDataOneOf17", WalletDataOneOf17.class);
        schemas.put("WalletDataOneOf18", WalletDataOneOf18.class);
        schemas.put("WalletDataOneOf19", WalletDataOneOf19.class);
        schemas.put("WalletDataOneOf2", WalletDataOneOf2.class);
        schemas.put("WalletDataOneOf20", WalletDataOneOf20.class);
        schemas.put("WalletDataOneOf21", WalletDataOneOf21.class);
        schemas.put("WalletDataOneOf22", WalletDataOneOf22.class);
        schemas.put("WalletDataOneOf23", WalletDataOneOf23.class);
        schemas.put("WalletDataOneOf24", WalletDataOneOf24.class);
        schemas.put("WalletDataOneOf25", WalletDataOneOf25.class);
        schemas.put("WalletDataOneOf26", WalletDataOneOf26.class);
        schemas.put("WalletDataOneOf27", WalletDataOneOf27.class);
        schemas.put("WalletDataOneOf3", WalletDataOneOf3.class);
        schemas.put("WalletDataOneOf4", WalletDataOneOf4.class);
        schemas.put("WalletDataOneOf5", WalletDataOneOf5.class);
        schemas.put("WalletDataOneOf6", WalletDataOneOf6.class);
        schemas.put("WalletDataOneOf7", WalletDataOneOf7.class);
        schemas.put("WalletDataOneOf8", WalletDataOneOf8.class);
        schemas.put("WalletDataOneOf9", WalletDataOneOf9.class);
        JSON.registerDescendants(WalletData.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return WalletData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(WalletDataOneOf.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf1.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf10.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf11.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf12.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf13.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf14.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf15.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf16.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf17.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf18.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf19.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf2.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf20.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf21.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf22.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf23.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf24.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf25.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf26.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf27.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf3.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf4.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf5.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf6.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf7.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf8.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(WalletDataOneOf9.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9
     *
     * @return The actual instance (WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf`. If the actual instance is not `WalletDataOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf`
     * @throws ClassCastException if the instance is not `WalletDataOneOf`
     */
    public WalletDataOneOf getWalletDataOneOf() throws ClassCastException {
        return (WalletDataOneOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf1`. If the actual instance is not `WalletDataOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf1`
     * @throws ClassCastException if the instance is not `WalletDataOneOf1`
     */
    public WalletDataOneOf1 getWalletDataOneOf1() throws ClassCastException {
        return (WalletDataOneOf1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf10`. If the actual instance is not `WalletDataOneOf10`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf10`
     * @throws ClassCastException if the instance is not `WalletDataOneOf10`
     */
    public WalletDataOneOf10 getWalletDataOneOf10() throws ClassCastException {
        return (WalletDataOneOf10)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf11`. If the actual instance is not `WalletDataOneOf11`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf11`
     * @throws ClassCastException if the instance is not `WalletDataOneOf11`
     */
    public WalletDataOneOf11 getWalletDataOneOf11() throws ClassCastException {
        return (WalletDataOneOf11)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf12`. If the actual instance is not `WalletDataOneOf12`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf12`
     * @throws ClassCastException if the instance is not `WalletDataOneOf12`
     */
    public WalletDataOneOf12 getWalletDataOneOf12() throws ClassCastException {
        return (WalletDataOneOf12)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf13`. If the actual instance is not `WalletDataOneOf13`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf13`
     * @throws ClassCastException if the instance is not `WalletDataOneOf13`
     */
    public WalletDataOneOf13 getWalletDataOneOf13() throws ClassCastException {
        return (WalletDataOneOf13)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf14`. If the actual instance is not `WalletDataOneOf14`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf14`
     * @throws ClassCastException if the instance is not `WalletDataOneOf14`
     */
    public WalletDataOneOf14 getWalletDataOneOf14() throws ClassCastException {
        return (WalletDataOneOf14)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf15`. If the actual instance is not `WalletDataOneOf15`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf15`
     * @throws ClassCastException if the instance is not `WalletDataOneOf15`
     */
    public WalletDataOneOf15 getWalletDataOneOf15() throws ClassCastException {
        return (WalletDataOneOf15)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf16`. If the actual instance is not `WalletDataOneOf16`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf16`
     * @throws ClassCastException if the instance is not `WalletDataOneOf16`
     */
    public WalletDataOneOf16 getWalletDataOneOf16() throws ClassCastException {
        return (WalletDataOneOf16)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf17`. If the actual instance is not `WalletDataOneOf17`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf17`
     * @throws ClassCastException if the instance is not `WalletDataOneOf17`
     */
    public WalletDataOneOf17 getWalletDataOneOf17() throws ClassCastException {
        return (WalletDataOneOf17)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf18`. If the actual instance is not `WalletDataOneOf18`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf18`
     * @throws ClassCastException if the instance is not `WalletDataOneOf18`
     */
    public WalletDataOneOf18 getWalletDataOneOf18() throws ClassCastException {
        return (WalletDataOneOf18)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf19`. If the actual instance is not `WalletDataOneOf19`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf19`
     * @throws ClassCastException if the instance is not `WalletDataOneOf19`
     */
    public WalletDataOneOf19 getWalletDataOneOf19() throws ClassCastException {
        return (WalletDataOneOf19)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf2`. If the actual instance is not `WalletDataOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf2`
     * @throws ClassCastException if the instance is not `WalletDataOneOf2`
     */
    public WalletDataOneOf2 getWalletDataOneOf2() throws ClassCastException {
        return (WalletDataOneOf2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf20`. If the actual instance is not `WalletDataOneOf20`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf20`
     * @throws ClassCastException if the instance is not `WalletDataOneOf20`
     */
    public WalletDataOneOf20 getWalletDataOneOf20() throws ClassCastException {
        return (WalletDataOneOf20)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf21`. If the actual instance is not `WalletDataOneOf21`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf21`
     * @throws ClassCastException if the instance is not `WalletDataOneOf21`
     */
    public WalletDataOneOf21 getWalletDataOneOf21() throws ClassCastException {
        return (WalletDataOneOf21)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf22`. If the actual instance is not `WalletDataOneOf22`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf22`
     * @throws ClassCastException if the instance is not `WalletDataOneOf22`
     */
    public WalletDataOneOf22 getWalletDataOneOf22() throws ClassCastException {
        return (WalletDataOneOf22)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf23`. If the actual instance is not `WalletDataOneOf23`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf23`
     * @throws ClassCastException if the instance is not `WalletDataOneOf23`
     */
    public WalletDataOneOf23 getWalletDataOneOf23() throws ClassCastException {
        return (WalletDataOneOf23)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf24`. If the actual instance is not `WalletDataOneOf24`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf24`
     * @throws ClassCastException if the instance is not `WalletDataOneOf24`
     */
    public WalletDataOneOf24 getWalletDataOneOf24() throws ClassCastException {
        return (WalletDataOneOf24)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf25`. If the actual instance is not `WalletDataOneOf25`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf25`
     * @throws ClassCastException if the instance is not `WalletDataOneOf25`
     */
    public WalletDataOneOf25 getWalletDataOneOf25() throws ClassCastException {
        return (WalletDataOneOf25)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf26`. If the actual instance is not `WalletDataOneOf26`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf26`
     * @throws ClassCastException if the instance is not `WalletDataOneOf26`
     */
    public WalletDataOneOf26 getWalletDataOneOf26() throws ClassCastException {
        return (WalletDataOneOf26)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf27`. If the actual instance is not `WalletDataOneOf27`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf27`
     * @throws ClassCastException if the instance is not `WalletDataOneOf27`
     */
    public WalletDataOneOf27 getWalletDataOneOf27() throws ClassCastException {
        return (WalletDataOneOf27)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf3`. If the actual instance is not `WalletDataOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf3`
     * @throws ClassCastException if the instance is not `WalletDataOneOf3`
     */
    public WalletDataOneOf3 getWalletDataOneOf3() throws ClassCastException {
        return (WalletDataOneOf3)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf4`. If the actual instance is not `WalletDataOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf4`
     * @throws ClassCastException if the instance is not `WalletDataOneOf4`
     */
    public WalletDataOneOf4 getWalletDataOneOf4() throws ClassCastException {
        return (WalletDataOneOf4)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf5`. If the actual instance is not `WalletDataOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf5`
     * @throws ClassCastException if the instance is not `WalletDataOneOf5`
     */
    public WalletDataOneOf5 getWalletDataOneOf5() throws ClassCastException {
        return (WalletDataOneOf5)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf6`. If the actual instance is not `WalletDataOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf6`
     * @throws ClassCastException if the instance is not `WalletDataOneOf6`
     */
    public WalletDataOneOf6 getWalletDataOneOf6() throws ClassCastException {
        return (WalletDataOneOf6)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf7`. If the actual instance is not `WalletDataOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf7`
     * @throws ClassCastException if the instance is not `WalletDataOneOf7`
     */
    public WalletDataOneOf7 getWalletDataOneOf7() throws ClassCastException {
        return (WalletDataOneOf7)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf8`. If the actual instance is not `WalletDataOneOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf8`
     * @throws ClassCastException if the instance is not `WalletDataOneOf8`
     */
    public WalletDataOneOf8 getWalletDataOneOf8() throws ClassCastException {
        return (WalletDataOneOf8)super.getActualInstance();
    }

    /**
     * Get the actual instance of `WalletDataOneOf9`. If the actual instance is not `WalletDataOneOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WalletDataOneOf9`
     * @throws ClassCastException if the instance is not `WalletDataOneOf9`
     */
    public WalletDataOneOf9 getWalletDataOneOf9() throws ClassCastException {
        return (WalletDataOneOf9)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof WalletDataOneOf) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf1) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf1)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf2) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf2)getActualInstance()).toUrlQueryString(prefix + "one_of_2" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf3) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf3)getActualInstance()).toUrlQueryString(prefix + "one_of_3" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf4) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf4)getActualInstance()).toUrlQueryString(prefix + "one_of_4" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf5) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf5)getActualInstance()).toUrlQueryString(prefix + "one_of_5" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf6) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf6)getActualInstance()).toUrlQueryString(prefix + "one_of_6" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf7) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf7)getActualInstance()).toUrlQueryString(prefix + "one_of_7" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf8) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf8)getActualInstance()).toUrlQueryString(prefix + "one_of_8" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf9) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf9)getActualInstance()).toUrlQueryString(prefix + "one_of_9" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf10) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf10)getActualInstance()).toUrlQueryString(prefix + "one_of_10" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf11) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf11)getActualInstance()).toUrlQueryString(prefix + "one_of_11" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf12) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf12)getActualInstance()).toUrlQueryString(prefix + "one_of_12" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf13) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf13)getActualInstance()).toUrlQueryString(prefix + "one_of_13" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf14) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf14)getActualInstance()).toUrlQueryString(prefix + "one_of_14" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf15) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf15)getActualInstance()).toUrlQueryString(prefix + "one_of_15" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf16) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf16)getActualInstance()).toUrlQueryString(prefix + "one_of_16" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf17) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf17)getActualInstance()).toUrlQueryString(prefix + "one_of_17" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf18) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf18)getActualInstance()).toUrlQueryString(prefix + "one_of_18" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf19) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf19)getActualInstance()).toUrlQueryString(prefix + "one_of_19" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf20) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf20)getActualInstance()).toUrlQueryString(prefix + "one_of_20" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf21) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf21)getActualInstance()).toUrlQueryString(prefix + "one_of_21" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf22) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf22)getActualInstance()).toUrlQueryString(prefix + "one_of_22" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf23) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf23)getActualInstance()).toUrlQueryString(prefix + "one_of_23" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf24) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf24)getActualInstance()).toUrlQueryString(prefix + "one_of_24" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf25) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf25)getActualInstance()).toUrlQueryString(prefix + "one_of_25" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf26) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf26)getActualInstance()).toUrlQueryString(prefix + "one_of_26" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof WalletDataOneOf27) {
        if (getActualInstance() != null) {
          joiner.add(((WalletDataOneOf27)getActualInstance()).toUrlQueryString(prefix + "one_of_27" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

