/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.RefundListRequest;
import com.hyperswitch.client.model.RefundListResponse;
import com.hyperswitch.client.model.RefundRequest;
import com.hyperswitch.client.model.RefundResponse;
import com.hyperswitch.client.model.RefundUpdateRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class RefundsApi extends BaseApi {

  public RefundsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public RefundsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Refunds - Create
   * Creates a refund against an already processed payment. In case of some processors, you can even opt to refund only a partial amount multiple times until the original charge amount has been refunded
   * @param refundRequest  (required)
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse createARefund(RefundRequest refundRequest) throws ApiException {
    return this.createARefund(refundRequest, Collections.emptyMap());
  }


  /**
   * Refunds - Create
   * Creates a refund against an already processed payment. In case of some processors, you can even opt to refund only a partial amount multiple times until the original charge amount has been refunded
   * @param refundRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse createARefund(RefundRequest refundRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundRequest;
    
    // verify the required parameter 'refundRequest' is set
    if (refundRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'refundRequest' when calling createARefund");
    }
    
    // create path and map variables
    String localVarPath = "/refunds";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RefundResponse> localVarReturnType = new TypeReference<RefundResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refunds - List
   * Lists all the refunds associated with the merchant or a payment_id if payment_id is not provided
   * @param refundListRequest  (required)
   * @return RefundListResponse
   * @throws ApiException if fails to make API call
   */
  public RefundListResponse listAllRefunds(RefundListRequest refundListRequest) throws ApiException {
    return this.listAllRefunds(refundListRequest, Collections.emptyMap());
  }


  /**
   * Refunds - List
   * Lists all the refunds associated with the merchant or a payment_id if payment_id is not provided
   * @param refundListRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundListResponse
   * @throws ApiException if fails to make API call
   */
  public RefundListResponse listAllRefunds(RefundListRequest refundListRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundListRequest;
    
    // verify the required parameter 'refundListRequest' is set
    if (refundListRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'refundListRequest' when calling listAllRefunds");
    }
    
    // create path and map variables
    String localVarPath = "/refunds/list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RefundListResponse> localVarReturnType = new TypeReference<RefundListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refunds - Retrieve
   * Retrieves a Refund. This may be used to get the status of a previously initiated refund
   * @param refundId The identifier for refund (required)
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse retrieveARefund(String refundId) throws ApiException {
    return this.retrieveARefund(refundId, Collections.emptyMap());
  }


  /**
   * Refunds - Retrieve
   * Retrieves a Refund. This may be used to get the status of a previously initiated refund
   * @param refundId The identifier for refund (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse retrieveARefund(String refundId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'refundId' is set
    if (refundId == null) {
      throw new ApiException(400, "Missing the required parameter 'refundId' when calling retrieveARefund");
    }
    
    // create path and map variables
    String localVarPath = "/refunds/{refund_id}"
      .replaceAll("\\{" + "refund_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(refundId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RefundResponse> localVarReturnType = new TypeReference<RefundResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refunds - Update
   * Updates the properties of a Refund object. This API can be used to attach a reason for the refund or metadata fields
   * @param refundId The identifier for refund (required)
   * @param refundUpdateRequest  (required)
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse updateARefund(String refundId, RefundUpdateRequest refundUpdateRequest) throws ApiException {
    return this.updateARefund(refundId, refundUpdateRequest, Collections.emptyMap());
  }


  /**
   * Refunds - Update
   * Updates the properties of a Refund object. This API can be used to attach a reason for the refund or metadata fields
   * @param refundId The identifier for refund (required)
   * @param refundUpdateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundResponse
   * @throws ApiException if fails to make API call
   */
  public RefundResponse updateARefund(String refundId, RefundUpdateRequest refundUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundUpdateRequest;
    
    // verify the required parameter 'refundId' is set
    if (refundId == null) {
      throw new ApiException(400, "Missing the required parameter 'refundId' when calling updateARefund");
    }
    
    // verify the required parameter 'refundUpdateRequest' is set
    if (refundUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'refundUpdateRequest' when calling updateARefund");
    }
    
    // create path and map variables
    String localVarPath = "/refunds/{refund_id}"
      .replaceAll("\\{" + "refund_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(refundId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RefundResponse> localVarReturnType = new TypeReference<RefundResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
