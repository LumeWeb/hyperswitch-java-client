/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.Currency;
import com.hyperswitch.client.model.CustomerDefaultPaymentMethodResponse;
import com.hyperswitch.client.model.CustomerPaymentMethodsListResponse;
import com.hyperswitch.client.model.PaymentMethodCreate;
import com.hyperswitch.client.model.PaymentMethodDeleteResponse;
import com.hyperswitch.client.model.PaymentMethodListResponse;
import com.hyperswitch.client.model.PaymentMethodResponse;
import com.hyperswitch.client.model.PaymentMethodUpdate;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PaymentMethodsApi extends BaseApi {

  public PaymentMethodsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public PaymentMethodsApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * PaymentMethods - Create
   * Creates and stores a payment method against a customer. In case of cards, this API should be used only by PCI compliant merchants.
   * @param paymentMethodCreate  (required)
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse createAPaymentMethod(PaymentMethodCreate paymentMethodCreate) throws ApiException {
    return this.createAPaymentMethod(paymentMethodCreate, Collections.emptyMap());
  }


  /**
   * PaymentMethods - Create
   * Creates and stores a payment method against a customer. In case of cards, this API should be used only by PCI compliant merchants.
   * @param paymentMethodCreate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse createAPaymentMethod(PaymentMethodCreate paymentMethodCreate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentMethodCreate;
    
    // verify the required parameter 'paymentMethodCreate' is set
    if (paymentMethodCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentMethodCreate' when calling createAPaymentMethod");
    }
    
    // create path and map variables
    String localVarPath = "/payment_methods";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentMethodResponse> localVarReturnType = new TypeReference<PaymentMethodResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payment Method - Delete
   * Deletes a payment method of a customer.
   * @param methodId The unique identifier for the Payment Method (required)
   * @return PaymentMethodDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodDeleteResponse deleteAPaymentMethod(String methodId) throws ApiException {
    return this.deleteAPaymentMethod(methodId, Collections.emptyMap());
  }


  /**
   * Payment Method - Delete
   * Deletes a payment method of a customer.
   * @param methodId The unique identifier for the Payment Method (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentMethodDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodDeleteResponse deleteAPaymentMethod(String methodId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'methodId' is set
    if (methodId == null) {
      throw new ApiException(400, "Missing the required parameter 'methodId' when calling deleteAPaymentMethod");
    }
    
    // create path and map variables
    String localVarPath = "/payment_methods/{method_id}"
      .replaceAll("\\{" + "method_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(methodId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentMethodDeleteResponse> localVarReturnType = new TypeReference<PaymentMethodDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List payment methods for a Customer
   * Lists all the applicable payment methods for a particular Customer ID.
   * @param customerId The unique identifier for the customer account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @return CustomerPaymentMethodsListResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerPaymentMethodsListResponse listAllPaymentMethodsForACustomer(String customerId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled) throws ApiException {
    return this.listAllPaymentMethodsForACustomer(customerId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled, Collections.emptyMap());
  }


  /**
   * List payment methods for a Customer
   * Lists all the applicable payment methods for a particular Customer ID.
   * @param customerId The unique identifier for the customer account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerPaymentMethodsListResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerPaymentMethodsListResponse listAllPaymentMethodsForACustomer(String customerId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'acceptedCountry' is set
    if (acceptedCountry == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCountry' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'acceptedCurrency' is set
    if (acceptedCurrency == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCurrency' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'minimumAmount' is set
    if (minimumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'minimumAmount' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'maximumAmount' is set
    if (maximumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'maximumAmount' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'recurringPaymentEnabled' is set
    if (recurringPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'recurringPaymentEnabled' when calling listAllPaymentMethodsForACustomer");
    }
    
    // verify the required parameter 'installmentPaymentEnabled' is set
    if (installmentPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'installmentPaymentEnabled' when calling listAllPaymentMethodsForACustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customer_id}/payment_methods"
      .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(customerId)))
      .replaceAll("\\{" + "accepted_currency" + "\\}", apiClient.escapeString(apiClient.parameterToString(acceptedCurrency)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "accepted_country", acceptedCountry));
    localVarQueryParams.addAll(apiClient.parameterToPair("minimum_amount", minimumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("maximum_amount", maximumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("recurring_payment_enabled", recurringPaymentEnabled));
    localVarQueryParams.addAll(apiClient.parameterToPair("installment_payment_enabled", installmentPaymentEnabled));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<CustomerPaymentMethodsListResponse> localVarReturnType = new TypeReference<CustomerPaymentMethodsListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List payment methods for a Merchant
   * Lists the applicable payment methods for a particular Merchant ID. Use the client secret and publishable key authorization to list all relevant payment methods of the merchant for the payment corresponding to the client secret.
   * @param accountId The unique identifier for the merchant account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @return PaymentMethodListResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodListResponse listAllPaymentMethodsForAMerchant(String accountId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled) throws ApiException {
    return this.listAllPaymentMethodsForAMerchant(accountId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled, Collections.emptyMap());
  }


  /**
   * List payment methods for a Merchant
   * Lists the applicable payment methods for a particular Merchant ID. Use the client secret and publishable key authorization to list all relevant payment methods of the merchant for the payment corresponding to the client secret.
   * @param accountId The unique identifier for the merchant account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentMethodListResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodListResponse listAllPaymentMethodsForAMerchant(String accountId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'acceptedCountry' is set
    if (acceptedCountry == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCountry' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'acceptedCurrency' is set
    if (acceptedCurrency == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCurrency' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'minimumAmount' is set
    if (minimumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'minimumAmount' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'maximumAmount' is set
    if (maximumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'maximumAmount' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'recurringPaymentEnabled' is set
    if (recurringPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'recurringPaymentEnabled' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // verify the required parameter 'installmentPaymentEnabled' is set
    if (installmentPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'installmentPaymentEnabled' when calling listAllPaymentMethodsForAMerchant");
    }
    
    // create path and map variables
    String localVarPath = "/account/payment_methods"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(accountId)))
      .replaceAll("\\{" + "accepted_currency" + "\\}", apiClient.escapeString(apiClient.parameterToString(acceptedCurrency)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "accepted_country", acceptedCountry));
    localVarQueryParams.addAll(apiClient.parameterToPair("minimum_amount", minimumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("maximum_amount", maximumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("recurring_payment_enabled", recurringPaymentEnabled));
    localVarQueryParams.addAll(apiClient.parameterToPair("installment_payment_enabled", installmentPaymentEnabled));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<PaymentMethodListResponse> localVarReturnType = new TypeReference<PaymentMethodListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List customer saved payment methods for a Payment
   * Lists all the applicable payment methods for a particular payment tied to the &#x60;client_secret&#x60;.
   * @param clientSecret A secret known only to your client and the authorization server. Used for client side authentication (required)
   * @param customerId The unique identifier for the customer account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @return CustomerPaymentMethodsListResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerPaymentMethodsListResponse listCustomerPaymentMethods(String clientSecret, String customerId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled) throws ApiException {
    return this.listCustomerPaymentMethods(clientSecret, customerId, acceptedCountry, acceptedCurrency, minimumAmount, maximumAmount, recurringPaymentEnabled, installmentPaymentEnabled, Collections.emptyMap());
  }


  /**
   * List customer saved payment methods for a Payment
   * Lists all the applicable payment methods for a particular payment tied to the &#x60;client_secret&#x60;.
   * @param clientSecret A secret known only to your client and the authorization server. Used for client side authentication (required)
   * @param customerId The unique identifier for the customer account (required)
   * @param acceptedCountry The two-letter ISO currency code (required)
   * @param acceptedCurrency The three-letter ISO currency code (required)
   * @param minimumAmount The minimum amount accepted for processing by the particular payment method. (required)
   * @param maximumAmount The maximum amount accepted for processing by the particular payment method. (required)
   * @param recurringPaymentEnabled Indicates whether the payment method is eligible for recurring payments (required)
   * @param installmentPaymentEnabled Indicates whether the payment method is eligible for installment payments (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerPaymentMethodsListResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerPaymentMethodsListResponse listCustomerPaymentMethods(String clientSecret, String customerId, List<String> acceptedCountry, List<Currency> acceptedCurrency, Long minimumAmount, Long maximumAmount, Boolean recurringPaymentEnabled, Boolean installmentPaymentEnabled, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'clientSecret' is set
    if (clientSecret == null) {
      throw new ApiException(400, "Missing the required parameter 'clientSecret' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'acceptedCountry' is set
    if (acceptedCountry == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCountry' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'acceptedCurrency' is set
    if (acceptedCurrency == null) {
      throw new ApiException(400, "Missing the required parameter 'acceptedCurrency' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'minimumAmount' is set
    if (minimumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'minimumAmount' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'maximumAmount' is set
    if (maximumAmount == null) {
      throw new ApiException(400, "Missing the required parameter 'maximumAmount' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'recurringPaymentEnabled' is set
    if (recurringPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'recurringPaymentEnabled' when calling listCustomerPaymentMethods");
    }
    
    // verify the required parameter 'installmentPaymentEnabled' is set
    if (installmentPaymentEnabled == null) {
      throw new ApiException(400, "Missing the required parameter 'installmentPaymentEnabled' when calling listCustomerPaymentMethods");
    }
    
    // create path and map variables
    String localVarPath = "/customers/payment_methods"
      .replaceAll("\\{" + "client-secret" + "\\}", apiClient.escapeString(apiClient.parameterToString(clientSecret)))
      .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(customerId)))
      .replaceAll("\\{" + "accepted_currency" + "\\}", apiClient.escapeString(apiClient.parameterToString(acceptedCurrency)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "accepted_country", acceptedCountry));
    localVarQueryParams.addAll(apiClient.parameterToPair("minimum_amount", minimumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("maximum_amount", maximumAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("recurring_payment_enabled", recurringPaymentEnabled));
    localVarQueryParams.addAll(apiClient.parameterToPair("installment_payment_enabled", installmentPaymentEnabled));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key" };

    TypeReference<CustomerPaymentMethodsListResponse> localVarReturnType = new TypeReference<CustomerPaymentMethodsListResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payment Method - Retrieve
   * Retrieves a payment method of a customer.
   * @param methodId The unique identifier for the Payment Method (required)
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse retrieveAPaymentMethod(String methodId) throws ApiException {
    return this.retrieveAPaymentMethod(methodId, Collections.emptyMap());
  }


  /**
   * Payment Method - Retrieve
   * Retrieves a payment method of a customer.
   * @param methodId The unique identifier for the Payment Method (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse retrieveAPaymentMethod(String methodId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'methodId' is set
    if (methodId == null) {
      throw new ApiException(400, "Missing the required parameter 'methodId' when calling retrieveAPaymentMethod");
    }
    
    // create path and map variables
    String localVarPath = "/payment_methods/{method_id}"
      .replaceAll("\\{" + "method_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(methodId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<PaymentMethodResponse> localVarReturnType = new TypeReference<PaymentMethodResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payment Method - Set Default Payment Method for Customer
   * Set the Payment Method as Default for the Customer.
   * @param customerId The unique identifier for the Customer (required)
   * @param paymentMethodId The unique identifier for the Payment Method (required)
   * @return CustomerDefaultPaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerDefaultPaymentMethodResponse setThePaymentMethodAsDefault(String customerId, String paymentMethodId) throws ApiException {
    return this.setThePaymentMethodAsDefault(customerId, paymentMethodId, Collections.emptyMap());
  }


  /**
   * Payment Method - Set Default Payment Method for Customer
   * Set the Payment Method as Default for the Customer.
   * @param customerId The unique identifier for the Customer (required)
   * @param paymentMethodId The unique identifier for the Payment Method (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerDefaultPaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerDefaultPaymentMethodResponse setThePaymentMethodAsDefault(String customerId, String paymentMethodId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling setThePaymentMethodAsDefault");
    }
    
    // verify the required parameter 'paymentMethodId' is set
    if (paymentMethodId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentMethodId' when calling setThePaymentMethodAsDefault");
    }
    
    // create path and map variables
    String localVarPath = "/{customer_id}/payment_methods/{payment_method_id}/default"
      .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(customerId)))
      .replaceAll("\\{" + "payment_method_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(paymentMethodId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ephemeral_key" };

    TypeReference<CustomerDefaultPaymentMethodResponse> localVarReturnType = new TypeReference<CustomerDefaultPaymentMethodResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Payment Method - Update
   * Update an existing payment method of a customer. This API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments.
   * @param methodId The unique identifier for the Payment Method (required)
   * @param paymentMethodUpdate  (required)
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse updateAPaymentMethod(String methodId, PaymentMethodUpdate paymentMethodUpdate) throws ApiException {
    return this.updateAPaymentMethod(methodId, paymentMethodUpdate, Collections.emptyMap());
  }


  /**
   * Payment Method - Update
   * Update an existing payment method of a customer. This API is useful for use cases such as updating the card number for expired cards to prevent discontinuity in recurring payments.
   * @param methodId The unique identifier for the Payment Method (required)
   * @param paymentMethodUpdate  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return PaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentMethodResponse updateAPaymentMethod(String methodId, PaymentMethodUpdate paymentMethodUpdate, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = paymentMethodUpdate;
    
    // verify the required parameter 'methodId' is set
    if (methodId == null) {
      throw new ApiException(400, "Missing the required parameter 'methodId' when calling updateAPaymentMethod");
    }
    
    // verify the required parameter 'paymentMethodUpdate' is set
    if (paymentMethodUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentMethodUpdate' when calling updateAPaymentMethod");
    }
    
    // create path and map variables
    String localVarPath = "/payment_methods/{method_id}/update"
      .replaceAll("\\{" + "method_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(methodId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    TypeReference<PaymentMethodResponse> localVarReturnType = new TypeReference<PaymentMethodResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "publishable_key", "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
