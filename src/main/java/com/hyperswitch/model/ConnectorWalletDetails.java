/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConnectorWalletDetails
 */
@JsonPropertyOrder({
  ConnectorWalletDetails.JSON_PROPERTY_APPLE_PAY_COMBINED,
  ConnectorWalletDetails.JSON_PROPERTY_APPLE_PAY,
  ConnectorWalletDetails.JSON_PROPERTY_SAMSUNG_PAY,
  ConnectorWalletDetails.JSON_PROPERTY_PAZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ConnectorWalletDetails {
  public static final String JSON_PROPERTY_APPLE_PAY_COMBINED = "apple_pay_combined";
  private JsonNullable<Object> applePayCombined = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_APPLE_PAY = "apple_pay";
  private JsonNullable<Object> applePay = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_SAMSUNG_PAY = "samsung_pay";
  private JsonNullable<Object> samsungPay = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_PAZE = "paze";
  private JsonNullable<Object> paze = JsonNullable.<Object>undefined();

  public ConnectorWalletDetails() {
  }

  public ConnectorWalletDetails applePayCombined(@javax.annotation.Nullable Object applePayCombined) {
    this.applePayCombined = JsonNullable.<Object>of(applePayCombined);
    
    return this;
  }

  /**
   * This field contains the Apple Pay certificates and credentials for iOS and Web Apple Pay flow
   * @return applePayCombined
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getApplePayCombined() {
        return applePayCombined.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLE_PAY_COMBINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getApplePayCombined_JsonNullable() {
    return applePayCombined;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLE_PAY_COMBINED)
  public void setApplePayCombined_JsonNullable(JsonNullable<Object> applePayCombined) {
    this.applePayCombined = applePayCombined;
  }

  public void setApplePayCombined(@javax.annotation.Nullable Object applePayCombined) {
    this.applePayCombined = JsonNullable.<Object>of(applePayCombined);
  }


  public ConnectorWalletDetails applePay(@javax.annotation.Nullable Object applePay) {
    this.applePay = JsonNullable.<Object>of(applePay);
    
    return this;
  }

  /**
   * This field is for our legacy Apple Pay flow that contains the Apple Pay certificates and credentials for only iOS Apple Pay flow
   * @return applePay
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getApplePay() {
        return applePay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_APPLE_PAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getApplePay_JsonNullable() {
    return applePay;
  }
  
  @JsonProperty(JSON_PROPERTY_APPLE_PAY)
  public void setApplePay_JsonNullable(JsonNullable<Object> applePay) {
    this.applePay = applePay;
  }

  public void setApplePay(@javax.annotation.Nullable Object applePay) {
    this.applePay = JsonNullable.<Object>of(applePay);
  }


  public ConnectorWalletDetails samsungPay(@javax.annotation.Nullable Object samsungPay) {
    this.samsungPay = JsonNullable.<Object>of(samsungPay);
    
    return this;
  }

  /**
   * This field contains the Samsung Pay certificates and credentials
   * @return samsungPay
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getSamsungPay() {
        return samsungPay.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SAMSUNG_PAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getSamsungPay_JsonNullable() {
    return samsungPay;
  }
  
  @JsonProperty(JSON_PROPERTY_SAMSUNG_PAY)
  public void setSamsungPay_JsonNullable(JsonNullable<Object> samsungPay) {
    this.samsungPay = samsungPay;
  }

  public void setSamsungPay(@javax.annotation.Nullable Object samsungPay) {
    this.samsungPay = JsonNullable.<Object>of(samsungPay);
  }


  public ConnectorWalletDetails paze(@javax.annotation.Nullable Object paze) {
    this.paze = JsonNullable.<Object>of(paze);
    
    return this;
  }

  /**
   * This field contains the Paze certificates and credentials
   * @return paze
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getPaze() {
        return paze.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getPaze_JsonNullable() {
    return paze;
  }
  
  @JsonProperty(JSON_PROPERTY_PAZE)
  public void setPaze_JsonNullable(JsonNullable<Object> paze) {
    this.paze = paze;
  }

  public void setPaze(@javax.annotation.Nullable Object paze) {
    this.paze = JsonNullable.<Object>of(paze);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorWalletDetails connectorWalletDetails = (ConnectorWalletDetails) o;
    return equalsNullable(this.applePayCombined, connectorWalletDetails.applePayCombined) &&
        equalsNullable(this.applePay, connectorWalletDetails.applePay) &&
        equalsNullable(this.samsungPay, connectorWalletDetails.samsungPay) &&
        equalsNullable(this.paze, connectorWalletDetails.paze);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(applePayCombined), hashCodeNullable(applePay), hashCodeNullable(samsungPay), hashCodeNullable(paze));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorWalletDetails {\n");
    sb.append("    applePayCombined: ").append(toIndentedString(applePayCombined)).append("\n");
    sb.append("    applePay: ").append(toIndentedString(applePay)).append("\n");
    sb.append("    samsungPay: ").append(toIndentedString(samsungPay)).append("\n");
    sb.append("    paze: ").append(toIndentedString(paze)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

