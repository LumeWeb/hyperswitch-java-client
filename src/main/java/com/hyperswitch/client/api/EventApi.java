/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.EventListItemResponse;
import com.hyperswitch.client.model.EventRetrieveResponse;
import java.time.OffsetDateTime;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventApi {


  private ApiClient apiClient;

  public EventApi() {
    this(Configuration.getDefaultApiClient());
  }

  public EventApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Events - Delivery Attempt List
   * List all delivery attempts for the specified Event.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param eventId The unique identifier for the Event (required)
   * @return List&lt;EventRetrieveResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<EventRetrieveResponse> listAllDeliveryAttemptsForAnEvent(String merchantId, String eventId) throws ApiException {
    return this.listAllDeliveryAttemptsForAnEvent(merchantId, eventId, Collections.emptyMap());
  }


  /**
   * Events - Delivery Attempt List
   * List all delivery attempts for the specified Event.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param eventId The unique identifier for the Event (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;EventRetrieveResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<EventRetrieveResponse> listAllDeliveryAttemptsForAnEvent(String merchantId, String eventId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling listAllDeliveryAttemptsForAnEvent");
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling listAllDeliveryAttemptsForAnEvent");
    }
    
    // create path and map variables
    String localVarPath = "/events/{merchant_id}/{event_id}/attempts"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<List<EventRetrieveResponse>> localVarReturnType = new TypeReference<List<EventRetrieveResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Events - List
   * List all Events associated with a Merchant Account or Profile.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param createdAfter Only include Events created after the specified time. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param createdBefore Only include Events created before the specified time. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param limit The maximum number of Events to include in the response. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param offset The number of Events to skip when retrieving the list of Events.                            Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param objectId Only include Events associated with the specified object (Payment Intent ID, Refund ID, etc.). Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param profileId Only include Events associated with the Profile identified by the specified Profile ID. (optional)
   * @return List&lt;EventListItemResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<EventListItemResponse> listAllEventsAssociatedWithAMerchantAccountOrProfile(String merchantId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Long limit, Long offset, String objectId, String profileId) throws ApiException {
    return this.listAllEventsAssociatedWithAMerchantAccountOrProfile(merchantId, createdAfter, createdBefore, limit, offset, objectId, profileId, Collections.emptyMap());
  }


  /**
   * Events - List
   * List all Events associated with a Merchant Account or Profile.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param createdAfter Only include Events created after the specified time. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param createdBefore Only include Events created before the specified time. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param limit The maximum number of Events to include in the response. Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param offset The number of Events to skip when retrieving the list of Events.                            Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param objectId Only include Events associated with the specified object (Payment Intent ID, Refund ID, etc.). Either only &#x60;object_id&#x60; must be specified, or one or more of &#x60;created_after&#x60;, &#x60;created_before&#x60;, &#x60;limit&#x60; and &#x60;offset&#x60; must be specified. (optional)
   * @param profileId Only include Events associated with the Profile identified by the specified Profile ID. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;EventListItemResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<EventListItemResponse> listAllEventsAssociatedWithAMerchantAccountOrProfile(String merchantId, OffsetDateTime createdAfter, OffsetDateTime createdBefore, Long limit, Long offset, String objectId, String profileId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling listAllEventsAssociatedWithAMerchantAccountOrProfile");
    }
    
    // create path and map variables
    String localVarPath = "/events/{merchant_id}"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("created_after", createdAfter));
    localVarQueryParams.addAll(apiClient.parameterToPair("created_before", createdBefore));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("object_id", objectId));
    localVarQueryParams.addAll(apiClient.parameterToPair("profile_id", profileId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<List<EventListItemResponse>> localVarReturnType = new TypeReference<List<EventListItemResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Events - Manual Retry
   * Manually retry the delivery of the specified Event.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param eventId The unique identifier for the Event (required)
   * @return EventRetrieveResponse
   * @throws ApiException if fails to make API call
   */
  public EventRetrieveResponse manuallyRetryTheDeliveryOfAnEvent(String merchantId, String eventId) throws ApiException {
    return this.manuallyRetryTheDeliveryOfAnEvent(merchantId, eventId, Collections.emptyMap());
  }


  /**
   * Events - Manual Retry
   * Manually retry the delivery of the specified Event.
   * @param merchantId The unique identifier for the Merchant Account. (required)
   * @param eventId The unique identifier for the Event (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return EventRetrieveResponse
   * @throws ApiException if fails to make API call
   */
  public EventRetrieveResponse manuallyRetryTheDeliveryOfAnEvent(String merchantId, String eventId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling manuallyRetryTheDeliveryOfAnEvent");
    }
    
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling manuallyRetryTheDeliveryOfAnEvent");
    }
    
    // create path and map variables
    String localVarPath = "/events/{merchant_id}/{event_id}/retry"
      .replaceAll("\\{" + "merchant_id" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "event_id" + "\\}", apiClient.escapeString(eventId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<EventRetrieveResponse> localVarReturnType = new TypeReference<EventRetrieveResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
