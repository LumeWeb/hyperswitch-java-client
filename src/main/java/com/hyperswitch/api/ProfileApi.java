/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.api;

import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiResponse;
import com.hyperswitch.client.Pair;

import com.hyperswitch.model.LinkedRoutingConfigRetrieveResponse;
import com.hyperswitch.model.ProfileCreate;
import com.hyperswitch.model.ProfileResponse;
import com.hyperswitch.model.RoutableConnectorChoice;
import com.hyperswitch.model.RoutingAlgorithmId;
import com.hyperswitch.model.RoutingDictionaryRecord;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ProfileApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ProfileApi() {
    this(new ApiClient());
  }

  public ProfileApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Profile - Activate routing algorithm
   * Activates a routing algorithm under a profile
   * @param id The unique identifier for the profile (required)
   * @param routingAlgorithmId  (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord activatesARoutingAlgorithmUnderAProfile(String id, RoutingAlgorithmId routingAlgorithmId) throws ApiException {
    ApiResponse<RoutingDictionaryRecord> localVarResponse = activatesARoutingAlgorithmUnderAProfileWithHttpInfo(id, routingAlgorithmId);
    return localVarResponse.getData();
  }

  /**
   * Profile - Activate routing algorithm
   * Activates a routing algorithm under a profile
   * @param id The unique identifier for the profile (required)
   * @param routingAlgorithmId  (required)
   * @return ApiResponse&lt;RoutingDictionaryRecord&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RoutingDictionaryRecord> activatesARoutingAlgorithmUnderAProfileWithHttpInfo(String id, RoutingAlgorithmId routingAlgorithmId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = activatesARoutingAlgorithmUnderAProfileRequestBuilder(id, routingAlgorithmId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("activatesARoutingAlgorithmUnderAProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<RoutingDictionaryRecord>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<RoutingDictionaryRecord>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<RoutingDictionaryRecord>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder activatesARoutingAlgorithmUnderAProfileRequestBuilder(String id, RoutingAlgorithmId routingAlgorithmId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling activatesARoutingAlgorithmUnderAProfile");
    }
    // verify the required parameter 'routingAlgorithmId' is set
    if (routingAlgorithmId == null) {
      throw new ApiException(400, "Missing the required parameter 'routingAlgorithmId' when calling activatesARoutingAlgorithmUnderAProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}/activate_routing_algorithm"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(routingAlgorithmId);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Create
   * Creates a new *profile* for a merchant
   * @param xMerchantId Merchant ID of the profile. (required)
   * @param profileCreate  (required)
   * @return ProfileResponse
   * @throws ApiException if fails to make API call
   */
  public ProfileResponse createAProfile(String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    ApiResponse<ProfileResponse> localVarResponse = createAProfileWithHttpInfo(xMerchantId, profileCreate);
    return localVarResponse.getData();
  }

  /**
   * Profile - Create
   * Creates a new *profile* for a merchant
   * @param xMerchantId Merchant ID of the profile. (required)
   * @param profileCreate  (required)
   * @return ApiResponse&lt;ProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProfileResponse> createAProfileWithHttpInfo(String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAProfileRequestBuilder(xMerchantId, profileCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ProfileResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ProfileResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ProfileResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAProfileRequestBuilder(String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    // verify the required parameter 'xMerchantId' is set
    if (xMerchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'xMerchantId' when calling createAProfile");
    }
    // verify the required parameter 'profileCreate' is set
    if (profileCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'profileCreate' when calling createAProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xMerchantId != null) {
      localVarRequestBuilder.header("X-Merchant-Id", xMerchantId.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(profileCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Deactivate routing algorithm
   * Deactivates a routing algorithm under a profile
   * @param id The unique identifier for the profile (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord deactivatesARoutingAlgorithmUnderAProfile(String id) throws ApiException {
    ApiResponse<RoutingDictionaryRecord> localVarResponse = deactivatesARoutingAlgorithmUnderAProfileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Profile - Deactivate routing algorithm
   * Deactivates a routing algorithm under a profile
   * @param id The unique identifier for the profile (required)
   * @return ApiResponse&lt;RoutingDictionaryRecord&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RoutingDictionaryRecord> deactivatesARoutingAlgorithmUnderAProfileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deactivatesARoutingAlgorithmUnderAProfileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deactivatesARoutingAlgorithmUnderAProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<RoutingDictionaryRecord>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<RoutingDictionaryRecord>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<RoutingDictionaryRecord>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deactivatesARoutingAlgorithmUnderAProfileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deactivatesARoutingAlgorithmUnderAProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}/deactivate_routing_algorithm"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Retrieve
   * Retrieve existing *profile*
   * @param id The unique identifier for the profile (required)
   * @param xMerchantId Merchant ID of the profile. (required)
   * @return ProfileResponse
   * @throws ApiException if fails to make API call
   */
  public ProfileResponse retrieveAProfile(String id, String xMerchantId) throws ApiException {
    ApiResponse<ProfileResponse> localVarResponse = retrieveAProfileWithHttpInfo(id, xMerchantId);
    return localVarResponse.getData();
  }

  /**
   * Profile - Retrieve
   * Retrieve existing *profile*
   * @param id The unique identifier for the profile (required)
   * @param xMerchantId Merchant ID of the profile. (required)
   * @return ApiResponse&lt;ProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProfileResponse> retrieveAProfileWithHttpInfo(String id, String xMerchantId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveAProfileRequestBuilder(id, xMerchantId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveAProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ProfileResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ProfileResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ProfileResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveAProfileRequestBuilder(String id, String xMerchantId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveAProfile");
    }
    // verify the required parameter 'xMerchantId' is set
    if (xMerchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'xMerchantId' when calling retrieveAProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xMerchantId != null) {
      localVarRequestBuilder.header("X-Merchant-Id", xMerchantId.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Retrieve Active Routing Algorithm
   * Retrieve active routing algorithm under the profile
   * @param id The unique identifier for the profile (required)
   * @param limit The number of records of the algorithms to be returned (optional)
   * @param offset The record offset of the algorithm from which to start gathering the results (optional)
   * @return LinkedRoutingConfigRetrieveResponse
   * @throws ApiException if fails to make API call
   */
  public LinkedRoutingConfigRetrieveResponse retrieveTheActiveRoutingAlgorithmUnderTheProfile(String id, Integer limit, Integer offset) throws ApiException {
    ApiResponse<LinkedRoutingConfigRetrieveResponse> localVarResponse = retrieveTheActiveRoutingAlgorithmUnderTheProfileWithHttpInfo(id, limit, offset);
    return localVarResponse.getData();
  }

  /**
   * Profile - Retrieve Active Routing Algorithm
   * Retrieve active routing algorithm under the profile
   * @param id The unique identifier for the profile (required)
   * @param limit The number of records of the algorithms to be returned (optional)
   * @param offset The record offset of the algorithm from which to start gathering the results (optional)
   * @return ApiResponse&lt;LinkedRoutingConfigRetrieveResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LinkedRoutingConfigRetrieveResponse> retrieveTheActiveRoutingAlgorithmUnderTheProfileWithHttpInfo(String id, Integer limit, Integer offset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveTheActiveRoutingAlgorithmUnderTheProfileRequestBuilder(id, limit, offset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveTheActiveRoutingAlgorithmUnderTheProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<LinkedRoutingConfigRetrieveResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<LinkedRoutingConfigRetrieveResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<LinkedRoutingConfigRetrieveResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveTheActiveRoutingAlgorithmUnderTheProfileRequestBuilder(String id, Integer limit, Integer offset) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveTheActiveRoutingAlgorithmUnderTheProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}/routing_algorithm"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "limit";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParameterBaseName = "offset";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Retrieve Default Fallback Routing Algorithm
   * Retrieve the default fallback routing algorithm for the profile
   * @param id The unique identifier for the profile (required)
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> retrieveTheDefaultFallbackRoutingAlgorithmForTheProfile(String id) throws ApiException {
    ApiResponse<List<RoutableConnectorChoice>> localVarResponse = retrieveTheDefaultFallbackRoutingAlgorithmForTheProfileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Profile - Retrieve Default Fallback Routing Algorithm
   * Retrieve the default fallback routing algorithm for the profile
   * @param id The unique identifier for the profile (required)
   * @return ApiResponse&lt;List&lt;RoutableConnectorChoice&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RoutableConnectorChoice>> retrieveTheDefaultFallbackRoutingAlgorithmForTheProfileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveTheDefaultFallbackRoutingAlgorithmForTheProfileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveTheDefaultFallbackRoutingAlgorithmForTheProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<RoutableConnectorChoice>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<RoutableConnectorChoice>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<RoutableConnectorChoice>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveTheDefaultFallbackRoutingAlgorithmForTheProfileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveTheDefaultFallbackRoutingAlgorithmForTheProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}/fallback_routing"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Update
   * Update the *profile*
   * @param id The unique identifier for the profile (required)
   * @param xMerchantId Merchant ID of the profile. (required)
   * @param profileCreate  (required)
   * @return ProfileResponse
   * @throws ApiException if fails to make API call
   */
  public ProfileResponse updateAProfile(String id, String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    ApiResponse<ProfileResponse> localVarResponse = updateAProfileWithHttpInfo(id, xMerchantId, profileCreate);
    return localVarResponse.getData();
  }

  /**
   * Profile - Update
   * Update the *profile*
   * @param id The unique identifier for the profile (required)
   * @param xMerchantId Merchant ID of the profile. (required)
   * @param profileCreate  (required)
   * @return ApiResponse&lt;ProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProfileResponse> updateAProfileWithHttpInfo(String id, String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAProfileRequestBuilder(id, xMerchantId, profileCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ProfileResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ProfileResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ProfileResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAProfileRequestBuilder(String id, String xMerchantId, ProfileCreate profileCreate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAProfile");
    }
    // verify the required parameter 'xMerchantId' is set
    if (xMerchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'xMerchantId' when calling updateAProfile");
    }
    // verify the required parameter 'profileCreate' is set
    if (profileCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'profileCreate' when calling updateAProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xMerchantId != null) {
      localVarRequestBuilder.header("X-Merchant-Id", xMerchantId.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(profileCreate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Profile - Update Default Fallback Routing Algorithm
   * Update the default fallback routing algorithm for the profile
   * @param id The unique identifier for the profile (required)
   * @param routableConnectorChoice  (required)
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> updateTheDefaultFallbackRoutingAlgorithmForTheProfile(String id, List<RoutableConnectorChoice> routableConnectorChoice) throws ApiException {
    ApiResponse<List<RoutableConnectorChoice>> localVarResponse = updateTheDefaultFallbackRoutingAlgorithmForTheProfileWithHttpInfo(id, routableConnectorChoice);
    return localVarResponse.getData();
  }

  /**
   * Profile - Update Default Fallback Routing Algorithm
   * Update the default fallback routing algorithm for the profile
   * @param id The unique identifier for the profile (required)
   * @param routableConnectorChoice  (required)
   * @return ApiResponse&lt;List&lt;RoutableConnectorChoice&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RoutableConnectorChoice>> updateTheDefaultFallbackRoutingAlgorithmForTheProfileWithHttpInfo(String id, List<RoutableConnectorChoice> routableConnectorChoice) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTheDefaultFallbackRoutingAlgorithmForTheProfileRequestBuilder(id, routableConnectorChoice);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateTheDefaultFallbackRoutingAlgorithmForTheProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<RoutableConnectorChoice>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<RoutableConnectorChoice>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<RoutableConnectorChoice>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTheDefaultFallbackRoutingAlgorithmForTheProfileRequestBuilder(String id, List<RoutableConnectorChoice> routableConnectorChoice) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTheDefaultFallbackRoutingAlgorithmForTheProfile");
    }
    // verify the required parameter 'routableConnectorChoice' is set
    if (routableConnectorChoice == null) {
      throw new ApiException(400, "Missing the required parameter 'routableConnectorChoice' when calling updateTheDefaultFallbackRoutingAlgorithmForTheProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/profiles/{id}/fallback_routing"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(routableConnectorChoice);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
