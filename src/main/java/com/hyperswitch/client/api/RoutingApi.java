/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.DynamicRoutingFeatures;
import com.hyperswitch.client.model.LinkedRoutingConfigRetrieveResponse;
import com.hyperswitch.client.model.MerchantRoutingAlgorithm;
import com.hyperswitch.client.model.ProfileDefaultRoutingConfig;
import com.hyperswitch.client.model.RoutableConnectorChoice;
import com.hyperswitch.client.model.RoutingConfigRequest;
import com.hyperswitch.client.model.RoutingDictionaryRecord;
import com.hyperswitch.client.model.RoutingKind;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RoutingApi {


  private ApiClient apiClient;

  public RoutingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RoutingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Routing - Activate config
   * Activate a routing config
   * @param routingAlgorithmId The unique identifier for a config (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord activateARoutingConfig(String routingAlgorithmId) throws ApiException {
    return this.activateARoutingConfig(routingAlgorithmId, Collections.emptyMap());
  }


  /**
   * Routing - Activate config
   * Activate a routing config
   * @param routingAlgorithmId The unique identifier for a config (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord activateARoutingConfig(String routingAlgorithmId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'routingAlgorithmId' is set
    if (routingAlgorithmId == null) {
      throw new ApiException(400, "Missing the required parameter 'routingAlgorithmId' when calling activateARoutingConfig");
    }
    
    // create path and map variables
    String localVarPath = "/routing/{routing_algorithm_id}/activate"
      .replaceAll("\\{" + "routing_algorithm_id" + "\\}", apiClient.escapeString(routingAlgorithmId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RoutingDictionaryRecord> localVarReturnType = new TypeReference<RoutingDictionaryRecord>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Create
   * Create a routing config
   * @param routingConfigRequest  (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord createARoutingConfig(RoutingConfigRequest routingConfigRequest) throws ApiException {
    return this.createARoutingConfig(routingConfigRequest, Collections.emptyMap());
  }


  /**
   * Routing - Create
   * Create a routing config
   * @param routingConfigRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord createARoutingConfig(RoutingConfigRequest routingConfigRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = routingConfigRequest;
    
    // verify the required parameter 'routingConfigRequest' is set
    if (routingConfigRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'routingConfigRequest' when calling createARoutingConfig");
    }
    
    // create path and map variables
    String localVarPath = "/routing";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RoutingDictionaryRecord> localVarReturnType = new TypeReference<RoutingDictionaryRecord>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Deactivate
   * Deactivates a routing config
   * @param routingConfigRequest  (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord deactivateARoutingConfig(RoutingConfigRequest routingConfigRequest) throws ApiException {
    return this.deactivateARoutingConfig(routingConfigRequest, Collections.emptyMap());
  }


  /**
   * Routing - Deactivate
   * Deactivates a routing config
   * @param routingConfigRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord deactivateARoutingConfig(RoutingConfigRequest routingConfigRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = routingConfigRequest;
    
    // verify the required parameter 'routingConfigRequest' is set
    if (routingConfigRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'routingConfigRequest' when calling deactivateARoutingConfig");
    }
    
    // create path and map variables
    String localVarPath = "/routing/deactivate";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RoutingDictionaryRecord> localVarReturnType = new TypeReference<RoutingDictionaryRecord>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - List
   * List all routing configs
   * @param limit The number of records to be returned (optional)
   * @param offset The record offset from which to start gathering of results (optional)
   * @param profileId The unique identifier for a merchant profile (optional)
   * @return RoutingKind
   * @throws ApiException if fails to make API call
   */
  public RoutingKind listRoutingConfigs(Integer limit, Integer offset, String profileId) throws ApiException {
    return this.listRoutingConfigs(limit, offset, profileId, Collections.emptyMap());
  }


  /**
   * Routing - List
   * List all routing configs
   * @param limit The number of records to be returned (optional)
   * @param offset The record offset from which to start gathering of results (optional)
   * @param profileId The unique identifier for a merchant profile (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return RoutingKind
   * @throws ApiException if fails to make API call
   */
  public RoutingKind listRoutingConfigs(Integer limit, Integer offset, String profileId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/routing";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("profile_id", profileId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RoutingKind> localVarReturnType = new TypeReference<RoutingKind>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Retrieve
   * Retrieve a routing algorithm
   * @param routingAlgorithmId The unique identifier for a config (required)
   * @return MerchantRoutingAlgorithm
   * @throws ApiException if fails to make API call
   */
  public MerchantRoutingAlgorithm retrieveARoutingConfig(String routingAlgorithmId) throws ApiException {
    return this.retrieveARoutingConfig(routingAlgorithmId, Collections.emptyMap());
  }


  /**
   * Routing - Retrieve
   * Retrieve a routing algorithm
   * @param routingAlgorithmId The unique identifier for a config (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MerchantRoutingAlgorithm
   * @throws ApiException if fails to make API call
   */
  public MerchantRoutingAlgorithm retrieveARoutingConfig(String routingAlgorithmId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'routingAlgorithmId' is set
    if (routingAlgorithmId == null) {
      throw new ApiException(400, "Missing the required parameter 'routingAlgorithmId' when calling retrieveARoutingConfig");
    }
    
    // create path and map variables
    String localVarPath = "/routing/{routing_algorithm_id}"
      .replaceAll("\\{" + "routing_algorithm_id" + "\\}", apiClient.escapeString(routingAlgorithmId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<MerchantRoutingAlgorithm> localVarReturnType = new TypeReference<MerchantRoutingAlgorithm>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Retrieve Config
   * Retrieve active config
   * @param profileId The unique identifier for a merchant profile (optional)
   * @return LinkedRoutingConfigRetrieveResponse
   * @throws ApiException if fails to make API call
   */
  public LinkedRoutingConfigRetrieveResponse retrieveActiveConfig(String profileId) throws ApiException {
    return this.retrieveActiveConfig(profileId, Collections.emptyMap());
  }


  /**
   * Routing - Retrieve Config
   * Retrieve active config
   * @param profileId The unique identifier for a merchant profile (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return LinkedRoutingConfigRetrieveResponse
   * @throws ApiException if fails to make API call
   */
  public LinkedRoutingConfigRetrieveResponse retrieveActiveConfig(String profileId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/routing/active";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("profile_id", profileId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<LinkedRoutingConfigRetrieveResponse> localVarReturnType = new TypeReference<LinkedRoutingConfigRetrieveResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Retrieve Default For Profile
   * Retrieve default config for profiles
   * @return ProfileDefaultRoutingConfig
   * @throws ApiException if fails to make API call
   */
  public ProfileDefaultRoutingConfig retrieveDefaultConfigsForAllProfiles() throws ApiException {
    return this.retrieveDefaultConfigsForAllProfiles(Collections.emptyMap());
  }


  /**
   * Routing - Retrieve Default For Profile
   * Retrieve default config for profiles
   * @param additionalHeaders additionalHeaders for this call
   * @return ProfileDefaultRoutingConfig
   * @throws ApiException if fails to make API call
   */
  public ProfileDefaultRoutingConfig retrieveDefaultConfigsForAllProfiles(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/routing/default/profile";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<ProfileDefaultRoutingConfig> localVarReturnType = new TypeReference<ProfileDefaultRoutingConfig>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Retrieve Default Config
   * Retrieve default fallback config
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> retrieveDefaultFallbackConfig() throws ApiException {
    return this.retrieveDefaultFallbackConfig(Collections.emptyMap());
  }


  /**
   * Routing - Retrieve Default Config
   * Retrieve default fallback config
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> retrieveDefaultFallbackConfig(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/routing/default";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<RoutableConnectorChoice>> localVarReturnType = new TypeReference<List<RoutableConnectorChoice>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Toggle success based dynamic routing for profile
   * Create a success based dynamic routing algorithm
   * @param accountId Merchant id (required)
   * @param profileId Profile id under which Dynamic routing needs to be toggled (required)
   * @param enable Feature to enable for success based routing (required)
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord toggleSuccessBasedDynamicRoutingAlgorithm(String accountId, String profileId, DynamicRoutingFeatures enable) throws ApiException {
    return this.toggleSuccessBasedDynamicRoutingAlgorithm(accountId, profileId, enable, Collections.emptyMap());
  }


  /**
   * Routing - Toggle success based dynamic routing for profile
   * Create a success based dynamic routing algorithm
   * @param accountId Merchant id (required)
   * @param profileId Profile id under which Dynamic routing needs to be toggled (required)
   * @param enable Feature to enable for success based routing (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RoutingDictionaryRecord
   * @throws ApiException if fails to make API call
   */
  public RoutingDictionaryRecord toggleSuccessBasedDynamicRoutingAlgorithm(String accountId, String profileId, DynamicRoutingFeatures enable, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(400, "Missing the required parameter 'accountId' when calling toggleSuccessBasedDynamicRoutingAlgorithm");
    }
    
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      throw new ApiException(400, "Missing the required parameter 'profileId' when calling toggleSuccessBasedDynamicRoutingAlgorithm");
    }
    
    // verify the required parameter 'enable' is set
    if (enable == null) {
      throw new ApiException(400, "Missing the required parameter 'enable' when calling toggleSuccessBasedDynamicRoutingAlgorithm");
    }
    
    // create path and map variables
    String localVarPath = "/account/:account_id/business_profile/:profile_id/dynamic_routing/success_based/toggle"
      .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
      .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("enable", enable));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<RoutingDictionaryRecord> localVarReturnType = new TypeReference<RoutingDictionaryRecord>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Update Default For Profile
   * Update default config for profiles
   * @param profileId The unique identifier for a profile (required)
   * @param routableConnectorChoice  (required)
   * @return ProfileDefaultRoutingConfig
   * @throws ApiException if fails to make API call
   */
  public ProfileDefaultRoutingConfig updateDefaultConfigsForAllProfiles(String profileId, List<RoutableConnectorChoice> routableConnectorChoice) throws ApiException {
    return this.updateDefaultConfigsForAllProfiles(profileId, routableConnectorChoice, Collections.emptyMap());
  }


  /**
   * Routing - Update Default For Profile
   * Update default config for profiles
   * @param profileId The unique identifier for a profile (required)
   * @param routableConnectorChoice  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ProfileDefaultRoutingConfig
   * @throws ApiException if fails to make API call
   */
  public ProfileDefaultRoutingConfig updateDefaultConfigsForAllProfiles(String profileId, List<RoutableConnectorChoice> routableConnectorChoice, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = routableConnectorChoice;
    
    // verify the required parameter 'profileId' is set
    if (profileId == null) {
      throw new ApiException(400, "Missing the required parameter 'profileId' when calling updateDefaultConfigsForAllProfiles");
    }
    
    // verify the required parameter 'routableConnectorChoice' is set
    if (routableConnectorChoice == null) {
      throw new ApiException(400, "Missing the required parameter 'routableConnectorChoice' when calling updateDefaultConfigsForAllProfiles");
    }
    
    // create path and map variables
    String localVarPath = "/routing/default/profile/{profile_id}"
      .replaceAll("\\{" + "profile_id" + "\\}", apiClient.escapeString(profileId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<ProfileDefaultRoutingConfig> localVarReturnType = new TypeReference<ProfileDefaultRoutingConfig>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Routing - Update Default Config
   * Update default fallback config
   * @param routableConnectorChoice  (required)
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> updateDefaultFallbackConfig(List<RoutableConnectorChoice> routableConnectorChoice) throws ApiException {
    return this.updateDefaultFallbackConfig(routableConnectorChoice, Collections.emptyMap());
  }


  /**
   * Routing - Update Default Config
   * Update default fallback config
   * @param routableConnectorChoice  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;RoutableConnectorChoice&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RoutableConnectorChoice> updateDefaultFallbackConfig(List<RoutableConnectorChoice> routableConnectorChoice, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = routableConnectorChoice;
    
    // verify the required parameter 'routableConnectorChoice' is set
    if (routableConnectorChoice == null) {
      throw new ApiException(400, "Missing the required parameter 'routableConnectorChoice' when calling updateDefaultFallbackConfig");
    }
    
    // create path and map variables
    String localVarPath = "/routing/default";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<RoutableConnectorChoice>> localVarReturnType = new TypeReference<List<RoutableConnectorChoice>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
