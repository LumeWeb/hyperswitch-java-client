/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.Currency;
import com.hyperswitch.model.MandateType;
import com.hyperswitch.model.PaymentMethodList;
import com.hyperswitch.model.PaymentType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Test;


/**
 * Model tests for PaymentMethodListResponse
 */
class PaymentMethodListResponseTest {
    private final PaymentMethodListResponse model = new PaymentMethodListResponse();

    /**
     * Model tests for PaymentMethodListResponse
     */
    @Test
    void testPaymentMethodListResponse() {
        // TODO: test PaymentMethodListResponse
    }

    /**
     * Test the property 'redirectUrl'
     */
    @Test
    void redirectUrlTest() {
        // TODO: test redirectUrl
    }

    /**
     * Test the property 'currency'
     */
    @Test
    void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'paymentMethods'
     */
    @Test
    void paymentMethodsTest() {
        // TODO: test paymentMethods
    }

    /**
     * Test the property 'mandatePayment'
     */
    @Test
    void mandatePaymentTest() {
        // TODO: test mandatePayment
    }

    /**
     * Test the property 'merchantName'
     */
    @Test
    void merchantNameTest() {
        // TODO: test merchantName
    }

    /**
     * Test the property 'showSurchargeBreakupScreen'
     */
    @Test
    void showSurchargeBreakupScreenTest() {
        // TODO: test showSurchargeBreakupScreen
    }

    /**
     * Test the property 'paymentType'
     */
    @Test
    void paymentTypeTest() {
        // TODO: test paymentType
    }

    /**
     * Test the property 'requestExternalThreeDsAuthentication'
     */
    @Test
    void requestExternalThreeDsAuthenticationTest() {
        // TODO: test requestExternalThreeDsAuthentication
    }

    /**
     * Test the property 'collectShippingDetailsFromWallets'
     */
    @Test
    void collectShippingDetailsFromWalletsTest() {
        // TODO: test collectShippingDetailsFromWallets
    }

    /**
     * Test the property 'collectBillingDetailsFromWallets'
     */
    @Test
    void collectBillingDetailsFromWalletsTest() {
        // TODO: test collectBillingDetailsFromWallets
    }

    /**
     * Test the property 'isTaxCalculationEnabled'
     */
    @Test
    void isTaxCalculationEnabledTest() {
        // TODO: test isTaxCalculationEnabled
    }

}
