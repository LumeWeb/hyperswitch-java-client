/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.BankDebitBilling;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BankDebitDataOneOf2BecsBankDebit
 */
@JsonPropertyOrder({
  BankDebitDataOneOf2BecsBankDebit.JSON_PROPERTY_BILLING_DETAILS,
  BankDebitDataOneOf2BecsBankDebit.JSON_PROPERTY_ACCOUNT_NUMBER,
  BankDebitDataOneOf2BecsBankDebit.JSON_PROPERTY_BSB_NUMBER,
  BankDebitDataOneOf2BecsBankDebit.JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME
})
@JsonTypeName("BankDebitData_oneOf_2_becs_bank_debit")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class BankDebitDataOneOf2BecsBankDebit {
  public static final String JSON_PROPERTY_BILLING_DETAILS = "billing_details";
  @javax.annotation.Nullable
  private JsonNullable<BankDebitBilling> billingDetails = JsonNullable.<BankDebitBilling>undefined();

  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "account_number";
  @javax.annotation.Nonnull
  private String accountNumber;

  public static final String JSON_PROPERTY_BSB_NUMBER = "bsb_number";
  @javax.annotation.Nonnull
  private String bsbNumber;

  public static final String JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME = "bank_account_holder_name";
  @javax.annotation.Nullable
  private JsonNullable<String> bankAccountHolderName = JsonNullable.<String>undefined();

  public BankDebitDataOneOf2BecsBankDebit() {
  }

  public BankDebitDataOneOf2BecsBankDebit billingDetails(@javax.annotation.Nullable BankDebitBilling billingDetails) {
    this.billingDetails = JsonNullable.<BankDebitBilling>of(billingDetails);
    
    return this;
  }

  /**
   * Get billingDetails
   * @return billingDetails
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public BankDebitBilling getBillingDetails() {
        return billingDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BILLING_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BankDebitBilling> getBillingDetails_JsonNullable() {
    return billingDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_BILLING_DETAILS)
  public void setBillingDetails_JsonNullable(JsonNullable<BankDebitBilling> billingDetails) {
    this.billingDetails = billingDetails;
  }

  public void setBillingDetails(@javax.annotation.Nullable BankDebitBilling billingDetails) {
    this.billingDetails = JsonNullable.<BankDebitBilling>of(billingDetails);
  }

  public BankDebitDataOneOf2BecsBankDebit accountNumber(@javax.annotation.Nonnull String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Account number for Becs payment method
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountNumber() {
    return accountNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountNumber(@javax.annotation.Nonnull String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public BankDebitDataOneOf2BecsBankDebit bsbNumber(@javax.annotation.Nonnull String bsbNumber) {
    
    this.bsbNumber = bsbNumber;
    return this;
  }

  /**
   * Bank-State-Branch (bsb) number
   * @return bsbNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BSB_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBsbNumber() {
    return bsbNumber;
  }


  @JsonProperty(JSON_PROPERTY_BSB_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBsbNumber(@javax.annotation.Nonnull String bsbNumber) {
    this.bsbNumber = bsbNumber;
  }

  public BankDebitDataOneOf2BecsBankDebit bankAccountHolderName(@javax.annotation.Nullable String bankAccountHolderName) {
    this.bankAccountHolderName = JsonNullable.<String>of(bankAccountHolderName);
    
    return this;
  }

  /**
   * Owner name for bank debit
   * @return bankAccountHolderName
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getBankAccountHolderName() {
        return bankAccountHolderName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBankAccountHolderName_JsonNullable() {
    return bankAccountHolderName;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME)
  public void setBankAccountHolderName_JsonNullable(JsonNullable<String> bankAccountHolderName) {
    this.bankAccountHolderName = bankAccountHolderName;
  }

  public void setBankAccountHolderName(@javax.annotation.Nullable String bankAccountHolderName) {
    this.bankAccountHolderName = JsonNullable.<String>of(bankAccountHolderName);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankDebitDataOneOf2BecsBankDebit bankDebitDataOneOf2BecsBankDebit = (BankDebitDataOneOf2BecsBankDebit) o;
    return equalsNullable(this.billingDetails, bankDebitDataOneOf2BecsBankDebit.billingDetails) &&
        Objects.equals(this.accountNumber, bankDebitDataOneOf2BecsBankDebit.accountNumber) &&
        Objects.equals(this.bsbNumber, bankDebitDataOneOf2BecsBankDebit.bsbNumber) &&
        equalsNullable(this.bankAccountHolderName, bankDebitDataOneOf2BecsBankDebit.bankAccountHolderName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(billingDetails), accountNumber, bsbNumber, hashCodeNullable(bankAccountHolderName));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankDebitDataOneOf2BecsBankDebit {\n");
    sb.append("    billingDetails: ").append(toIndentedString(billingDetails)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bsbNumber: ").append(toIndentedString(bsbNumber)).append("\n");
    sb.append("    bankAccountHolderName: ").append(toIndentedString(bankAccountHolderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `billing_details` to the URL query string
    if (getBillingDetails() != null) {
      joiner.add(getBillingDetails().toUrlQueryString(prefix + "billing_details" + suffix));
    }

    // add `account_number` to the URL query string
    if (getAccountNumber() != null) {
      try {
        joiner.add(String.format("%saccount_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAccountNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `bsb_number` to the URL query string
    if (getBsbNumber() != null) {
      try {
        joiner.add(String.format("%sbsb_number%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBsbNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `bank_account_holder_name` to the URL query string
    if (getBankAccountHolderName() != null) {
      try {
        joiner.add(String.format("%sbank_account_holder_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBankAccountHolderName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

