/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.PollConfigResponse;
import com.hyperswitch.client.model.ThreeDsMethodData;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ThreeDsData
 */
@JsonPropertyOrder({
  ThreeDsData.JSON_PROPERTY_THREE_DS_AUTHENTICATION_URL,
  ThreeDsData.JSON_PROPERTY_THREE_DS_AUTHORIZE_URL,
  ThreeDsData.JSON_PROPERTY_THREE_DS_METHOD_DETAILS,
  ThreeDsData.JSON_PROPERTY_POLL_CONFIG,
  ThreeDsData.JSON_PROPERTY_MESSAGE_VERSION,
  ThreeDsData.JSON_PROPERTY_DIRECTORY_SERVER_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class ThreeDsData {
  public static final String JSON_PROPERTY_THREE_DS_AUTHENTICATION_URL = "three_ds_authentication_url";
  @javax.annotation.Nonnull
  private String threeDsAuthenticationUrl;

  public static final String JSON_PROPERTY_THREE_DS_AUTHORIZE_URL = "three_ds_authorize_url";
  @javax.annotation.Nonnull
  private String threeDsAuthorizeUrl;

  public static final String JSON_PROPERTY_THREE_DS_METHOD_DETAILS = "three_ds_method_details";
  @javax.annotation.Nonnull
  private ThreeDsMethodData threeDsMethodDetails;

  public static final String JSON_PROPERTY_POLL_CONFIG = "poll_config";
  @javax.annotation.Nonnull
  private PollConfigResponse pollConfig;

  public static final String JSON_PROPERTY_MESSAGE_VERSION = "message_version";
  @javax.annotation.Nullable
  private JsonNullable<String> messageVersion = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DIRECTORY_SERVER_ID = "directory_server_id";
  @javax.annotation.Nullable
  private JsonNullable<String> directoryServerId = JsonNullable.<String>undefined();

  public ThreeDsData() {
  }

  public ThreeDsData threeDsAuthenticationUrl(@javax.annotation.Nonnull String threeDsAuthenticationUrl) {
    
    this.threeDsAuthenticationUrl = threeDsAuthenticationUrl;
    return this;
  }

  /**
   * ThreeDS authentication url - to initiate authentication
   * @return threeDsAuthenticationUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THREE_DS_AUTHENTICATION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getThreeDsAuthenticationUrl() {
    return threeDsAuthenticationUrl;
  }


  @JsonProperty(JSON_PROPERTY_THREE_DS_AUTHENTICATION_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreeDsAuthenticationUrl(@javax.annotation.Nonnull String threeDsAuthenticationUrl) {
    this.threeDsAuthenticationUrl = threeDsAuthenticationUrl;
  }

  public ThreeDsData threeDsAuthorizeUrl(@javax.annotation.Nonnull String threeDsAuthorizeUrl) {
    
    this.threeDsAuthorizeUrl = threeDsAuthorizeUrl;
    return this;
  }

  /**
   * ThreeDS authorize url - to complete the payment authorization after authentication
   * @return threeDsAuthorizeUrl
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THREE_DS_AUTHORIZE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getThreeDsAuthorizeUrl() {
    return threeDsAuthorizeUrl;
  }


  @JsonProperty(JSON_PROPERTY_THREE_DS_AUTHORIZE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreeDsAuthorizeUrl(@javax.annotation.Nonnull String threeDsAuthorizeUrl) {
    this.threeDsAuthorizeUrl = threeDsAuthorizeUrl;
  }

  public ThreeDsData threeDsMethodDetails(@javax.annotation.Nonnull ThreeDsMethodData threeDsMethodDetails) {
    
    this.threeDsMethodDetails = threeDsMethodDetails;
    return this;
  }

  /**
   * Get threeDsMethodDetails
   * @return threeDsMethodDetails
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_THREE_DS_METHOD_DETAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ThreeDsMethodData getThreeDsMethodDetails() {
    return threeDsMethodDetails;
  }


  @JsonProperty(JSON_PROPERTY_THREE_DS_METHOD_DETAILS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThreeDsMethodDetails(@javax.annotation.Nonnull ThreeDsMethodData threeDsMethodDetails) {
    this.threeDsMethodDetails = threeDsMethodDetails;
  }

  public ThreeDsData pollConfig(@javax.annotation.Nonnull PollConfigResponse pollConfig) {
    
    this.pollConfig = pollConfig;
    return this;
  }

  /**
   * Get pollConfig
   * @return pollConfig
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POLL_CONFIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PollConfigResponse getPollConfig() {
    return pollConfig;
  }


  @JsonProperty(JSON_PROPERTY_POLL_CONFIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPollConfig(@javax.annotation.Nonnull PollConfigResponse pollConfig) {
    this.pollConfig = pollConfig;
  }

  public ThreeDsData messageVersion(@javax.annotation.Nullable String messageVersion) {
    this.messageVersion = JsonNullable.<String>of(messageVersion);
    
    return this;
  }

  /**
   * Message Version
   * @return messageVersion
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getMessageVersion() {
        return messageVersion.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMessageVersion_JsonNullable() {
    return messageVersion;
  }
  
  @JsonProperty(JSON_PROPERTY_MESSAGE_VERSION)
  public void setMessageVersion_JsonNullable(JsonNullable<String> messageVersion) {
    this.messageVersion = messageVersion;
  }

  public void setMessageVersion(@javax.annotation.Nullable String messageVersion) {
    this.messageVersion = JsonNullable.<String>of(messageVersion);
  }

  public ThreeDsData directoryServerId(@javax.annotation.Nullable String directoryServerId) {
    this.directoryServerId = JsonNullable.<String>of(directoryServerId);
    
    return this;
  }

  /**
   * Directory Server ID
   * @return directoryServerId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getDirectoryServerId() {
        return directoryServerId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDirectoryServerId_JsonNullable() {
    return directoryServerId;
  }
  
  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ID)
  public void setDirectoryServerId_JsonNullable(JsonNullable<String> directoryServerId) {
    this.directoryServerId = directoryServerId;
  }

  public void setDirectoryServerId(@javax.annotation.Nullable String directoryServerId) {
    this.directoryServerId = JsonNullable.<String>of(directoryServerId);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDsData threeDsData = (ThreeDsData) o;
    return Objects.equals(this.threeDsAuthenticationUrl, threeDsData.threeDsAuthenticationUrl) &&
        Objects.equals(this.threeDsAuthorizeUrl, threeDsData.threeDsAuthorizeUrl) &&
        Objects.equals(this.threeDsMethodDetails, threeDsData.threeDsMethodDetails) &&
        Objects.equals(this.pollConfig, threeDsData.pollConfig) &&
        equalsNullable(this.messageVersion, threeDsData.messageVersion) &&
        equalsNullable(this.directoryServerId, threeDsData.directoryServerId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(threeDsAuthenticationUrl, threeDsAuthorizeUrl, threeDsMethodDetails, pollConfig, hashCodeNullable(messageVersion), hashCodeNullable(directoryServerId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDsData {\n");
    sb.append("    threeDsAuthenticationUrl: ").append(toIndentedString(threeDsAuthenticationUrl)).append("\n");
    sb.append("    threeDsAuthorizeUrl: ").append(toIndentedString(threeDsAuthorizeUrl)).append("\n");
    sb.append("    threeDsMethodDetails: ").append(toIndentedString(threeDsMethodDetails)).append("\n");
    sb.append("    pollConfig: ").append(toIndentedString(pollConfig)).append("\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    directoryServerId: ").append(toIndentedString(directoryServerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `three_ds_authentication_url` to the URL query string
    if (getThreeDsAuthenticationUrl() != null) {
      try {
        joiner.add(String.format("%sthree_ds_authentication_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreeDsAuthenticationUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `three_ds_authorize_url` to the URL query string
    if (getThreeDsAuthorizeUrl() != null) {
      try {
        joiner.add(String.format("%sthree_ds_authorize_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThreeDsAuthorizeUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `three_ds_method_details` to the URL query string
    if (getThreeDsMethodDetails() != null) {
      joiner.add(getThreeDsMethodDetails().toUrlQueryString(prefix + "three_ds_method_details" + suffix));
    }

    // add `poll_config` to the URL query string
    if (getPollConfig() != null) {
      joiner.add(getPollConfig().toUrlQueryString(prefix + "poll_config" + suffix));
    }

    // add `message_version` to the URL query string
    if (getMessageVersion() != null) {
      try {
        joiner.add(String.format("%smessage_version%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMessageVersion()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `directory_server_id` to the URL query string
    if (getDirectoryServerId() != null) {
      try {
        joiner.add(String.format("%sdirectory_server_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDirectoryServerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

