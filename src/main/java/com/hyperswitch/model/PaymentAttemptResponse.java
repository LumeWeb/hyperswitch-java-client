/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.AttemptStatus;
import com.hyperswitch.model.AuthenticationType;
import com.hyperswitch.model.CaptureMethod;
import com.hyperswitch.model.Currency;
import com.hyperswitch.model.PaymentExperience;
import com.hyperswitch.model.PaymentMethod;
import com.hyperswitch.model.PaymentMethodType;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentAttemptResponse
 */
@JsonPropertyOrder({
  PaymentAttemptResponse.JSON_PROPERTY_ATTEMPT_ID,
  PaymentAttemptResponse.JSON_PROPERTY_STATUS,
  PaymentAttemptResponse.JSON_PROPERTY_AMOUNT,
  PaymentAttemptResponse.JSON_PROPERTY_CURRENCY,
  PaymentAttemptResponse.JSON_PROPERTY_CONNECTOR,
  PaymentAttemptResponse.JSON_PROPERTY_ERROR_MESSAGE,
  PaymentAttemptResponse.JSON_PROPERTY_PAYMENT_METHOD,
  PaymentAttemptResponse.JSON_PROPERTY_CONNECTOR_TRANSACTION_ID,
  PaymentAttemptResponse.JSON_PROPERTY_CAPTURE_METHOD,
  PaymentAttemptResponse.JSON_PROPERTY_AUTHENTICATION_TYPE,
  PaymentAttemptResponse.JSON_PROPERTY_CREATED_AT,
  PaymentAttemptResponse.JSON_PROPERTY_MODIFIED_AT,
  PaymentAttemptResponse.JSON_PROPERTY_CANCELLATION_REASON,
  PaymentAttemptResponse.JSON_PROPERTY_MANDATE_ID,
  PaymentAttemptResponse.JSON_PROPERTY_ERROR_CODE,
  PaymentAttemptResponse.JSON_PROPERTY_PAYMENT_TOKEN,
  PaymentAttemptResponse.JSON_PROPERTY_CONNECTOR_METADATA,
  PaymentAttemptResponse.JSON_PROPERTY_PAYMENT_EXPERIENCE,
  PaymentAttemptResponse.JSON_PROPERTY_PAYMENT_METHOD_TYPE,
  PaymentAttemptResponse.JSON_PROPERTY_REFERENCE_ID,
  PaymentAttemptResponse.JSON_PROPERTY_UNIFIED_CODE,
  PaymentAttemptResponse.JSON_PROPERTY_UNIFIED_MESSAGE,
  PaymentAttemptResponse.JSON_PROPERTY_CLIENT_SOURCE,
  PaymentAttemptResponse.JSON_PROPERTY_CLIENT_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class PaymentAttemptResponse {
  public static final String JSON_PROPERTY_ATTEMPT_ID = "attempt_id";
  @javax.annotation.Nonnull
  private String attemptId;

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nonnull
  private AttemptStatus status;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @javax.annotation.Nonnull
  private Long amount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private JsonNullable<Currency> currency = JsonNullable.<Currency>undefined();

  public static final String JSON_PROPERTY_CONNECTOR = "connector";
  private JsonNullable<String> connector = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
  private JsonNullable<String> errorMessage = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PAYMENT_METHOD = "payment_method";
  private JsonNullable<PaymentMethod> paymentMethod = JsonNullable.<PaymentMethod>undefined();

  public static final String JSON_PROPERTY_CONNECTOR_TRANSACTION_ID = "connector_transaction_id";
  private JsonNullable<String> connectorTransactionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CAPTURE_METHOD = "capture_method";
  private JsonNullable<CaptureMethod> captureMethod = JsonNullable.<CaptureMethod>undefined();

  public static final String JSON_PROPERTY_AUTHENTICATION_TYPE = "authentication_type";
  private JsonNullable<AuthenticationType> authenticationType = JsonNullable.<AuthenticationType>of(AuthenticationType.THREE_DS);

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_MODIFIED_AT = "modified_at";
  @javax.annotation.Nonnull
  private OffsetDateTime modifiedAt;

  public static final String JSON_PROPERTY_CANCELLATION_REASON = "cancellation_reason";
  private JsonNullable<String> cancellationReason = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MANDATE_ID = "mandate_id";
  private JsonNullable<String> mandateId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ERROR_CODE = "error_code";
  private JsonNullable<String> errorCode = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PAYMENT_TOKEN = "payment_token";
  private JsonNullable<String> paymentToken = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONNECTOR_METADATA = "connector_metadata";
  private JsonNullable<Object> connectorMetadata = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_PAYMENT_EXPERIENCE = "payment_experience";
  private JsonNullable<PaymentExperience> paymentExperience = JsonNullable.<PaymentExperience>undefined();

  public static final String JSON_PROPERTY_PAYMENT_METHOD_TYPE = "payment_method_type";
  private JsonNullable<PaymentMethodType> paymentMethodType = JsonNullable.<PaymentMethodType>undefined();

  public static final String JSON_PROPERTY_REFERENCE_ID = "reference_id";
  private JsonNullable<String> referenceId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_UNIFIED_CODE = "unified_code";
  private JsonNullable<String> unifiedCode = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_UNIFIED_MESSAGE = "unified_message";
  private JsonNullable<String> unifiedMessage = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CLIENT_SOURCE = "client_source";
  private JsonNullable<String> clientSource = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CLIENT_VERSION = "client_version";
  private JsonNullable<String> clientVersion = JsonNullable.<String>undefined();

  public PaymentAttemptResponse() {
  }

  public PaymentAttemptResponse attemptId(@javax.annotation.Nonnull String attemptId) {
    
    this.attemptId = attemptId;
    return this;
  }

  /**
   * Unique identifier for the attempt
   * @return attemptId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ATTEMPT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAttemptId() {
    return attemptId;
  }


  @JsonProperty(JSON_PROPERTY_ATTEMPT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttemptId(@javax.annotation.Nonnull String attemptId) {
    this.attemptId = attemptId;
  }


  public PaymentAttemptResponse status(@javax.annotation.Nonnull AttemptStatus status) {
    
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AttemptStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@javax.annotation.Nonnull AttemptStatus status) {
    this.status = status;
  }


  public PaymentAttemptResponse amount(@javax.annotation.Nonnull Long amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * The payment attempt amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,
   * @return amount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(@javax.annotation.Nonnull Long amount) {
    this.amount = amount;
  }


  public PaymentAttemptResponse currency(@javax.annotation.Nullable Currency currency) {
    this.currency = JsonNullable.<Currency>of(currency);
    
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Currency getCurrency() {
        return currency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Currency> getCurrency_JsonNullable() {
    return currency;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  public void setCurrency_JsonNullable(JsonNullable<Currency> currency) {
    this.currency = currency;
  }

  public void setCurrency(@javax.annotation.Nullable Currency currency) {
    this.currency = JsonNullable.<Currency>of(currency);
  }


  public PaymentAttemptResponse connector(@javax.annotation.Nullable String connector) {
    this.connector = JsonNullable.<String>of(connector);
    
    return this;
  }

  /**
   * The connector used for the payment
   * @return connector
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getConnector() {
        return connector.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConnector_JsonNullable() {
    return connector;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  public void setConnector_JsonNullable(JsonNullable<String> connector) {
    this.connector = connector;
  }

  public void setConnector(@javax.annotation.Nullable String connector) {
    this.connector = JsonNullable.<String>of(connector);
  }


  public PaymentAttemptResponse errorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = JsonNullable.<String>of(errorMessage);
    
    return this;
  }

  /**
   * If there was an error while calling the connector, the error message is received here
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getErrorMessage() {
        return errorMessage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getErrorMessage_JsonNullable() {
    return errorMessage;
  }
  
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  public void setErrorMessage_JsonNullable(JsonNullable<String> errorMessage) {
    this.errorMessage = errorMessage;
  }

  public void setErrorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = JsonNullable.<String>of(errorMessage);
  }


  public PaymentAttemptResponse paymentMethod(@javax.annotation.Nullable PaymentMethod paymentMethod) {
    this.paymentMethod = JsonNullable.<PaymentMethod>of(paymentMethod);
    
    return this;
  }

  /**
   * Get paymentMethod
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentMethod getPaymentMethod() {
        return paymentMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentMethod> getPaymentMethod_JsonNullable() {
    return paymentMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  public void setPaymentMethod_JsonNullable(JsonNullable<PaymentMethod> paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public void setPaymentMethod(@javax.annotation.Nullable PaymentMethod paymentMethod) {
    this.paymentMethod = JsonNullable.<PaymentMethod>of(paymentMethod);
  }


  public PaymentAttemptResponse connectorTransactionId(@javax.annotation.Nullable String connectorTransactionId) {
    this.connectorTransactionId = JsonNullable.<String>of(connectorTransactionId);
    
    return this;
  }

  /**
   * A unique identifier for a payment provided by the connector
   * @return connectorTransactionId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getConnectorTransactionId() {
        return connectorTransactionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConnectorTransactionId_JsonNullable() {
    return connectorTransactionId;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_TRANSACTION_ID)
  public void setConnectorTransactionId_JsonNullable(JsonNullable<String> connectorTransactionId) {
    this.connectorTransactionId = connectorTransactionId;
  }

  public void setConnectorTransactionId(@javax.annotation.Nullable String connectorTransactionId) {
    this.connectorTransactionId = JsonNullable.<String>of(connectorTransactionId);
  }


  public PaymentAttemptResponse captureMethod(@javax.annotation.Nullable CaptureMethod captureMethod) {
    this.captureMethod = JsonNullable.<CaptureMethod>of(captureMethod);
    
    return this;
  }

  /**
   * Get captureMethod
   * @return captureMethod
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CaptureMethod getCaptureMethod() {
        return captureMethod.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CAPTURE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CaptureMethod> getCaptureMethod_JsonNullable() {
    return captureMethod;
  }
  
  @JsonProperty(JSON_PROPERTY_CAPTURE_METHOD)
  public void setCaptureMethod_JsonNullable(JsonNullable<CaptureMethod> captureMethod) {
    this.captureMethod = captureMethod;
  }

  public void setCaptureMethod(@javax.annotation.Nullable CaptureMethod captureMethod) {
    this.captureMethod = JsonNullable.<CaptureMethod>of(captureMethod);
  }


  public PaymentAttemptResponse authenticationType(@javax.annotation.Nullable AuthenticationType authenticationType) {
    this.authenticationType = JsonNullable.<AuthenticationType>of(authenticationType);
    
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public AuthenticationType getAuthenticationType() {
        return authenticationType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<AuthenticationType> getAuthenticationType_JsonNullable() {
    return authenticationType;
  }
  
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  public void setAuthenticationType_JsonNullable(JsonNullable<AuthenticationType> authenticationType) {
    this.authenticationType = authenticationType;
  }

  public void setAuthenticationType(@javax.annotation.Nullable AuthenticationType authenticationType) {
    this.authenticationType = JsonNullable.<AuthenticationType>of(authenticationType);
  }


  public PaymentAttemptResponse createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Time at which the payment attempt was created
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PaymentAttemptResponse modifiedAt(@javax.annotation.Nonnull OffsetDateTime modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Time at which the payment attempt was last modified
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedAt(@javax.annotation.Nonnull OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public PaymentAttemptResponse cancellationReason(@javax.annotation.Nullable String cancellationReason) {
    this.cancellationReason = JsonNullable.<String>of(cancellationReason);
    
    return this;
  }

  /**
   * If the payment was cancelled the reason will be provided here
   * @return cancellationReason
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getCancellationReason() {
        return cancellationReason.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CANCELLATION_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCancellationReason_JsonNullable() {
    return cancellationReason;
  }
  
  @JsonProperty(JSON_PROPERTY_CANCELLATION_REASON)
  public void setCancellationReason_JsonNullable(JsonNullable<String> cancellationReason) {
    this.cancellationReason = cancellationReason;
  }

  public void setCancellationReason(@javax.annotation.Nullable String cancellationReason) {
    this.cancellationReason = JsonNullable.<String>of(cancellationReason);
  }


  public PaymentAttemptResponse mandateId(@javax.annotation.Nullable String mandateId) {
    this.mandateId = JsonNullable.<String>of(mandateId);
    
    return this;
  }

  /**
   * A unique identifier to link the payment to a mandate, can be use instead of payment_method_data
   * @return mandateId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getMandateId() {
        return mandateId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MANDATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMandateId_JsonNullable() {
    return mandateId;
  }
  
  @JsonProperty(JSON_PROPERTY_MANDATE_ID)
  public void setMandateId_JsonNullable(JsonNullable<String> mandateId) {
    this.mandateId = mandateId;
  }

  public void setMandateId(@javax.annotation.Nullable String mandateId) {
    this.mandateId = JsonNullable.<String>of(mandateId);
  }


  public PaymentAttemptResponse errorCode(@javax.annotation.Nullable String errorCode) {
    this.errorCode = JsonNullable.<String>of(errorCode);
    
    return this;
  }

  /**
   * If there was an error while calling the connectors the error code is received here
   * @return errorCode
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getErrorCode() {
        return errorCode.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getErrorCode_JsonNullable() {
    return errorCode;
  }
  
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  public void setErrorCode_JsonNullable(JsonNullable<String> errorCode) {
    this.errorCode = errorCode;
  }

  public void setErrorCode(@javax.annotation.Nullable String errorCode) {
    this.errorCode = JsonNullable.<String>of(errorCode);
  }


  public PaymentAttemptResponse paymentToken(@javax.annotation.Nullable String paymentToken) {
    this.paymentToken = JsonNullable.<String>of(paymentToken);
    
    return this;
  }

  /**
   * Provide a reference to a stored payment method
   * @return paymentToken
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getPaymentToken() {
        return paymentToken.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPaymentToken_JsonNullable() {
    return paymentToken;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  public void setPaymentToken_JsonNullable(JsonNullable<String> paymentToken) {
    this.paymentToken = paymentToken;
  }

  public void setPaymentToken(@javax.annotation.Nullable String paymentToken) {
    this.paymentToken = JsonNullable.<String>of(paymentToken);
  }


  public PaymentAttemptResponse connectorMetadata(@javax.annotation.Nullable Object connectorMetadata) {
    this.connectorMetadata = JsonNullable.<Object>of(connectorMetadata);
    
    return this;
  }

  /**
   * Additional data related to some connectors
   * @return connectorMetadata
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getConnectorMetadata() {
        return connectorMetadata.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getConnectorMetadata_JsonNullable() {
    return connectorMetadata;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR_METADATA)
  public void setConnectorMetadata_JsonNullable(JsonNullable<Object> connectorMetadata) {
    this.connectorMetadata = connectorMetadata;
  }

  public void setConnectorMetadata(@javax.annotation.Nullable Object connectorMetadata) {
    this.connectorMetadata = JsonNullable.<Object>of(connectorMetadata);
  }


  public PaymentAttemptResponse paymentExperience(@javax.annotation.Nullable PaymentExperience paymentExperience) {
    this.paymentExperience = JsonNullable.<PaymentExperience>of(paymentExperience);
    
    return this;
  }

  /**
   * Get paymentExperience
   * @return paymentExperience
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentExperience getPaymentExperience() {
        return paymentExperience.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_EXPERIENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentExperience> getPaymentExperience_JsonNullable() {
    return paymentExperience;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_EXPERIENCE)
  public void setPaymentExperience_JsonNullable(JsonNullable<PaymentExperience> paymentExperience) {
    this.paymentExperience = paymentExperience;
  }

  public void setPaymentExperience(@javax.annotation.Nullable PaymentExperience paymentExperience) {
    this.paymentExperience = JsonNullable.<PaymentExperience>of(paymentExperience);
  }


  public PaymentAttemptResponse paymentMethodType(@javax.annotation.Nullable PaymentMethodType paymentMethodType) {
    this.paymentMethodType = JsonNullable.<PaymentMethodType>of(paymentMethodType);
    
    return this;
  }

  /**
   * Get paymentMethodType
   * @return paymentMethodType
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public PaymentMethodType getPaymentMethodType() {
        return paymentMethodType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<PaymentMethodType> getPaymentMethodType_JsonNullable() {
    return paymentMethodType;
  }
  
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
  public void setPaymentMethodType_JsonNullable(JsonNullable<PaymentMethodType> paymentMethodType) {
    this.paymentMethodType = paymentMethodType;
  }

  public void setPaymentMethodType(@javax.annotation.Nullable PaymentMethodType paymentMethodType) {
    this.paymentMethodType = JsonNullable.<PaymentMethodType>of(paymentMethodType);
  }


  public PaymentAttemptResponse referenceId(@javax.annotation.Nullable String referenceId) {
    this.referenceId = JsonNullable.<String>of(referenceId);
    
    return this;
  }

  /**
   * Reference to the payment at connector side
   * @return referenceId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getReferenceId() {
        return referenceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getReferenceId_JsonNullable() {
    return referenceId;
  }
  
  @JsonProperty(JSON_PROPERTY_REFERENCE_ID)
  public void setReferenceId_JsonNullable(JsonNullable<String> referenceId) {
    this.referenceId = referenceId;
  }

  public void setReferenceId(@javax.annotation.Nullable String referenceId) {
    this.referenceId = JsonNullable.<String>of(referenceId);
  }


  public PaymentAttemptResponse unifiedCode(@javax.annotation.Nullable String unifiedCode) {
    this.unifiedCode = JsonNullable.<String>of(unifiedCode);
    
    return this;
  }

  /**
   * (This field is not live yet)Error code unified across the connectors is received here if there was an error while calling connector
   * @return unifiedCode
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getUnifiedCode() {
        return unifiedCode.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNIFIED_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUnifiedCode_JsonNullable() {
    return unifiedCode;
  }
  
  @JsonProperty(JSON_PROPERTY_UNIFIED_CODE)
  public void setUnifiedCode_JsonNullable(JsonNullable<String> unifiedCode) {
    this.unifiedCode = unifiedCode;
  }

  public void setUnifiedCode(@javax.annotation.Nullable String unifiedCode) {
    this.unifiedCode = JsonNullable.<String>of(unifiedCode);
  }


  public PaymentAttemptResponse unifiedMessage(@javax.annotation.Nullable String unifiedMessage) {
    this.unifiedMessage = JsonNullable.<String>of(unifiedMessage);
    
    return this;
  }

  /**
   * (This field is not live yet)Error message unified across the connectors is received here if there was an error while calling connector
   * @return unifiedMessage
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getUnifiedMessage() {
        return unifiedMessage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNIFIED_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUnifiedMessage_JsonNullable() {
    return unifiedMessage;
  }
  
  @JsonProperty(JSON_PROPERTY_UNIFIED_MESSAGE)
  public void setUnifiedMessage_JsonNullable(JsonNullable<String> unifiedMessage) {
    this.unifiedMessage = unifiedMessage;
  }

  public void setUnifiedMessage(@javax.annotation.Nullable String unifiedMessage) {
    this.unifiedMessage = JsonNullable.<String>of(unifiedMessage);
  }


  public PaymentAttemptResponse clientSource(@javax.annotation.Nullable String clientSource) {
    this.clientSource = JsonNullable.<String>of(clientSource);
    
    return this;
  }

  /**
   * Value passed in X-CLIENT-SOURCE header during payments confirm request by the client
   * @return clientSource
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getClientSource() {
        return clientSource.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLIENT_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClientSource_JsonNullable() {
    return clientSource;
  }
  
  @JsonProperty(JSON_PROPERTY_CLIENT_SOURCE)
  public void setClientSource_JsonNullable(JsonNullable<String> clientSource) {
    this.clientSource = clientSource;
  }

  public void setClientSource(@javax.annotation.Nullable String clientSource) {
    this.clientSource = JsonNullable.<String>of(clientSource);
  }


  public PaymentAttemptResponse clientVersion(@javax.annotation.Nullable String clientVersion) {
    this.clientVersion = JsonNullable.<String>of(clientVersion);
    
    return this;
  }

  /**
   * Value passed in X-CLIENT-VERSION header during payments confirm request by the client
   * @return clientVersion
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getClientVersion() {
        return clientVersion.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLIENT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClientVersion_JsonNullable() {
    return clientVersion;
  }
  
  @JsonProperty(JSON_PROPERTY_CLIENT_VERSION)
  public void setClientVersion_JsonNullable(JsonNullable<String> clientVersion) {
    this.clientVersion = clientVersion;
  }

  public void setClientVersion(@javax.annotation.Nullable String clientVersion) {
    this.clientVersion = JsonNullable.<String>of(clientVersion);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAttemptResponse paymentAttemptResponse = (PaymentAttemptResponse) o;
    return Objects.equals(this.attemptId, paymentAttemptResponse.attemptId) &&
        Objects.equals(this.status, paymentAttemptResponse.status) &&
        Objects.equals(this.amount, paymentAttemptResponse.amount) &&
        equalsNullable(this.currency, paymentAttemptResponse.currency) &&
        equalsNullable(this.connector, paymentAttemptResponse.connector) &&
        equalsNullable(this.errorMessage, paymentAttemptResponse.errorMessage) &&
        equalsNullable(this.paymentMethod, paymentAttemptResponse.paymentMethod) &&
        equalsNullable(this.connectorTransactionId, paymentAttemptResponse.connectorTransactionId) &&
        equalsNullable(this.captureMethod, paymentAttemptResponse.captureMethod) &&
        equalsNullable(this.authenticationType, paymentAttemptResponse.authenticationType) &&
        Objects.equals(this.createdAt, paymentAttemptResponse.createdAt) &&
        Objects.equals(this.modifiedAt, paymentAttemptResponse.modifiedAt) &&
        equalsNullable(this.cancellationReason, paymentAttemptResponse.cancellationReason) &&
        equalsNullable(this.mandateId, paymentAttemptResponse.mandateId) &&
        equalsNullable(this.errorCode, paymentAttemptResponse.errorCode) &&
        equalsNullable(this.paymentToken, paymentAttemptResponse.paymentToken) &&
        equalsNullable(this.connectorMetadata, paymentAttemptResponse.connectorMetadata) &&
        equalsNullable(this.paymentExperience, paymentAttemptResponse.paymentExperience) &&
        equalsNullable(this.paymentMethodType, paymentAttemptResponse.paymentMethodType) &&
        equalsNullable(this.referenceId, paymentAttemptResponse.referenceId) &&
        equalsNullable(this.unifiedCode, paymentAttemptResponse.unifiedCode) &&
        equalsNullable(this.unifiedMessage, paymentAttemptResponse.unifiedMessage) &&
        equalsNullable(this.clientSource, paymentAttemptResponse.clientSource) &&
        equalsNullable(this.clientVersion, paymentAttemptResponse.clientVersion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attemptId, status, amount, hashCodeNullable(currency), hashCodeNullable(connector), hashCodeNullable(errorMessage), hashCodeNullable(paymentMethod), hashCodeNullable(connectorTransactionId), hashCodeNullable(captureMethod), hashCodeNullable(authenticationType), createdAt, modifiedAt, hashCodeNullable(cancellationReason), hashCodeNullable(mandateId), hashCodeNullable(errorCode), hashCodeNullable(paymentToken), hashCodeNullable(connectorMetadata), hashCodeNullable(paymentExperience), hashCodeNullable(paymentMethodType), hashCodeNullable(referenceId), hashCodeNullable(unifiedCode), hashCodeNullable(unifiedMessage), hashCodeNullable(clientSource), hashCodeNullable(clientVersion));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAttemptResponse {\n");
    sb.append("    attemptId: ").append(toIndentedString(attemptId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    connectorTransactionId: ").append(toIndentedString(connectorTransactionId)).append("\n");
    sb.append("    captureMethod: ").append(toIndentedString(captureMethod)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    cancellationReason: ").append(toIndentedString(cancellationReason)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    connectorMetadata: ").append(toIndentedString(connectorMetadata)).append("\n");
    sb.append("    paymentExperience: ").append(toIndentedString(paymentExperience)).append("\n");
    sb.append("    paymentMethodType: ").append(toIndentedString(paymentMethodType)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    unifiedCode: ").append(toIndentedString(unifiedCode)).append("\n");
    sb.append("    unifiedMessage: ").append(toIndentedString(unifiedMessage)).append("\n");
    sb.append("    clientSource: ").append(toIndentedString(clientSource)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

