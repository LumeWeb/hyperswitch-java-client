/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lumeweb.hyperswitch.model.BankDebitResponse;
import com.lumeweb.hyperswitch.model.BankRedirectResponse;
import com.lumeweb.hyperswitch.model.BankTransferResponse;
import com.lumeweb.hyperswitch.model.CardRedirectResponse;
import com.lumeweb.hyperswitch.model.CardResponse;
import com.lumeweb.hyperswitch.model.CardTokenResponse;
import com.lumeweb.hyperswitch.model.CryptoResponse;
import com.lumeweb.hyperswitch.model.GiftCardResponse;
import com.lumeweb.hyperswitch.model.OpenBankingResponse;
import com.lumeweb.hyperswitch.model.PaylaterResponse;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf1;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf10;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf11;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf12;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf13;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf14;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf15;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf2;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf3;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf4;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf5;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf6;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf7;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf8;
import com.lumeweb.hyperswitch.model.PaymentMethodDataResponseOneOf9;
import com.lumeweb.hyperswitch.model.RealTimePaymentDataResponse;
import com.lumeweb.hyperswitch.model.UpiResponse;
import com.lumeweb.hyperswitch.model.VoucherResponse;
import com.lumeweb.hyperswitch.model.WalletResponse;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.lumeweb.hyperswitch.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
@JsonDeserialize(using = PaymentMethodDataResponse.PaymentMethodDataResponseDeserializer.class)
@JsonSerialize(using = PaymentMethodDataResponse.PaymentMethodDataResponseSerializer.class)
public class PaymentMethodDataResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PaymentMethodDataResponse.class.getName());

    public static class PaymentMethodDataResponseSerializer extends StdSerializer<PaymentMethodDataResponse> {
        public PaymentMethodDataResponseSerializer(Class<PaymentMethodDataResponse> t) {
            super(t);
        }

        public PaymentMethodDataResponseSerializer() {
            this(null);
        }

        @Override
        public void serialize(PaymentMethodDataResponse value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class PaymentMethodDataResponseDeserializer extends StdDeserializer<PaymentMethodDataResponse> {
        public PaymentMethodDataResponseDeserializer() {
            this(PaymentMethodDataResponse.class);
        }

        public PaymentMethodDataResponseDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public PaymentMethodDataResponse deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PaymentMethodDataResponseOneOf
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf.class.equals(Integer.class) || PaymentMethodDataResponseOneOf.class.equals(Long.class) || PaymentMethodDataResponseOneOf.class.equals(Float.class) || PaymentMethodDataResponseOneOf.class.equals(Double.class) || PaymentMethodDataResponseOneOf.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf.class.equals(Integer.class) || PaymentMethodDataResponseOneOf.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf.class.equals(Float.class) || PaymentMethodDataResponseOneOf.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf1
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf1.class.equals(Integer.class) || PaymentMethodDataResponseOneOf1.class.equals(Long.class) || PaymentMethodDataResponseOneOf1.class.equals(Float.class) || PaymentMethodDataResponseOneOf1.class.equals(Double.class) || PaymentMethodDataResponseOneOf1.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf1.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf1.class.equals(Integer.class) || PaymentMethodDataResponseOneOf1.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf1.class.equals(Float.class) || PaymentMethodDataResponseOneOf1.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf1.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf1.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf1.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf1'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf1'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf10
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf10.class.equals(Integer.class) || PaymentMethodDataResponseOneOf10.class.equals(Long.class) || PaymentMethodDataResponseOneOf10.class.equals(Float.class) || PaymentMethodDataResponseOneOf10.class.equals(Double.class) || PaymentMethodDataResponseOneOf10.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf10.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf10.class.equals(Integer.class) || PaymentMethodDataResponseOneOf10.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf10.class.equals(Float.class) || PaymentMethodDataResponseOneOf10.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf10.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf10.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf10.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf10'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf10'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf11
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf11.class.equals(Integer.class) || PaymentMethodDataResponseOneOf11.class.equals(Long.class) || PaymentMethodDataResponseOneOf11.class.equals(Float.class) || PaymentMethodDataResponseOneOf11.class.equals(Double.class) || PaymentMethodDataResponseOneOf11.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf11.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf11.class.equals(Integer.class) || PaymentMethodDataResponseOneOf11.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf11.class.equals(Float.class) || PaymentMethodDataResponseOneOf11.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf11.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf11.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf11.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf11'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf11'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf12
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf12.class.equals(Integer.class) || PaymentMethodDataResponseOneOf12.class.equals(Long.class) || PaymentMethodDataResponseOneOf12.class.equals(Float.class) || PaymentMethodDataResponseOneOf12.class.equals(Double.class) || PaymentMethodDataResponseOneOf12.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf12.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf12.class.equals(Integer.class) || PaymentMethodDataResponseOneOf12.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf12.class.equals(Float.class) || PaymentMethodDataResponseOneOf12.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf12.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf12.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf12.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf12'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf12'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf13
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf13.class.equals(Integer.class) || PaymentMethodDataResponseOneOf13.class.equals(Long.class) || PaymentMethodDataResponseOneOf13.class.equals(Float.class) || PaymentMethodDataResponseOneOf13.class.equals(Double.class) || PaymentMethodDataResponseOneOf13.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf13.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf13.class.equals(Integer.class) || PaymentMethodDataResponseOneOf13.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf13.class.equals(Float.class) || PaymentMethodDataResponseOneOf13.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf13.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf13.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf13.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf13'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf13'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf14
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf14.class.equals(Integer.class) || PaymentMethodDataResponseOneOf14.class.equals(Long.class) || PaymentMethodDataResponseOneOf14.class.equals(Float.class) || PaymentMethodDataResponseOneOf14.class.equals(Double.class) || PaymentMethodDataResponseOneOf14.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf14.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf14.class.equals(Integer.class) || PaymentMethodDataResponseOneOf14.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf14.class.equals(Float.class) || PaymentMethodDataResponseOneOf14.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf14.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf14.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf14.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf14'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf14'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf15
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf15.class.equals(Integer.class) || PaymentMethodDataResponseOneOf15.class.equals(Long.class) || PaymentMethodDataResponseOneOf15.class.equals(Float.class) || PaymentMethodDataResponseOneOf15.class.equals(Double.class) || PaymentMethodDataResponseOneOf15.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf15.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf15.class.equals(Integer.class) || PaymentMethodDataResponseOneOf15.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf15.class.equals(Float.class) || PaymentMethodDataResponseOneOf15.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf15.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf15.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf15.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf15'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf15'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf2
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf2.class.equals(Integer.class) || PaymentMethodDataResponseOneOf2.class.equals(Long.class) || PaymentMethodDataResponseOneOf2.class.equals(Float.class) || PaymentMethodDataResponseOneOf2.class.equals(Double.class) || PaymentMethodDataResponseOneOf2.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf2.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf2.class.equals(Integer.class) || PaymentMethodDataResponseOneOf2.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf2.class.equals(Float.class) || PaymentMethodDataResponseOneOf2.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf2.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf2.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf2'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf3
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf3.class.equals(Integer.class) || PaymentMethodDataResponseOneOf3.class.equals(Long.class) || PaymentMethodDataResponseOneOf3.class.equals(Float.class) || PaymentMethodDataResponseOneOf3.class.equals(Double.class) || PaymentMethodDataResponseOneOf3.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf3.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf3.class.equals(Integer.class) || PaymentMethodDataResponseOneOf3.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf3.class.equals(Float.class) || PaymentMethodDataResponseOneOf3.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf3.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf3.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf3.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf3'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf3'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf4
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf4.class.equals(Integer.class) || PaymentMethodDataResponseOneOf4.class.equals(Long.class) || PaymentMethodDataResponseOneOf4.class.equals(Float.class) || PaymentMethodDataResponseOneOf4.class.equals(Double.class) || PaymentMethodDataResponseOneOf4.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf4.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf4.class.equals(Integer.class) || PaymentMethodDataResponseOneOf4.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf4.class.equals(Float.class) || PaymentMethodDataResponseOneOf4.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf4.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf4.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf4.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf4'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf4'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf5
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf5.class.equals(Integer.class) || PaymentMethodDataResponseOneOf5.class.equals(Long.class) || PaymentMethodDataResponseOneOf5.class.equals(Float.class) || PaymentMethodDataResponseOneOf5.class.equals(Double.class) || PaymentMethodDataResponseOneOf5.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf5.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf5.class.equals(Integer.class) || PaymentMethodDataResponseOneOf5.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf5.class.equals(Float.class) || PaymentMethodDataResponseOneOf5.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf5.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf5.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf5.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf5'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf5'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf6
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf6.class.equals(Integer.class) || PaymentMethodDataResponseOneOf6.class.equals(Long.class) || PaymentMethodDataResponseOneOf6.class.equals(Float.class) || PaymentMethodDataResponseOneOf6.class.equals(Double.class) || PaymentMethodDataResponseOneOf6.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf6.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf6.class.equals(Integer.class) || PaymentMethodDataResponseOneOf6.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf6.class.equals(Float.class) || PaymentMethodDataResponseOneOf6.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf6.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf6.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf6.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf6'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf6'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf7
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf7.class.equals(Integer.class) || PaymentMethodDataResponseOneOf7.class.equals(Long.class) || PaymentMethodDataResponseOneOf7.class.equals(Float.class) || PaymentMethodDataResponseOneOf7.class.equals(Double.class) || PaymentMethodDataResponseOneOf7.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf7.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf7.class.equals(Integer.class) || PaymentMethodDataResponseOneOf7.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf7.class.equals(Float.class) || PaymentMethodDataResponseOneOf7.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf7.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf7.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf7.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf7'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf7'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf8
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf8.class.equals(Integer.class) || PaymentMethodDataResponseOneOf8.class.equals(Long.class) || PaymentMethodDataResponseOneOf8.class.equals(Float.class) || PaymentMethodDataResponseOneOf8.class.equals(Double.class) || PaymentMethodDataResponseOneOf8.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf8.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf8.class.equals(Integer.class) || PaymentMethodDataResponseOneOf8.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf8.class.equals(Float.class) || PaymentMethodDataResponseOneOf8.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf8.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf8.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf8.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf8'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf8'", e);
            }

            // deserialize PaymentMethodDataResponseOneOf9
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodDataResponseOneOf9.class.equals(Integer.class) || PaymentMethodDataResponseOneOf9.class.equals(Long.class) || PaymentMethodDataResponseOneOf9.class.equals(Float.class) || PaymentMethodDataResponseOneOf9.class.equals(Double.class) || PaymentMethodDataResponseOneOf9.class.equals(Boolean.class) || PaymentMethodDataResponseOneOf9.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodDataResponseOneOf9.class.equals(Integer.class) || PaymentMethodDataResponseOneOf9.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodDataResponseOneOf9.class.equals(Float.class) || PaymentMethodDataResponseOneOf9.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodDataResponseOneOf9.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodDataResponseOneOf9.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodDataResponseOneOf9.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodDataResponseOneOf9'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodDataResponseOneOf9'", e);
            }

            if (match == 1) {
                PaymentMethodDataResponse ret = new PaymentMethodDataResponse();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for PaymentMethodDataResponse: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public PaymentMethodDataResponse getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "PaymentMethodDataResponse cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public PaymentMethodDataResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf10 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf11 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf12 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf13 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf14 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf15 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf4 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf5 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf6 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf7 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf8 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PaymentMethodDataResponse(PaymentMethodDataResponseOneOf9 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentMethodDataResponseOneOf", PaymentMethodDataResponseOneOf.class);
        schemas.put("PaymentMethodDataResponseOneOf1", PaymentMethodDataResponseOneOf1.class);
        schemas.put("PaymentMethodDataResponseOneOf10", PaymentMethodDataResponseOneOf10.class);
        schemas.put("PaymentMethodDataResponseOneOf11", PaymentMethodDataResponseOneOf11.class);
        schemas.put("PaymentMethodDataResponseOneOf12", PaymentMethodDataResponseOneOf12.class);
        schemas.put("PaymentMethodDataResponseOneOf13", PaymentMethodDataResponseOneOf13.class);
        schemas.put("PaymentMethodDataResponseOneOf14", PaymentMethodDataResponseOneOf14.class);
        schemas.put("PaymentMethodDataResponseOneOf15", PaymentMethodDataResponseOneOf15.class);
        schemas.put("PaymentMethodDataResponseOneOf2", PaymentMethodDataResponseOneOf2.class);
        schemas.put("PaymentMethodDataResponseOneOf3", PaymentMethodDataResponseOneOf3.class);
        schemas.put("PaymentMethodDataResponseOneOf4", PaymentMethodDataResponseOneOf4.class);
        schemas.put("PaymentMethodDataResponseOneOf5", PaymentMethodDataResponseOneOf5.class);
        schemas.put("PaymentMethodDataResponseOneOf6", PaymentMethodDataResponseOneOf6.class);
        schemas.put("PaymentMethodDataResponseOneOf7", PaymentMethodDataResponseOneOf7.class);
        schemas.put("PaymentMethodDataResponseOneOf8", PaymentMethodDataResponseOneOf8.class);
        schemas.put("PaymentMethodDataResponseOneOf9", PaymentMethodDataResponseOneOf9.class);
        JSON.registerDescendants(PaymentMethodDataResponse.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PaymentMethodDataResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf1.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf10.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf11.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf12.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf13.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf14.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf15.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf2.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf3.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf4.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf5.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf6.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf7.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf8.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodDataResponseOneOf9.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9
     *
     * @return The actual instance (PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf`. If the actual instance is not `PaymentMethodDataResponseOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf`
     */
    public PaymentMethodDataResponseOneOf getPaymentMethodDataResponseOneOf() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf1`. If the actual instance is not `PaymentMethodDataResponseOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf1`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf1`
     */
    public PaymentMethodDataResponseOneOf1 getPaymentMethodDataResponseOneOf1() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf10`. If the actual instance is not `PaymentMethodDataResponseOneOf10`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf10`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf10`
     */
    public PaymentMethodDataResponseOneOf10 getPaymentMethodDataResponseOneOf10() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf10)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf11`. If the actual instance is not `PaymentMethodDataResponseOneOf11`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf11`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf11`
     */
    public PaymentMethodDataResponseOneOf11 getPaymentMethodDataResponseOneOf11() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf11)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf12`. If the actual instance is not `PaymentMethodDataResponseOneOf12`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf12`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf12`
     */
    public PaymentMethodDataResponseOneOf12 getPaymentMethodDataResponseOneOf12() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf12)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf13`. If the actual instance is not `PaymentMethodDataResponseOneOf13`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf13`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf13`
     */
    public PaymentMethodDataResponseOneOf13 getPaymentMethodDataResponseOneOf13() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf13)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf14`. If the actual instance is not `PaymentMethodDataResponseOneOf14`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf14`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf14`
     */
    public PaymentMethodDataResponseOneOf14 getPaymentMethodDataResponseOneOf14() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf14)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf15`. If the actual instance is not `PaymentMethodDataResponseOneOf15`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf15`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf15`
     */
    public PaymentMethodDataResponseOneOf15 getPaymentMethodDataResponseOneOf15() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf15)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf2`. If the actual instance is not `PaymentMethodDataResponseOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf2`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf2`
     */
    public PaymentMethodDataResponseOneOf2 getPaymentMethodDataResponseOneOf2() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf3`. If the actual instance is not `PaymentMethodDataResponseOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf3`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf3`
     */
    public PaymentMethodDataResponseOneOf3 getPaymentMethodDataResponseOneOf3() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf3)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf4`. If the actual instance is not `PaymentMethodDataResponseOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf4`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf4`
     */
    public PaymentMethodDataResponseOneOf4 getPaymentMethodDataResponseOneOf4() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf4)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf5`. If the actual instance is not `PaymentMethodDataResponseOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf5`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf5`
     */
    public PaymentMethodDataResponseOneOf5 getPaymentMethodDataResponseOneOf5() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf5)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf6`. If the actual instance is not `PaymentMethodDataResponseOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf6`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf6`
     */
    public PaymentMethodDataResponseOneOf6 getPaymentMethodDataResponseOneOf6() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf6)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf7`. If the actual instance is not `PaymentMethodDataResponseOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf7`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf7`
     */
    public PaymentMethodDataResponseOneOf7 getPaymentMethodDataResponseOneOf7() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf7)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf8`. If the actual instance is not `PaymentMethodDataResponseOneOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf8`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf8`
     */
    public PaymentMethodDataResponseOneOf8 getPaymentMethodDataResponseOneOf8() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf8)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodDataResponseOneOf9`. If the actual instance is not `PaymentMethodDataResponseOneOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodDataResponseOneOf9`
     * @throws ClassCastException if the instance is not `PaymentMethodDataResponseOneOf9`
     */
    public PaymentMethodDataResponseOneOf9 getPaymentMethodDataResponseOneOf9() throws ClassCastException {
        return (PaymentMethodDataResponseOneOf9)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf1) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf1)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf2) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf2)getActualInstance()).toUrlQueryString(prefix + "one_of_2" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf3) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf3)getActualInstance()).toUrlQueryString(prefix + "one_of_3" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf4) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf4)getActualInstance()).toUrlQueryString(prefix + "one_of_4" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf5) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf5)getActualInstance()).toUrlQueryString(prefix + "one_of_5" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf6) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf6)getActualInstance()).toUrlQueryString(prefix + "one_of_6" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf7) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf7)getActualInstance()).toUrlQueryString(prefix + "one_of_7" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf8) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf8)getActualInstance()).toUrlQueryString(prefix + "one_of_8" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf9) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf9)getActualInstance()).toUrlQueryString(prefix + "one_of_9" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf10) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf10)getActualInstance()).toUrlQueryString(prefix + "one_of_10" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf11) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf11)getActualInstance()).toUrlQueryString(prefix + "one_of_11" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf12) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf12)getActualInstance()).toUrlQueryString(prefix + "one_of_12" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf13) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf13)getActualInstance()).toUrlQueryString(prefix + "one_of_13" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf14) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf14)getActualInstance()).toUrlQueryString(prefix + "one_of_14" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof PaymentMethodDataResponseOneOf15) {
        if (getActualInstance() != null) {
          joiner.add(((PaymentMethodDataResponseOneOf15)getActualInstance()).toUrlQueryString(prefix + "one_of_15" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

