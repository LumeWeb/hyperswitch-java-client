/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf1;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf10;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf11;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf11OpenBankingUk;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf12;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf12Przelewy24;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf13;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf13Sofort;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf14;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf14Trustly;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf15;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf16;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf17;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf2;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf2Blik;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf3;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf3Eps;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf4;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf4Giropay;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf5;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf6;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf6Interac;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf7;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf7OnlineBankingCzechRepublic;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf8;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf8OnlineBankingFinland;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOf9;
import com.lumeweb.hyperswitch.model.BankRedirectDataOneOfBancontactCard;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.lumeweb.hyperswitch.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
@JsonDeserialize(using = BankRedirectData.BankRedirectDataDeserializer.class)
@JsonSerialize(using = BankRedirectData.BankRedirectDataSerializer.class)
public class BankRedirectData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BankRedirectData.class.getName());

    public static class BankRedirectDataSerializer extends StdSerializer<BankRedirectData> {
        public BankRedirectDataSerializer(Class<BankRedirectData> t) {
            super(t);
        }

        public BankRedirectDataSerializer() {
            this(null);
        }

        @Override
        public void serialize(BankRedirectData value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class BankRedirectDataDeserializer extends StdDeserializer<BankRedirectData> {
        public BankRedirectDataDeserializer() {
            this(BankRedirectData.class);
        }

        public BankRedirectDataDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public BankRedirectData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize BankRedirectDataOneOf
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf.class.equals(Integer.class) || BankRedirectDataOneOf.class.equals(Long.class) || BankRedirectDataOneOf.class.equals(Float.class) || BankRedirectDataOneOf.class.equals(Double.class) || BankRedirectDataOneOf.class.equals(Boolean.class) || BankRedirectDataOneOf.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf.class.equals(Integer.class) || BankRedirectDataOneOf.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf.class.equals(Float.class) || BankRedirectDataOneOf.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf'", e);
            }

            // deserialize BankRedirectDataOneOf1
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf1.class.equals(Integer.class) || BankRedirectDataOneOf1.class.equals(Long.class) || BankRedirectDataOneOf1.class.equals(Float.class) || BankRedirectDataOneOf1.class.equals(Double.class) || BankRedirectDataOneOf1.class.equals(Boolean.class) || BankRedirectDataOneOf1.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf1.class.equals(Integer.class) || BankRedirectDataOneOf1.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf1.class.equals(Float.class) || BankRedirectDataOneOf1.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf1.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf1.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf1.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf1'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf1'", e);
            }

            // deserialize BankRedirectDataOneOf10
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf10.class.equals(Integer.class) || BankRedirectDataOneOf10.class.equals(Long.class) || BankRedirectDataOneOf10.class.equals(Float.class) || BankRedirectDataOneOf10.class.equals(Double.class) || BankRedirectDataOneOf10.class.equals(Boolean.class) || BankRedirectDataOneOf10.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf10.class.equals(Integer.class) || BankRedirectDataOneOf10.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf10.class.equals(Float.class) || BankRedirectDataOneOf10.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf10.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf10.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf10.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf10'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf10'", e);
            }

            // deserialize BankRedirectDataOneOf11
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf11.class.equals(Integer.class) || BankRedirectDataOneOf11.class.equals(Long.class) || BankRedirectDataOneOf11.class.equals(Float.class) || BankRedirectDataOneOf11.class.equals(Double.class) || BankRedirectDataOneOf11.class.equals(Boolean.class) || BankRedirectDataOneOf11.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf11.class.equals(Integer.class) || BankRedirectDataOneOf11.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf11.class.equals(Float.class) || BankRedirectDataOneOf11.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf11.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf11.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf11.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf11'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf11'", e);
            }

            // deserialize BankRedirectDataOneOf12
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf12.class.equals(Integer.class) || BankRedirectDataOneOf12.class.equals(Long.class) || BankRedirectDataOneOf12.class.equals(Float.class) || BankRedirectDataOneOf12.class.equals(Double.class) || BankRedirectDataOneOf12.class.equals(Boolean.class) || BankRedirectDataOneOf12.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf12.class.equals(Integer.class) || BankRedirectDataOneOf12.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf12.class.equals(Float.class) || BankRedirectDataOneOf12.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf12.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf12.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf12.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf12'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf12'", e);
            }

            // deserialize BankRedirectDataOneOf13
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf13.class.equals(Integer.class) || BankRedirectDataOneOf13.class.equals(Long.class) || BankRedirectDataOneOf13.class.equals(Float.class) || BankRedirectDataOneOf13.class.equals(Double.class) || BankRedirectDataOneOf13.class.equals(Boolean.class) || BankRedirectDataOneOf13.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf13.class.equals(Integer.class) || BankRedirectDataOneOf13.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf13.class.equals(Float.class) || BankRedirectDataOneOf13.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf13.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf13.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf13.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf13'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf13'", e);
            }

            // deserialize BankRedirectDataOneOf14
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf14.class.equals(Integer.class) || BankRedirectDataOneOf14.class.equals(Long.class) || BankRedirectDataOneOf14.class.equals(Float.class) || BankRedirectDataOneOf14.class.equals(Double.class) || BankRedirectDataOneOf14.class.equals(Boolean.class) || BankRedirectDataOneOf14.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf14.class.equals(Integer.class) || BankRedirectDataOneOf14.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf14.class.equals(Float.class) || BankRedirectDataOneOf14.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf14.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf14.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf14.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf14'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf14'", e);
            }

            // deserialize BankRedirectDataOneOf15
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf15.class.equals(Integer.class) || BankRedirectDataOneOf15.class.equals(Long.class) || BankRedirectDataOneOf15.class.equals(Float.class) || BankRedirectDataOneOf15.class.equals(Double.class) || BankRedirectDataOneOf15.class.equals(Boolean.class) || BankRedirectDataOneOf15.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf15.class.equals(Integer.class) || BankRedirectDataOneOf15.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf15.class.equals(Float.class) || BankRedirectDataOneOf15.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf15.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf15.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf15.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf15'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf15'", e);
            }

            // deserialize BankRedirectDataOneOf16
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf16.class.equals(Integer.class) || BankRedirectDataOneOf16.class.equals(Long.class) || BankRedirectDataOneOf16.class.equals(Float.class) || BankRedirectDataOneOf16.class.equals(Double.class) || BankRedirectDataOneOf16.class.equals(Boolean.class) || BankRedirectDataOneOf16.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf16.class.equals(Integer.class) || BankRedirectDataOneOf16.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf16.class.equals(Float.class) || BankRedirectDataOneOf16.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf16.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf16.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf16.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf16'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf16'", e);
            }

            // deserialize BankRedirectDataOneOf17
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf17.class.equals(Integer.class) || BankRedirectDataOneOf17.class.equals(Long.class) || BankRedirectDataOneOf17.class.equals(Float.class) || BankRedirectDataOneOf17.class.equals(Double.class) || BankRedirectDataOneOf17.class.equals(Boolean.class) || BankRedirectDataOneOf17.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf17.class.equals(Integer.class) || BankRedirectDataOneOf17.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf17.class.equals(Float.class) || BankRedirectDataOneOf17.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf17.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf17.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf17.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf17'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf17'", e);
            }

            // deserialize BankRedirectDataOneOf2
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf2.class.equals(Integer.class) || BankRedirectDataOneOf2.class.equals(Long.class) || BankRedirectDataOneOf2.class.equals(Float.class) || BankRedirectDataOneOf2.class.equals(Double.class) || BankRedirectDataOneOf2.class.equals(Boolean.class) || BankRedirectDataOneOf2.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf2.class.equals(Integer.class) || BankRedirectDataOneOf2.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf2.class.equals(Float.class) || BankRedirectDataOneOf2.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf2.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf2.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf2.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf2'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf2'", e);
            }

            // deserialize BankRedirectDataOneOf3
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf3.class.equals(Integer.class) || BankRedirectDataOneOf3.class.equals(Long.class) || BankRedirectDataOneOf3.class.equals(Float.class) || BankRedirectDataOneOf3.class.equals(Double.class) || BankRedirectDataOneOf3.class.equals(Boolean.class) || BankRedirectDataOneOf3.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf3.class.equals(Integer.class) || BankRedirectDataOneOf3.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf3.class.equals(Float.class) || BankRedirectDataOneOf3.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf3.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf3.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf3.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf3'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf3'", e);
            }

            // deserialize BankRedirectDataOneOf4
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf4.class.equals(Integer.class) || BankRedirectDataOneOf4.class.equals(Long.class) || BankRedirectDataOneOf4.class.equals(Float.class) || BankRedirectDataOneOf4.class.equals(Double.class) || BankRedirectDataOneOf4.class.equals(Boolean.class) || BankRedirectDataOneOf4.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf4.class.equals(Integer.class) || BankRedirectDataOneOf4.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf4.class.equals(Float.class) || BankRedirectDataOneOf4.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf4.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf4.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf4.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf4'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf4'", e);
            }

            // deserialize BankRedirectDataOneOf5
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf5.class.equals(Integer.class) || BankRedirectDataOneOf5.class.equals(Long.class) || BankRedirectDataOneOf5.class.equals(Float.class) || BankRedirectDataOneOf5.class.equals(Double.class) || BankRedirectDataOneOf5.class.equals(Boolean.class) || BankRedirectDataOneOf5.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf5.class.equals(Integer.class) || BankRedirectDataOneOf5.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf5.class.equals(Float.class) || BankRedirectDataOneOf5.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf5.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf5.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf5.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf5'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf5'", e);
            }

            // deserialize BankRedirectDataOneOf6
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf6.class.equals(Integer.class) || BankRedirectDataOneOf6.class.equals(Long.class) || BankRedirectDataOneOf6.class.equals(Float.class) || BankRedirectDataOneOf6.class.equals(Double.class) || BankRedirectDataOneOf6.class.equals(Boolean.class) || BankRedirectDataOneOf6.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf6.class.equals(Integer.class) || BankRedirectDataOneOf6.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf6.class.equals(Float.class) || BankRedirectDataOneOf6.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf6.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf6.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf6.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf6'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf6'", e);
            }

            // deserialize BankRedirectDataOneOf7
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf7.class.equals(Integer.class) || BankRedirectDataOneOf7.class.equals(Long.class) || BankRedirectDataOneOf7.class.equals(Float.class) || BankRedirectDataOneOf7.class.equals(Double.class) || BankRedirectDataOneOf7.class.equals(Boolean.class) || BankRedirectDataOneOf7.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf7.class.equals(Integer.class) || BankRedirectDataOneOf7.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf7.class.equals(Float.class) || BankRedirectDataOneOf7.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf7.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf7.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf7.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf7'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf7'", e);
            }

            // deserialize BankRedirectDataOneOf8
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf8.class.equals(Integer.class) || BankRedirectDataOneOf8.class.equals(Long.class) || BankRedirectDataOneOf8.class.equals(Float.class) || BankRedirectDataOneOf8.class.equals(Double.class) || BankRedirectDataOneOf8.class.equals(Boolean.class) || BankRedirectDataOneOf8.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf8.class.equals(Integer.class) || BankRedirectDataOneOf8.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf8.class.equals(Float.class) || BankRedirectDataOneOf8.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf8.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf8.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf8.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf8'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf8'", e);
            }

            // deserialize BankRedirectDataOneOf9
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (BankRedirectDataOneOf9.class.equals(Integer.class) || BankRedirectDataOneOf9.class.equals(Long.class) || BankRedirectDataOneOf9.class.equals(Float.class) || BankRedirectDataOneOf9.class.equals(Double.class) || BankRedirectDataOneOf9.class.equals(Boolean.class) || BankRedirectDataOneOf9.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((BankRedirectDataOneOf9.class.equals(Integer.class) || BankRedirectDataOneOf9.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((BankRedirectDataOneOf9.class.equals(Float.class) || BankRedirectDataOneOf9.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (BankRedirectDataOneOf9.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (BankRedirectDataOneOf9.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(BankRedirectDataOneOf9.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'BankRedirectDataOneOf9'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'BankRedirectDataOneOf9'", e);
            }

            if (match == 1) {
                BankRedirectData ret = new BankRedirectData();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for BankRedirectData: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public BankRedirectData getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "BankRedirectData cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public BankRedirectData() {
        super("oneOf", Boolean.FALSE);
    }

    public BankRedirectData(BankRedirectDataOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf10 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf11 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf12 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf13 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf14 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf15 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf16 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf17 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf4 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf5 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf6 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf7 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf8 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BankRedirectData(BankRedirectDataOneOf9 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BankRedirectDataOneOf", BankRedirectDataOneOf.class);
        schemas.put("BankRedirectDataOneOf1", BankRedirectDataOneOf1.class);
        schemas.put("BankRedirectDataOneOf10", BankRedirectDataOneOf10.class);
        schemas.put("BankRedirectDataOneOf11", BankRedirectDataOneOf11.class);
        schemas.put("BankRedirectDataOneOf12", BankRedirectDataOneOf12.class);
        schemas.put("BankRedirectDataOneOf13", BankRedirectDataOneOf13.class);
        schemas.put("BankRedirectDataOneOf14", BankRedirectDataOneOf14.class);
        schemas.put("BankRedirectDataOneOf15", BankRedirectDataOneOf15.class);
        schemas.put("BankRedirectDataOneOf16", BankRedirectDataOneOf16.class);
        schemas.put("BankRedirectDataOneOf17", BankRedirectDataOneOf17.class);
        schemas.put("BankRedirectDataOneOf2", BankRedirectDataOneOf2.class);
        schemas.put("BankRedirectDataOneOf3", BankRedirectDataOneOf3.class);
        schemas.put("BankRedirectDataOneOf4", BankRedirectDataOneOf4.class);
        schemas.put("BankRedirectDataOneOf5", BankRedirectDataOneOf5.class);
        schemas.put("BankRedirectDataOneOf6", BankRedirectDataOneOf6.class);
        schemas.put("BankRedirectDataOneOf7", BankRedirectDataOneOf7.class);
        schemas.put("BankRedirectDataOneOf8", BankRedirectDataOneOf8.class);
        schemas.put("BankRedirectDataOneOf9", BankRedirectDataOneOf9.class);
        JSON.registerDescendants(BankRedirectData.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return BankRedirectData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(BankRedirectDataOneOf.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf1.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf10.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf11.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf12.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf13.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf14.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf15.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf16.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf17.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf2.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf3.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf4.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf5.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf6.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf7.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf8.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(BankRedirectDataOneOf9.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9
     *
     * @return The actual instance (BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf`. If the actual instance is not `BankRedirectDataOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf`
     */
    public BankRedirectDataOneOf getBankRedirectDataOneOf() throws ClassCastException {
        return (BankRedirectDataOneOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf1`. If the actual instance is not `BankRedirectDataOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf1`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf1`
     */
    public BankRedirectDataOneOf1 getBankRedirectDataOneOf1() throws ClassCastException {
        return (BankRedirectDataOneOf1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf10`. If the actual instance is not `BankRedirectDataOneOf10`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf10`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf10`
     */
    public BankRedirectDataOneOf10 getBankRedirectDataOneOf10() throws ClassCastException {
        return (BankRedirectDataOneOf10)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf11`. If the actual instance is not `BankRedirectDataOneOf11`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf11`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf11`
     */
    public BankRedirectDataOneOf11 getBankRedirectDataOneOf11() throws ClassCastException {
        return (BankRedirectDataOneOf11)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf12`. If the actual instance is not `BankRedirectDataOneOf12`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf12`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf12`
     */
    public BankRedirectDataOneOf12 getBankRedirectDataOneOf12() throws ClassCastException {
        return (BankRedirectDataOneOf12)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf13`. If the actual instance is not `BankRedirectDataOneOf13`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf13`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf13`
     */
    public BankRedirectDataOneOf13 getBankRedirectDataOneOf13() throws ClassCastException {
        return (BankRedirectDataOneOf13)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf14`. If the actual instance is not `BankRedirectDataOneOf14`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf14`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf14`
     */
    public BankRedirectDataOneOf14 getBankRedirectDataOneOf14() throws ClassCastException {
        return (BankRedirectDataOneOf14)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf15`. If the actual instance is not `BankRedirectDataOneOf15`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf15`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf15`
     */
    public BankRedirectDataOneOf15 getBankRedirectDataOneOf15() throws ClassCastException {
        return (BankRedirectDataOneOf15)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf16`. If the actual instance is not `BankRedirectDataOneOf16`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf16`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf16`
     */
    public BankRedirectDataOneOf16 getBankRedirectDataOneOf16() throws ClassCastException {
        return (BankRedirectDataOneOf16)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf17`. If the actual instance is not `BankRedirectDataOneOf17`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf17`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf17`
     */
    public BankRedirectDataOneOf17 getBankRedirectDataOneOf17() throws ClassCastException {
        return (BankRedirectDataOneOf17)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf2`. If the actual instance is not `BankRedirectDataOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf2`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf2`
     */
    public BankRedirectDataOneOf2 getBankRedirectDataOneOf2() throws ClassCastException {
        return (BankRedirectDataOneOf2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf3`. If the actual instance is not `BankRedirectDataOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf3`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf3`
     */
    public BankRedirectDataOneOf3 getBankRedirectDataOneOf3() throws ClassCastException {
        return (BankRedirectDataOneOf3)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf4`. If the actual instance is not `BankRedirectDataOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf4`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf4`
     */
    public BankRedirectDataOneOf4 getBankRedirectDataOneOf4() throws ClassCastException {
        return (BankRedirectDataOneOf4)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf5`. If the actual instance is not `BankRedirectDataOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf5`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf5`
     */
    public BankRedirectDataOneOf5 getBankRedirectDataOneOf5() throws ClassCastException {
        return (BankRedirectDataOneOf5)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf6`. If the actual instance is not `BankRedirectDataOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf6`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf6`
     */
    public BankRedirectDataOneOf6 getBankRedirectDataOneOf6() throws ClassCastException {
        return (BankRedirectDataOneOf6)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf7`. If the actual instance is not `BankRedirectDataOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf7`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf7`
     */
    public BankRedirectDataOneOf7 getBankRedirectDataOneOf7() throws ClassCastException {
        return (BankRedirectDataOneOf7)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf8`. If the actual instance is not `BankRedirectDataOneOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf8`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf8`
     */
    public BankRedirectDataOneOf8 getBankRedirectDataOneOf8() throws ClassCastException {
        return (BankRedirectDataOneOf8)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankRedirectDataOneOf9`. If the actual instance is not `BankRedirectDataOneOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankRedirectDataOneOf9`
     * @throws ClassCastException if the instance is not `BankRedirectDataOneOf9`
     */
    public BankRedirectDataOneOf9 getBankRedirectDataOneOf9() throws ClassCastException {
        return (BankRedirectDataOneOf9)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof BankRedirectDataOneOf) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf1) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf1)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf2) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf2)getActualInstance()).toUrlQueryString(prefix + "one_of_2" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf3) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf3)getActualInstance()).toUrlQueryString(prefix + "one_of_3" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf4) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf4)getActualInstance()).toUrlQueryString(prefix + "one_of_4" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf5) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf5)getActualInstance()).toUrlQueryString(prefix + "one_of_5" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf6) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf6)getActualInstance()).toUrlQueryString(prefix + "one_of_6" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf7) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf7)getActualInstance()).toUrlQueryString(prefix + "one_of_7" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf8) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf8)getActualInstance()).toUrlQueryString(prefix + "one_of_8" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf9) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf9)getActualInstance()).toUrlQueryString(prefix + "one_of_9" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf10) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf10)getActualInstance()).toUrlQueryString(prefix + "one_of_10" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf11) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf11)getActualInstance()).toUrlQueryString(prefix + "one_of_11" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf12) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf12)getActualInstance()).toUrlQueryString(prefix + "one_of_12" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf13) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf13)getActualInstance()).toUrlQueryString(prefix + "one_of_13" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf14) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf14)getActualInstance()).toUrlQueryString(prefix + "one_of_14" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf15) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf15)getActualInstance()).toUrlQueryString(prefix + "one_of_15" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf16) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf16)getActualInstance()).toUrlQueryString(prefix + "one_of_16" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof BankRedirectDataOneOf17) {
        if (getActualInstance() != null) {
          joiner.add(((BankRedirectDataOneOf17)getActualInstance()).toUrlQueryString(prefix + "one_of_17" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

