/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.Address;
import com.hyperswitch.client.model.AuthenticationType;
import com.hyperswitch.client.model.BrowserInformation;
import com.hyperswitch.client.model.CaptureMethod;
import com.hyperswitch.client.model.Connector;
import com.hyperswitch.client.model.ConnectorMetadata;
import com.hyperswitch.client.model.CountryAlpha2;
import com.hyperswitch.client.model.Currency;
import com.hyperswitch.client.model.CustomerAcceptance;
import com.hyperswitch.client.model.CustomerDetails;
import com.hyperswitch.client.model.FeatureMetadata;
import com.hyperswitch.client.model.FutureUsage;
import com.hyperswitch.client.model.MandateData;
import com.hyperswitch.client.model.MerchantConnectorDetailsWrap;
import com.hyperswitch.client.model.OrderDetailsWithAmount;
import com.hyperswitch.client.model.PaymentChargeRequest;
import com.hyperswitch.client.model.PaymentCreatePaymentLinkConfig;
import com.hyperswitch.client.model.PaymentExperience;
import com.hyperswitch.client.model.PaymentMethod;
import com.hyperswitch.client.model.PaymentMethodDataRequest;
import com.hyperswitch.client.model.PaymentMethodType;
import com.hyperswitch.client.model.PaymentType;
import com.hyperswitch.client.model.RecurringDetails;
import com.hyperswitch.client.model.RequestSurchargeDetails;
import com.hyperswitch.client.model.RetryAction;
import com.hyperswitch.client.model.ScaExemptionType;
import com.hyperswitch.client.model.StraightThroughAlgorithm;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
* PaymentsRequest
*/
    @JsonPropertyOrder({
        PaymentsRequest.JSON_PROPERTY_AMOUNT,
        PaymentsRequest.JSON_PROPERTY_CURRENCY,
        PaymentsRequest.JSON_PROPERTY_AMOUNT_TO_CAPTURE,
        PaymentsRequest.JSON_PROPERTY_SHIPPING_COST,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_ID,
        PaymentsRequest.JSON_PROPERTY_MERCHANT_ID,
        PaymentsRequest.JSON_PROPERTY_ROUTING,
        PaymentsRequest.JSON_PROPERTY_CONNECTOR,
        PaymentsRequest.JSON_PROPERTY_CAPTURE_METHOD,
        PaymentsRequest.JSON_PROPERTY_AUTHENTICATION_TYPE,
        PaymentsRequest.JSON_PROPERTY_BILLING,
        PaymentsRequest.JSON_PROPERTY_CAPTURE_ON,
        PaymentsRequest.JSON_PROPERTY_CONFIRM,
        PaymentsRequest.JSON_PROPERTY_CUSTOMER,
        PaymentsRequest.JSON_PROPERTY_CUSTOMER_ID,
        PaymentsRequest.JSON_PROPERTY_EMAIL,
        PaymentsRequest.JSON_PROPERTY_NAME,
        PaymentsRequest.JSON_PROPERTY_PHONE,
        PaymentsRequest.JSON_PROPERTY_PHONE_COUNTRY_CODE,
        PaymentsRequest.JSON_PROPERTY_OFF_SESSION,
        PaymentsRequest.JSON_PROPERTY_DESCRIPTION,
        PaymentsRequest.JSON_PROPERTY_RETURN_URL,
        PaymentsRequest.JSON_PROPERTY_SETUP_FUTURE_USAGE,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_METHOD_DATA,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_METHOD,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_TOKEN,
        PaymentsRequest.JSON_PROPERTY_CARD_CVC,
        PaymentsRequest.JSON_PROPERTY_SHIPPING,
        PaymentsRequest.JSON_PROPERTY_STATEMENT_DESCRIPTOR_NAME,
        PaymentsRequest.JSON_PROPERTY_STATEMENT_DESCRIPTOR_SUFFIX,
        PaymentsRequest.JSON_PROPERTY_ORDER_DETAILS,
        PaymentsRequest.JSON_PROPERTY_CLIENT_SECRET,
        PaymentsRequest.JSON_PROPERTY_MANDATE_DATA,
        PaymentsRequest.JSON_PROPERTY_CUSTOMER_ACCEPTANCE,
        PaymentsRequest.JSON_PROPERTY_MANDATE_ID,
        PaymentsRequest.JSON_PROPERTY_BROWSER_INFO,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_EXPERIENCE,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_METHOD_TYPE,
        PaymentsRequest.JSON_PROPERTY_BUSINESS_COUNTRY,
        PaymentsRequest.JSON_PROPERTY_BUSINESS_LABEL,
        PaymentsRequest.JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS,
        PaymentsRequest.JSON_PROPERTY_ALLOWED_PAYMENT_METHOD_TYPES,
        PaymentsRequest.JSON_PROPERTY_BUSINESS_SUB_LABEL,
        PaymentsRequest.JSON_PROPERTY_RETRY_ACTION,
        PaymentsRequest.JSON_PROPERTY_METADATA,
        PaymentsRequest.JSON_PROPERTY_CONNECTOR_METADATA,
        PaymentsRequest.JSON_PROPERTY_FEATURE_METADATA,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_LINK,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_LINK_CONFIG,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_LINK_CONFIG_ID,
        PaymentsRequest.JSON_PROPERTY_PROFILE_ID,
        PaymentsRequest.JSON_PROPERTY_SURCHARGE_DETAILS,
        PaymentsRequest.JSON_PROPERTY_PAYMENT_TYPE,
        PaymentsRequest.JSON_PROPERTY_REQUEST_INCREMENTAL_AUTHORIZATION,
        PaymentsRequest.JSON_PROPERTY_SESSION_EXPIRY,
        PaymentsRequest.JSON_PROPERTY_FRM_METADATA,
        PaymentsRequest.JSON_PROPERTY_REQUEST_EXTERNAL_THREE_DS_AUTHENTICATION,
        PaymentsRequest.JSON_PROPERTY_RECURRING_DETAILS,
        PaymentsRequest.JSON_PROPERTY_CHARGES,
        PaymentsRequest.JSON_PROPERTY_MERCHANT_ORDER_REFERENCE_ID,
        PaymentsRequest.JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION,
        PaymentsRequest.JSON_PROPERTY_PSD2_SCA_EXEMPTION_TYPE
    })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PaymentsRequest {
        public static final String JSON_PROPERTY_AMOUNT = "amount";
    @javax.annotation.Nullable
            private JsonNullable<Long> amount = JsonNullable.<Long>undefined();

        public static final String JSON_PROPERTY_CURRENCY = "currency";
    @javax.annotation.Nullable
            private JsonNullable<Currency> currency = JsonNullable.<Currency>undefined();

        public static final String JSON_PROPERTY_AMOUNT_TO_CAPTURE = "amount_to_capture";
    @javax.annotation.Nullable
            private JsonNullable<Long> amountToCapture = JsonNullable.<Long>undefined();

        public static final String JSON_PROPERTY_SHIPPING_COST = "shipping_cost";
    @javax.annotation.Nullable
            private JsonNullable<Long> shippingCost = JsonNullable.<Long>undefined();

        public static final String JSON_PROPERTY_PAYMENT_ID = "payment_id";
    @javax.annotation.Nullable
            private JsonNullable<String> paymentId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_MERCHANT_ID = "merchant_id";
    @javax.annotation.Nullable
            private JsonNullable<String> merchantId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_ROUTING = "routing";
    @javax.annotation.Nullable
            private JsonNullable<StraightThroughAlgorithm> routing = JsonNullable.<StraightThroughAlgorithm>undefined();

        public static final String JSON_PROPERTY_CONNECTOR = "connector";
    @javax.annotation.Nullable
            private JsonNullable<List<Connector>> connector = JsonNullable.<List<Connector>>undefined();

        public static final String JSON_PROPERTY_CAPTURE_METHOD = "capture_method";
    @javax.annotation.Nullable
            private JsonNullable<CaptureMethod> captureMethod = JsonNullable.<CaptureMethod>undefined();

        public static final String JSON_PROPERTY_AUTHENTICATION_TYPE = "authentication_type";
    @javax.annotation.Nullable
            private JsonNullable<AuthenticationType> authenticationType = JsonNullable.<AuthenticationType>of(AuthenticationType.THREE_DS);

        public static final String JSON_PROPERTY_BILLING = "billing";
    @javax.annotation.Nullable
            private JsonNullable<Address> billing = JsonNullable.<Address>undefined();

        public static final String JSON_PROPERTY_CAPTURE_ON = "capture_on";
    @javax.annotation.Nullable
            private JsonNullable<OffsetDateTime> captureOn = JsonNullable.<OffsetDateTime>undefined();

        public static final String JSON_PROPERTY_CONFIRM = "confirm";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> confirm = JsonNullable.<Boolean>of(false);

        public static final String JSON_PROPERTY_CUSTOMER = "customer";
    @javax.annotation.Nullable
            private JsonNullable<CustomerDetails> customer = JsonNullable.<CustomerDetails>undefined();

        public static final String JSON_PROPERTY_CUSTOMER_ID = "customer_id";
    @javax.annotation.Nullable
            private JsonNullable<String> customerId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_EMAIL = "email";
    @javax.annotation.Nullable
            private JsonNullable<String> email = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_NAME = "name";
    @javax.annotation.Nullable
            private JsonNullable<String> name = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_PHONE = "phone";
    @javax.annotation.Nullable
            private JsonNullable<String> phone = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_PHONE_COUNTRY_CODE = "phone_country_code";
    @javax.annotation.Nullable
            private JsonNullable<String> phoneCountryCode = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_OFF_SESSION = "off_session";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> offSession = JsonNullable.<Boolean>undefined();

        public static final String JSON_PROPERTY_DESCRIPTION = "description";
    @javax.annotation.Nullable
            private JsonNullable<String> description = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_RETURN_URL = "return_url";
    @javax.annotation.Nullable
            private JsonNullable<String> returnUrl = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_SETUP_FUTURE_USAGE = "setup_future_usage";
    @javax.annotation.Nullable
            private JsonNullable<FutureUsage> setupFutureUsage = JsonNullable.<FutureUsage>undefined();

        public static final String JSON_PROPERTY_PAYMENT_METHOD_DATA = "payment_method_data";
    @javax.annotation.Nullable
            private JsonNullable<PaymentMethodDataRequest> paymentMethodData = JsonNullable.<PaymentMethodDataRequest>undefined();

        public static final String JSON_PROPERTY_PAYMENT_METHOD = "payment_method";
    @javax.annotation.Nullable
            private JsonNullable<PaymentMethod> paymentMethod = JsonNullable.<PaymentMethod>undefined();

        public static final String JSON_PROPERTY_PAYMENT_TOKEN = "payment_token";
    @javax.annotation.Nullable
            private JsonNullable<String> paymentToken = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_CARD_CVC = "card_cvc";
    @javax.annotation.Nullable
            private JsonNullable<String> cardCvc = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_SHIPPING = "shipping";
    @javax.annotation.Nullable
            private JsonNullable<Address> shipping = JsonNullable.<Address>undefined();

        public static final String JSON_PROPERTY_STATEMENT_DESCRIPTOR_NAME = "statement_descriptor_name";
    @javax.annotation.Nullable
            private JsonNullable<String> statementDescriptorName = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_STATEMENT_DESCRIPTOR_SUFFIX = "statement_descriptor_suffix";
    @javax.annotation.Nullable
            private JsonNullable<String> statementDescriptorSuffix = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_ORDER_DETAILS = "order_details";
    @javax.annotation.Nullable
            private JsonNullable<List<OrderDetailsWithAmount>> orderDetails = JsonNullable.<List<OrderDetailsWithAmount>>undefined();

        public static final String JSON_PROPERTY_CLIENT_SECRET = "client_secret";
    @javax.annotation.Nullable
            private JsonNullable<String> clientSecret = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_MANDATE_DATA = "mandate_data";
    @javax.annotation.Nullable
            private JsonNullable<MandateData> mandateData = JsonNullable.<MandateData>undefined();

        public static final String JSON_PROPERTY_CUSTOMER_ACCEPTANCE = "customer_acceptance";
    @javax.annotation.Nullable
            private JsonNullable<CustomerAcceptance> customerAcceptance = JsonNullable.<CustomerAcceptance>undefined();

        public static final String JSON_PROPERTY_MANDATE_ID = "mandate_id";
    @javax.annotation.Nullable
            private JsonNullable<String> mandateId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_BROWSER_INFO = "browser_info";
    @javax.annotation.Nullable
            private JsonNullable<BrowserInformation> browserInfo = JsonNullable.<BrowserInformation>undefined();

        public static final String JSON_PROPERTY_PAYMENT_EXPERIENCE = "payment_experience";
    @javax.annotation.Nullable
            private JsonNullable<PaymentExperience> paymentExperience = JsonNullable.<PaymentExperience>undefined();

        public static final String JSON_PROPERTY_PAYMENT_METHOD_TYPE = "payment_method_type";
    @javax.annotation.Nullable
            private JsonNullable<PaymentMethodType> paymentMethodType = JsonNullable.<PaymentMethodType>undefined();

        public static final String JSON_PROPERTY_BUSINESS_COUNTRY = "business_country";
    @javax.annotation.Nullable
            private JsonNullable<CountryAlpha2> businessCountry = JsonNullable.<CountryAlpha2>undefined();

        public static final String JSON_PROPERTY_BUSINESS_LABEL = "business_label";
    @javax.annotation.Nullable
            private JsonNullable<String> businessLabel = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS = "merchant_connector_details";
    @javax.annotation.Nullable
            private JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>undefined();

        public static final String JSON_PROPERTY_ALLOWED_PAYMENT_METHOD_TYPES = "allowed_payment_method_types";
    @javax.annotation.Nullable
            private JsonNullable<List<PaymentMethodType>> allowedPaymentMethodTypes = JsonNullable.<List<PaymentMethodType>>undefined();

        public static final String JSON_PROPERTY_BUSINESS_SUB_LABEL = "business_sub_label";
    @javax.annotation.Nullable
            private JsonNullable<String> businessSubLabel = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_RETRY_ACTION = "retry_action";
    @javax.annotation.Nullable
            private JsonNullable<RetryAction> retryAction = JsonNullable.<RetryAction>undefined();

        public static final String JSON_PROPERTY_METADATA = "metadata";
    @javax.annotation.Nullable
            private JsonNullable<Object> metadata = JsonNullable.<Object>undefined();

        public static final String JSON_PROPERTY_CONNECTOR_METADATA = "connector_metadata";
    @javax.annotation.Nullable
            private JsonNullable<ConnectorMetadata> connectorMetadata = JsonNullable.<ConnectorMetadata>undefined();

        public static final String JSON_PROPERTY_FEATURE_METADATA = "feature_metadata";
    @javax.annotation.Nullable
            private JsonNullable<FeatureMetadata> featureMetadata = JsonNullable.<FeatureMetadata>undefined();

        public static final String JSON_PROPERTY_PAYMENT_LINK = "payment_link";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> paymentLink = JsonNullable.<Boolean>of(false);

        public static final String JSON_PROPERTY_PAYMENT_LINK_CONFIG = "payment_link_config";
    @javax.annotation.Nullable
            private JsonNullable<PaymentCreatePaymentLinkConfig> paymentLinkConfig = JsonNullable.<PaymentCreatePaymentLinkConfig>undefined();

        public static final String JSON_PROPERTY_PAYMENT_LINK_CONFIG_ID = "payment_link_config_id";
    @javax.annotation.Nullable
            private JsonNullable<String> paymentLinkConfigId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_PROFILE_ID = "profile_id";
    @javax.annotation.Nullable
            private JsonNullable<String> profileId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_SURCHARGE_DETAILS = "surcharge_details";
    @javax.annotation.Nullable
            private JsonNullable<RequestSurchargeDetails> surchargeDetails = JsonNullable.<RequestSurchargeDetails>undefined();

        public static final String JSON_PROPERTY_PAYMENT_TYPE = "payment_type";
    @javax.annotation.Nullable
            private JsonNullable<PaymentType> paymentType = JsonNullable.<PaymentType>undefined();

        public static final String JSON_PROPERTY_REQUEST_INCREMENTAL_AUTHORIZATION = "request_incremental_authorization";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> requestIncrementalAuthorization = JsonNullable.<Boolean>undefined();

        public static final String JSON_PROPERTY_SESSION_EXPIRY = "session_expiry";
    @javax.annotation.Nullable
            private JsonNullable<Integer> sessionExpiry = JsonNullable.<Integer>undefined();

        public static final String JSON_PROPERTY_FRM_METADATA = "frm_metadata";
    @javax.annotation.Nullable
            private JsonNullable<Object> frmMetadata = JsonNullable.<Object>undefined();

        public static final String JSON_PROPERTY_REQUEST_EXTERNAL_THREE_DS_AUTHENTICATION = "request_external_three_ds_authentication";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> requestExternalThreeDsAuthentication = JsonNullable.<Boolean>undefined();

        public static final String JSON_PROPERTY_RECURRING_DETAILS = "recurring_details";
    @javax.annotation.Nullable
            private JsonNullable<RecurringDetails> recurringDetails = JsonNullable.<RecurringDetails>undefined();

        public static final String JSON_PROPERTY_CHARGES = "charges";
    @javax.annotation.Nullable
            private JsonNullable<PaymentChargeRequest> charges = JsonNullable.<PaymentChargeRequest>undefined();

        public static final String JSON_PROPERTY_MERCHANT_ORDER_REFERENCE_ID = "merchant_order_reference_id";
    @javax.annotation.Nullable
            private JsonNullable<String> merchantOrderReferenceId = JsonNullable.<String>undefined();

        public static final String JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION = "skip_external_tax_calculation";
    @javax.annotation.Nullable
            private JsonNullable<Boolean> skipExternalTaxCalculation = JsonNullable.<Boolean>undefined();

        public static final String JSON_PROPERTY_PSD2_SCA_EXEMPTION_TYPE = "psd2_sca_exemption_type";
    @javax.annotation.Nullable
            private JsonNullable<ScaExemptionType> psd2ScaExemptionType = JsonNullable.<ScaExemptionType>undefined();

public PaymentsRequest() {
}

        public PaymentsRequest amount(@javax.annotation.Nullable Long amount) {
        this.amount = JsonNullable.<Long>of(amount);
        
        return this;
        }

    /**
        * The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)
        * minimum: 0
    * @return amount
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Long getAmount() {
                return amount.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Long> getAmount_JsonNullable() {
        return amount;
        }
    
        @JsonProperty(JSON_PROPERTY_AMOUNT)
        public void setAmount_JsonNullable(JsonNullable<Long> amount) {
        this.amount = amount;
        }

          public void setAmount(@javax.annotation.Nullable Long amount) {
            this.amount = JsonNullable.<Long>of(amount);
        }

        public PaymentsRequest currency(@javax.annotation.Nullable Currency currency) {
        this.currency = JsonNullable.<Currency>of(currency);
        
        return this;
        }

    /**
        * Get currency
    * @return currency
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Currency getCurrency() {
                return currency.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Currency> getCurrency_JsonNullable() {
        return currency;
        }
    
        @JsonProperty(JSON_PROPERTY_CURRENCY)
        public void setCurrency_JsonNullable(JsonNullable<Currency> currency) {
        this.currency = currency;
        }

          public void setCurrency(@javax.annotation.Nullable Currency currency) {
            this.currency = JsonNullable.<Currency>of(currency);
        }

        public PaymentsRequest amountToCapture(@javax.annotation.Nullable Long amountToCapture) {
        this.amountToCapture = JsonNullable.<Long>of(amountToCapture);
        
        return this;
        }

    /**
        * The Amount to be captured / debited from the users payment method. It shall be in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, the default amount_to_capture will be the payment amount. Also, it must be less than or equal to the original payment account.
    * @return amountToCapture
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Long getAmountToCapture() {
                return amountToCapture.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_AMOUNT_TO_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Long> getAmountToCapture_JsonNullable() {
        return amountToCapture;
        }
    
        @JsonProperty(JSON_PROPERTY_AMOUNT_TO_CAPTURE)
        public void setAmountToCapture_JsonNullable(JsonNullable<Long> amountToCapture) {
        this.amountToCapture = amountToCapture;
        }

          public void setAmountToCapture(@javax.annotation.Nullable Long amountToCapture) {
            this.amountToCapture = JsonNullable.<Long>of(amountToCapture);
        }

        public PaymentsRequest shippingCost(@javax.annotation.Nullable Long shippingCost) {
        this.shippingCost = JsonNullable.<Long>of(shippingCost);
        
        return this;
        }

    /**
        * The shipping cost for the payment. This is required for tax calculation in some regions.
    * @return shippingCost
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Long getShippingCost() {
                return shippingCost.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Long> getShippingCost_JsonNullable() {
        return shippingCost;
        }
    
        @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
        public void setShippingCost_JsonNullable(JsonNullable<Long> shippingCost) {
        this.shippingCost = shippingCost;
        }

          public void setShippingCost(@javax.annotation.Nullable Long shippingCost) {
            this.shippingCost = JsonNullable.<Long>of(shippingCost);
        }

        public PaymentsRequest paymentId(@javax.annotation.Nullable String paymentId) {
        this.paymentId = JsonNullable.<String>of(paymentId);
        
        return this;
        }

    /**
        * Unique identifier for the payment. This ensures idempotency for multiple payments that have been done by a single merchant. The value for this field can be specified in the request, it will be auto generated otherwise and returned in the API response.
    * @return paymentId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getPaymentId() {
                return paymentId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getPaymentId_JsonNullable() {
        return paymentId;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
        public void setPaymentId_JsonNullable(JsonNullable<String> paymentId) {
        this.paymentId = paymentId;
        }

          public void setPaymentId(@javax.annotation.Nullable String paymentId) {
            this.paymentId = JsonNullable.<String>of(paymentId);
        }

        public PaymentsRequest merchantId(@javax.annotation.Nullable String merchantId) {
        this.merchantId = JsonNullable.<String>of(merchantId);
        
        return this;
        }

    /**
        * This is an identifier for the merchant account. This is inferred from the API key provided during the request
    * @return merchantId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getMerchantId() {
                return merchantId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getMerchantId_JsonNullable() {
        return merchantId;
        }
    
        @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
        public void setMerchantId_JsonNullable(JsonNullable<String> merchantId) {
        this.merchantId = merchantId;
        }

          public void setMerchantId(@javax.annotation.Nullable String merchantId) {
            this.merchantId = JsonNullable.<String>of(merchantId);
        }

        public PaymentsRequest routing(@javax.annotation.Nullable StraightThroughAlgorithm routing) {
        this.routing = JsonNullable.<StraightThroughAlgorithm>of(routing);
        
        return this;
        }

    /**
        * Get routing
    * @return routing
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public StraightThroughAlgorithm getRouting() {
                return routing.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_ROUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<StraightThroughAlgorithm> getRouting_JsonNullable() {
        return routing;
        }
    
        @JsonProperty(JSON_PROPERTY_ROUTING)
        public void setRouting_JsonNullable(JsonNullable<StraightThroughAlgorithm> routing) {
        this.routing = routing;
        }

          public void setRouting(@javax.annotation.Nullable StraightThroughAlgorithm routing) {
            this.routing = JsonNullable.<StraightThroughAlgorithm>of(routing);
        }

        public PaymentsRequest connector(@javax.annotation.Nullable List<Connector> connector) {
        this.connector = JsonNullable.<List<Connector>>of(connector);
        
        return this;
        }

            public PaymentsRequest addConnectorItem(Connector connectorItem) {
                if (this.connector == null || !this.connector.isPresent()) {
                this.connector = JsonNullable.<List<Connector>>of(new ArrayList<>());
                }
                try {
                this.connector.get().add(connectorItem);
                } catch (java.util.NoSuchElementException e) {
                // this can never happen, as we make sure above that the value is present
                }
                return this;
            }

    /**
        * This allows to manually select a connector with which the payment can go through.
    * @return connector
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public List<Connector> getConnector() {
                return connector.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<List<Connector>> getConnector_JsonNullable() {
        return connector;
        }
    
        @JsonProperty(JSON_PROPERTY_CONNECTOR)
        public void setConnector_JsonNullable(JsonNullable<List<Connector>> connector) {
        this.connector = connector;
        }

          public void setConnector(@javax.annotation.Nullable List<Connector> connector) {
            this.connector = JsonNullable.<List<Connector>>of(connector);
        }

        public PaymentsRequest captureMethod(@javax.annotation.Nullable CaptureMethod captureMethod) {
        this.captureMethod = JsonNullable.<CaptureMethod>of(captureMethod);
        
        return this;
        }

    /**
        * Get captureMethod
    * @return captureMethod
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public CaptureMethod getCaptureMethod() {
                return captureMethod.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CAPTURE_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<CaptureMethod> getCaptureMethod_JsonNullable() {
        return captureMethod;
        }
    
        @JsonProperty(JSON_PROPERTY_CAPTURE_METHOD)
        public void setCaptureMethod_JsonNullable(JsonNullable<CaptureMethod> captureMethod) {
        this.captureMethod = captureMethod;
        }

          public void setCaptureMethod(@javax.annotation.Nullable CaptureMethod captureMethod) {
            this.captureMethod = JsonNullable.<CaptureMethod>of(captureMethod);
        }

        public PaymentsRequest authenticationType(@javax.annotation.Nullable AuthenticationType authenticationType) {
        this.authenticationType = JsonNullable.<AuthenticationType>of(authenticationType);
        
        return this;
        }

    /**
        * Get authenticationType
    * @return authenticationType
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public AuthenticationType getAuthenticationType() {
                return authenticationType.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<AuthenticationType> getAuthenticationType_JsonNullable() {
        return authenticationType;
        }
    
        @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
        public void setAuthenticationType_JsonNullable(JsonNullable<AuthenticationType> authenticationType) {
        this.authenticationType = authenticationType;
        }

          public void setAuthenticationType(@javax.annotation.Nullable AuthenticationType authenticationType) {
            this.authenticationType = JsonNullable.<AuthenticationType>of(authenticationType);
        }

        public PaymentsRequest billing(@javax.annotation.Nullable Address billing) {
        this.billing = JsonNullable.<Address>of(billing);
        
        return this;
        }

    /**
        * Get billing
    * @return billing
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Address getBilling() {
                return billing.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_BILLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Address> getBilling_JsonNullable() {
        return billing;
        }
    
        @JsonProperty(JSON_PROPERTY_BILLING)
        public void setBilling_JsonNullable(JsonNullable<Address> billing) {
        this.billing = billing;
        }

          public void setBilling(@javax.annotation.Nullable Address billing) {
            this.billing = JsonNullable.<Address>of(billing);
        }

        public PaymentsRequest captureOn(@javax.annotation.Nullable OffsetDateTime captureOn) {
        this.captureOn = JsonNullable.<OffsetDateTime>of(captureOn);
        
        return this;
        }

    /**
        * A timestamp (ISO 8601 code) that determines when the payment should be captured. Providing this field will automatically set &#x60;capture&#x60; to true
    * @return captureOn
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public OffsetDateTime getCaptureOn() {
                return captureOn.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CAPTURE_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<OffsetDateTime> getCaptureOn_JsonNullable() {
        return captureOn;
        }
    
        @JsonProperty(JSON_PROPERTY_CAPTURE_ON)
        public void setCaptureOn_JsonNullable(JsonNullable<OffsetDateTime> captureOn) {
        this.captureOn = captureOn;
        }

          public void setCaptureOn(@javax.annotation.Nullable OffsetDateTime captureOn) {
            this.captureOn = JsonNullable.<OffsetDateTime>of(captureOn);
        }

        public PaymentsRequest confirm(@javax.annotation.Nullable Boolean confirm) {
        this.confirm = JsonNullable.<Boolean>of(confirm);
        
        return this;
        }

    /**
        * Whether to confirm the payment (if applicable). It can be used to completely process a payment by attaching a payment method, setting &#x60;confirm&#x3D;true&#x60; and &#x60;capture_method &#x3D; automatic&#x60; in the *Payments/Create API* request itself.
    * @return confirm
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getConfirm() {
                return confirm.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONFIRM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getConfirm_JsonNullable() {
        return confirm;
        }
    
        @JsonProperty(JSON_PROPERTY_CONFIRM)
        public void setConfirm_JsonNullable(JsonNullable<Boolean> confirm) {
        this.confirm = confirm;
        }

          public void setConfirm(@javax.annotation.Nullable Boolean confirm) {
            this.confirm = JsonNullable.<Boolean>of(confirm);
        }

        public PaymentsRequest customer(@javax.annotation.Nullable CustomerDetails customer) {
        this.customer = JsonNullable.<CustomerDetails>of(customer);
        
        return this;
        }

    /**
        * Get customer
    * @return customer
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public CustomerDetails getCustomer() {
                return customer.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<CustomerDetails> getCustomer_JsonNullable() {
        return customer;
        }
    
        @JsonProperty(JSON_PROPERTY_CUSTOMER)
        public void setCustomer_JsonNullable(JsonNullable<CustomerDetails> customer) {
        this.customer = customer;
        }

          public void setCustomer(@javax.annotation.Nullable CustomerDetails customer) {
            this.customer = JsonNullable.<CustomerDetails>of(customer);
        }

        public PaymentsRequest customerId(@javax.annotation.Nullable String customerId) {
        this.customerId = JsonNullable.<String>of(customerId);
        
        return this;
        }

    /**
        * The identifier for the customer
    * @return customerId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getCustomerId() {
                return customerId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getCustomerId_JsonNullable() {
        return customerId;
        }
    
        @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
        public void setCustomerId_JsonNullable(JsonNullable<String> customerId) {
        this.customerId = customerId;
        }

          public void setCustomerId(@javax.annotation.Nullable String customerId) {
            this.customerId = JsonNullable.<String>of(customerId);
        }

        public PaymentsRequest email(@javax.annotation.Nullable String email) {
        this.email = JsonNullable.<String>of(email);
        
        return this;
        }

    /**
        * The customer&#39;s email address. This field will be deprecated soon, use the customer object instead
    * @return email
        * @deprecated
    */
        @Deprecated
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getEmail() {
                return email.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getEmail_JsonNullable() {
        return email;
        }
    
        @JsonProperty(JSON_PROPERTY_EMAIL)
        public void setEmail_JsonNullable(JsonNullable<String> email) {
        this.email = email;
        }

          public void setEmail(@javax.annotation.Nullable String email) {
            this.email = JsonNullable.<String>of(email);
        }

        public PaymentsRequest name(@javax.annotation.Nullable String name) {
        this.name = JsonNullable.<String>of(name);
        
        return this;
        }

    /**
        * The customer&#39;s name. This field will be deprecated soon, use the customer object instead.
    * @return name
        * @deprecated
    */
        @Deprecated
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getName() {
                return name.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getName_JsonNullable() {
        return name;
        }
    
        @JsonProperty(JSON_PROPERTY_NAME)
        public void setName_JsonNullable(JsonNullable<String> name) {
        this.name = name;
        }

          public void setName(@javax.annotation.Nullable String name) {
            this.name = JsonNullable.<String>of(name);
        }

        public PaymentsRequest phone(@javax.annotation.Nullable String phone) {
        this.phone = JsonNullable.<String>of(phone);
        
        return this;
        }

    /**
        * The customer&#39;s phone number This field will be deprecated soon, use the customer object instead
    * @return phone
        * @deprecated
    */
        @Deprecated
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getPhone() {
                return phone.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getPhone_JsonNullable() {
        return phone;
        }
    
        @JsonProperty(JSON_PROPERTY_PHONE)
        public void setPhone_JsonNullable(JsonNullable<String> phone) {
        this.phone = phone;
        }

          public void setPhone(@javax.annotation.Nullable String phone) {
            this.phone = JsonNullable.<String>of(phone);
        }

        public PaymentsRequest phoneCountryCode(@javax.annotation.Nullable String phoneCountryCode) {
        this.phoneCountryCode = JsonNullable.<String>of(phoneCountryCode);
        
        return this;
        }

    /**
        * The country code for the customer phone number This field will be deprecated soon, use the customer object instead
    * @return phoneCountryCode
        * @deprecated
    */
        @Deprecated
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getPhoneCountryCode() {
                return phoneCountryCode.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PHONE_COUNTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getPhoneCountryCode_JsonNullable() {
        return phoneCountryCode;
        }
    
        @JsonProperty(JSON_PROPERTY_PHONE_COUNTRY_CODE)
        public void setPhoneCountryCode_JsonNullable(JsonNullable<String> phoneCountryCode) {
        this.phoneCountryCode = phoneCountryCode;
        }

          public void setPhoneCountryCode(@javax.annotation.Nullable String phoneCountryCode) {
            this.phoneCountryCode = JsonNullable.<String>of(phoneCountryCode);
        }

        public PaymentsRequest offSession(@javax.annotation.Nullable Boolean offSession) {
        this.offSession = JsonNullable.<Boolean>of(offSession);
        
        return this;
        }

    /**
        * Set to true to indicate that the customer is not in your checkout flow during this payment, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and charge them later. When making a recurring payment by passing a mandate_id, this parameter is mandatory
    * @return offSession
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getOffSession() {
                return offSession.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_OFF_SESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getOffSession_JsonNullable() {
        return offSession;
        }
    
        @JsonProperty(JSON_PROPERTY_OFF_SESSION)
        public void setOffSession_JsonNullable(JsonNullable<Boolean> offSession) {
        this.offSession = offSession;
        }

          public void setOffSession(@javax.annotation.Nullable Boolean offSession) {
            this.offSession = JsonNullable.<Boolean>of(offSession);
        }

        public PaymentsRequest description(@javax.annotation.Nullable String description) {
        this.description = JsonNullable.<String>of(description);
        
        return this;
        }

    /**
        * A description for the payment
    * @return description
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getDescription() {
                return description.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getDescription_JsonNullable() {
        return description;
        }
    
        @JsonProperty(JSON_PROPERTY_DESCRIPTION)
        public void setDescription_JsonNullable(JsonNullable<String> description) {
        this.description = description;
        }

          public void setDescription(@javax.annotation.Nullable String description) {
            this.description = JsonNullable.<String>of(description);
        }

        public PaymentsRequest returnUrl(@javax.annotation.Nullable String returnUrl) {
        this.returnUrl = JsonNullable.<String>of(returnUrl);
        
        return this;
        }

    /**
        * The URL to which you want the user to be redirected after the completion of the payment operation
    * @return returnUrl
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getReturnUrl() {
                return returnUrl.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_RETURN_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getReturnUrl_JsonNullable() {
        return returnUrl;
        }
    
        @JsonProperty(JSON_PROPERTY_RETURN_URL)
        public void setReturnUrl_JsonNullable(JsonNullable<String> returnUrl) {
        this.returnUrl = returnUrl;
        }

          public void setReturnUrl(@javax.annotation.Nullable String returnUrl) {
            this.returnUrl = JsonNullable.<String>of(returnUrl);
        }

        public PaymentsRequest setupFutureUsage(@javax.annotation.Nullable FutureUsage setupFutureUsage) {
        this.setupFutureUsage = JsonNullable.<FutureUsage>of(setupFutureUsage);
        
        return this;
        }

    /**
        * Get setupFutureUsage
    * @return setupFutureUsage
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public FutureUsage getSetupFutureUsage() {
                return setupFutureUsage.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SETUP_FUTURE_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<FutureUsage> getSetupFutureUsage_JsonNullable() {
        return setupFutureUsage;
        }
    
        @JsonProperty(JSON_PROPERTY_SETUP_FUTURE_USAGE)
        public void setSetupFutureUsage_JsonNullable(JsonNullable<FutureUsage> setupFutureUsage) {
        this.setupFutureUsage = setupFutureUsage;
        }

          public void setSetupFutureUsage(@javax.annotation.Nullable FutureUsage setupFutureUsage) {
            this.setupFutureUsage = JsonNullable.<FutureUsage>of(setupFutureUsage);
        }

        public PaymentsRequest paymentMethodData(@javax.annotation.Nullable PaymentMethodDataRequest paymentMethodData) {
        this.paymentMethodData = JsonNullable.<PaymentMethodDataRequest>of(paymentMethodData);
        
        return this;
        }

    /**
        * Get paymentMethodData
    * @return paymentMethodData
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentMethodDataRequest getPaymentMethodData() {
                return paymentMethodData.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentMethodDataRequest> getPaymentMethodData_JsonNullable() {
        return paymentMethodData;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_DATA)
        public void setPaymentMethodData_JsonNullable(JsonNullable<PaymentMethodDataRequest> paymentMethodData) {
        this.paymentMethodData = paymentMethodData;
        }

          public void setPaymentMethodData(@javax.annotation.Nullable PaymentMethodDataRequest paymentMethodData) {
            this.paymentMethodData = JsonNullable.<PaymentMethodDataRequest>of(paymentMethodData);
        }

        public PaymentsRequest paymentMethod(@javax.annotation.Nullable PaymentMethod paymentMethod) {
        this.paymentMethod = JsonNullable.<PaymentMethod>of(paymentMethod);
        
        return this;
        }

    /**
        * Get paymentMethod
    * @return paymentMethod
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentMethod getPaymentMethod() {
                return paymentMethod.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentMethod> getPaymentMethod_JsonNullable() {
        return paymentMethod;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
        public void setPaymentMethod_JsonNullable(JsonNullable<PaymentMethod> paymentMethod) {
        this.paymentMethod = paymentMethod;
        }

          public void setPaymentMethod(@javax.annotation.Nullable PaymentMethod paymentMethod) {
            this.paymentMethod = JsonNullable.<PaymentMethod>of(paymentMethod);
        }

        public PaymentsRequest paymentToken(@javax.annotation.Nullable String paymentToken) {
        this.paymentToken = JsonNullable.<String>of(paymentToken);
        
        return this;
        }

    /**
        * As Hyperswitch tokenises the sensitive details about the payments method, it provides the payment_token as a reference to a stored payment method, ensuring that the sensitive details are not exposed in any manner.
    * @return paymentToken
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getPaymentToken() {
                return paymentToken.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getPaymentToken_JsonNullable() {
        return paymentToken;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_TOKEN)
        public void setPaymentToken_JsonNullable(JsonNullable<String> paymentToken) {
        this.paymentToken = paymentToken;
        }

          public void setPaymentToken(@javax.annotation.Nullable String paymentToken) {
            this.paymentToken = JsonNullable.<String>of(paymentToken);
        }

        public PaymentsRequest cardCvc(@javax.annotation.Nullable String cardCvc) {
        this.cardCvc = JsonNullable.<String>of(cardCvc);
        
        return this;
        }

    /**
        * This is used along with the payment_token field while collecting during saved card payments. This field will be deprecated soon, use the payment_method_data.card_token object instead
    * @return cardCvc
        * @deprecated
    */
        @Deprecated
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getCardCvc() {
                return cardCvc.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CARD_CVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getCardCvc_JsonNullable() {
        return cardCvc;
        }
    
        @JsonProperty(JSON_PROPERTY_CARD_CVC)
        public void setCardCvc_JsonNullable(JsonNullable<String> cardCvc) {
        this.cardCvc = cardCvc;
        }

          public void setCardCvc(@javax.annotation.Nullable String cardCvc) {
            this.cardCvc = JsonNullable.<String>of(cardCvc);
        }

        public PaymentsRequest shipping(@javax.annotation.Nullable Address shipping) {
        this.shipping = JsonNullable.<Address>of(shipping);
        
        return this;
        }

    /**
        * Get shipping
    * @return shipping
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Address getShipping() {
                return shipping.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SHIPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Address> getShipping_JsonNullable() {
        return shipping;
        }
    
        @JsonProperty(JSON_PROPERTY_SHIPPING)
        public void setShipping_JsonNullable(JsonNullable<Address> shipping) {
        this.shipping = shipping;
        }

          public void setShipping(@javax.annotation.Nullable Address shipping) {
            this.shipping = JsonNullable.<Address>of(shipping);
        }

        public PaymentsRequest statementDescriptorName(@javax.annotation.Nullable String statementDescriptorName) {
        this.statementDescriptorName = JsonNullable.<String>of(statementDescriptorName);
        
        return this;
        }

    /**
        * For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    * @return statementDescriptorName
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getStatementDescriptorName() {
                return statementDescriptorName.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_STATEMENT_DESCRIPTOR_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getStatementDescriptorName_JsonNullable() {
        return statementDescriptorName;
        }
    
        @JsonProperty(JSON_PROPERTY_STATEMENT_DESCRIPTOR_NAME)
        public void setStatementDescriptorName_JsonNullable(JsonNullable<String> statementDescriptorName) {
        this.statementDescriptorName = statementDescriptorName;
        }

          public void setStatementDescriptorName(@javax.annotation.Nullable String statementDescriptorName) {
            this.statementDescriptorName = JsonNullable.<String>of(statementDescriptorName);
        }

        public PaymentsRequest statementDescriptorSuffix(@javax.annotation.Nullable String statementDescriptorSuffix) {
        this.statementDescriptorSuffix = JsonNullable.<String>of(statementDescriptorSuffix);
        
        return this;
        }

    /**
        * Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    * @return statementDescriptorSuffix
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getStatementDescriptorSuffix() {
                return statementDescriptorSuffix.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_STATEMENT_DESCRIPTOR_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getStatementDescriptorSuffix_JsonNullable() {
        return statementDescriptorSuffix;
        }
    
        @JsonProperty(JSON_PROPERTY_STATEMENT_DESCRIPTOR_SUFFIX)
        public void setStatementDescriptorSuffix_JsonNullable(JsonNullable<String> statementDescriptorSuffix) {
        this.statementDescriptorSuffix = statementDescriptorSuffix;
        }

          public void setStatementDescriptorSuffix(@javax.annotation.Nullable String statementDescriptorSuffix) {
            this.statementDescriptorSuffix = JsonNullable.<String>of(statementDescriptorSuffix);
        }

        public PaymentsRequest orderDetails(@javax.annotation.Nullable List<OrderDetailsWithAmount> orderDetails) {
        this.orderDetails = JsonNullable.<List<OrderDetailsWithAmount>>of(orderDetails);
        
        return this;
        }

            public PaymentsRequest addOrderDetailsItem(OrderDetailsWithAmount orderDetailsItem) {
                if (this.orderDetails == null || !this.orderDetails.isPresent()) {
                this.orderDetails = JsonNullable.<List<OrderDetailsWithAmount>>of(new ArrayList<>());
                }
                try {
                this.orderDetails.get().add(orderDetailsItem);
                } catch (java.util.NoSuchElementException e) {
                // this can never happen, as we make sure above that the value is present
                }
                return this;
            }

    /**
        * Use this object to capture the details about the different products for which the payment is being made. The sum of amount across different products here should be equal to the overall payment amount
    * @return orderDetails
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public List<OrderDetailsWithAmount> getOrderDetails() {
                return orderDetails.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_ORDER_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<List<OrderDetailsWithAmount>> getOrderDetails_JsonNullable() {
        return orderDetails;
        }
    
        @JsonProperty(JSON_PROPERTY_ORDER_DETAILS)
        public void setOrderDetails_JsonNullable(JsonNullable<List<OrderDetailsWithAmount>> orderDetails) {
        this.orderDetails = orderDetails;
        }

          public void setOrderDetails(@javax.annotation.Nullable List<OrderDetailsWithAmount> orderDetails) {
            this.orderDetails = JsonNullable.<List<OrderDetailsWithAmount>>of(orderDetails);
        }

        public PaymentsRequest clientSecret(@javax.annotation.Nullable String clientSecret) {
        this.clientSecret = JsonNullable.<String>of(clientSecret);
        
        return this;
        }

    /**
        * It&#39;s a token used for client side verification.
    * @return clientSecret
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getClientSecret() {
                return clientSecret.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getClientSecret_JsonNullable() {
        return clientSecret;
        }
    
        @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
        public void setClientSecret_JsonNullable(JsonNullable<String> clientSecret) {
        this.clientSecret = clientSecret;
        }

          public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
            this.clientSecret = JsonNullable.<String>of(clientSecret);
        }

        public PaymentsRequest mandateData(@javax.annotation.Nullable MandateData mandateData) {
        this.mandateData = JsonNullable.<MandateData>of(mandateData);
        
        return this;
        }

    /**
        * Get mandateData
    * @return mandateData
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public MandateData getMandateData() {
                return mandateData.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_MANDATE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<MandateData> getMandateData_JsonNullable() {
        return mandateData;
        }
    
        @JsonProperty(JSON_PROPERTY_MANDATE_DATA)
        public void setMandateData_JsonNullable(JsonNullable<MandateData> mandateData) {
        this.mandateData = mandateData;
        }

          public void setMandateData(@javax.annotation.Nullable MandateData mandateData) {
            this.mandateData = JsonNullable.<MandateData>of(mandateData);
        }

        public PaymentsRequest customerAcceptance(@javax.annotation.Nullable CustomerAcceptance customerAcceptance) {
        this.customerAcceptance = JsonNullable.<CustomerAcceptance>of(customerAcceptance);
        
        return this;
        }

    /**
        * Get customerAcceptance
    * @return customerAcceptance
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public CustomerAcceptance getCustomerAcceptance() {
                return customerAcceptance.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CUSTOMER_ACCEPTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<CustomerAcceptance> getCustomerAcceptance_JsonNullable() {
        return customerAcceptance;
        }
    
        @JsonProperty(JSON_PROPERTY_CUSTOMER_ACCEPTANCE)
        public void setCustomerAcceptance_JsonNullable(JsonNullable<CustomerAcceptance> customerAcceptance) {
        this.customerAcceptance = customerAcceptance;
        }

          public void setCustomerAcceptance(@javax.annotation.Nullable CustomerAcceptance customerAcceptance) {
            this.customerAcceptance = JsonNullable.<CustomerAcceptance>of(customerAcceptance);
        }

        public PaymentsRequest mandateId(@javax.annotation.Nullable String mandateId) {
        this.mandateId = JsonNullable.<String>of(mandateId);
        
        return this;
        }

    /**
        * A unique identifier to link the payment to a mandate. To do Recurring payments after a mandate has been created, pass the mandate_id instead of payment_method_data
    * @return mandateId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getMandateId() {
                return mandateId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_MANDATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getMandateId_JsonNullable() {
        return mandateId;
        }
    
        @JsonProperty(JSON_PROPERTY_MANDATE_ID)
        public void setMandateId_JsonNullable(JsonNullable<String> mandateId) {
        this.mandateId = mandateId;
        }

          public void setMandateId(@javax.annotation.Nullable String mandateId) {
            this.mandateId = JsonNullable.<String>of(mandateId);
        }

        public PaymentsRequest browserInfo(@javax.annotation.Nullable BrowserInformation browserInfo) {
        this.browserInfo = JsonNullable.<BrowserInformation>of(browserInfo);
        
        return this;
        }

    /**
        * Get browserInfo
    * @return browserInfo
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public BrowserInformation getBrowserInfo() {
                return browserInfo.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_BROWSER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<BrowserInformation> getBrowserInfo_JsonNullable() {
        return browserInfo;
        }
    
        @JsonProperty(JSON_PROPERTY_BROWSER_INFO)
        public void setBrowserInfo_JsonNullable(JsonNullable<BrowserInformation> browserInfo) {
        this.browserInfo = browserInfo;
        }

          public void setBrowserInfo(@javax.annotation.Nullable BrowserInformation browserInfo) {
            this.browserInfo = JsonNullable.<BrowserInformation>of(browserInfo);
        }

        public PaymentsRequest paymentExperience(@javax.annotation.Nullable PaymentExperience paymentExperience) {
        this.paymentExperience = JsonNullable.<PaymentExperience>of(paymentExperience);
        
        return this;
        }

    /**
        * Get paymentExperience
    * @return paymentExperience
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentExperience getPaymentExperience() {
                return paymentExperience.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_EXPERIENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentExperience> getPaymentExperience_JsonNullable() {
        return paymentExperience;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_EXPERIENCE)
        public void setPaymentExperience_JsonNullable(JsonNullable<PaymentExperience> paymentExperience) {
        this.paymentExperience = paymentExperience;
        }

          public void setPaymentExperience(@javax.annotation.Nullable PaymentExperience paymentExperience) {
            this.paymentExperience = JsonNullable.<PaymentExperience>of(paymentExperience);
        }

        public PaymentsRequest paymentMethodType(@javax.annotation.Nullable PaymentMethodType paymentMethodType) {
        this.paymentMethodType = JsonNullable.<PaymentMethodType>of(paymentMethodType);
        
        return this;
        }

    /**
        * Get paymentMethodType
    * @return paymentMethodType
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentMethodType getPaymentMethodType() {
                return paymentMethodType.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentMethodType> getPaymentMethodType_JsonNullable() {
        return paymentMethodType;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
        public void setPaymentMethodType_JsonNullable(JsonNullable<PaymentMethodType> paymentMethodType) {
        this.paymentMethodType = paymentMethodType;
        }

          public void setPaymentMethodType(@javax.annotation.Nullable PaymentMethodType paymentMethodType) {
            this.paymentMethodType = JsonNullable.<PaymentMethodType>of(paymentMethodType);
        }

        public PaymentsRequest businessCountry(@javax.annotation.Nullable CountryAlpha2 businessCountry) {
        this.businessCountry = JsonNullable.<CountryAlpha2>of(businessCountry);
        
        return this;
        }

    /**
        * Get businessCountry
    * @return businessCountry
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public CountryAlpha2 getBusinessCountry() {
                return businessCountry.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_BUSINESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<CountryAlpha2> getBusinessCountry_JsonNullable() {
        return businessCountry;
        }
    
        @JsonProperty(JSON_PROPERTY_BUSINESS_COUNTRY)
        public void setBusinessCountry_JsonNullable(JsonNullable<CountryAlpha2> businessCountry) {
        this.businessCountry = businessCountry;
        }

          public void setBusinessCountry(@javax.annotation.Nullable CountryAlpha2 businessCountry) {
            this.businessCountry = JsonNullable.<CountryAlpha2>of(businessCountry);
        }

        public PaymentsRequest businessLabel(@javax.annotation.Nullable String businessLabel) {
        this.businessLabel = JsonNullable.<String>of(businessLabel);
        
        return this;
        }

    /**
        * Business label of the merchant for this payment. To be deprecated soon. Pass the profile_id instead
    * @return businessLabel
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getBusinessLabel() {
                return businessLabel.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_BUSINESS_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getBusinessLabel_JsonNullable() {
        return businessLabel;
        }
    
        @JsonProperty(JSON_PROPERTY_BUSINESS_LABEL)
        public void setBusinessLabel_JsonNullable(JsonNullable<String> businessLabel) {
        this.businessLabel = businessLabel;
        }

          public void setBusinessLabel(@javax.annotation.Nullable String businessLabel) {
            this.businessLabel = JsonNullable.<String>of(businessLabel);
        }

        public PaymentsRequest merchantConnectorDetails(@javax.annotation.Nullable MerchantConnectorDetailsWrap merchantConnectorDetails) {
        this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
        
        return this;
        }

    /**
        * Get merchantConnectorDetails
    * @return merchantConnectorDetails
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public MerchantConnectorDetailsWrap getMerchantConnectorDetails() {
                return merchantConnectorDetails.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<MerchantConnectorDetailsWrap> getMerchantConnectorDetails_JsonNullable() {
        return merchantConnectorDetails;
        }
    
        @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
        public void setMerchantConnectorDetails_JsonNullable(JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails) {
        this.merchantConnectorDetails = merchantConnectorDetails;
        }

          public void setMerchantConnectorDetails(@javax.annotation.Nullable MerchantConnectorDetailsWrap merchantConnectorDetails) {
            this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
        }

        public PaymentsRequest allowedPaymentMethodTypes(@javax.annotation.Nullable List<PaymentMethodType> allowedPaymentMethodTypes) {
        this.allowedPaymentMethodTypes = JsonNullable.<List<PaymentMethodType>>of(allowedPaymentMethodTypes);
        
        return this;
        }

            public PaymentsRequest addAllowedPaymentMethodTypesItem(PaymentMethodType allowedPaymentMethodTypesItem) {
                if (this.allowedPaymentMethodTypes == null || !this.allowedPaymentMethodTypes.isPresent()) {
                this.allowedPaymentMethodTypes = JsonNullable.<List<PaymentMethodType>>of(new ArrayList<>());
                }
                try {
                this.allowedPaymentMethodTypes.get().add(allowedPaymentMethodTypesItem);
                } catch (java.util.NoSuchElementException e) {
                // this can never happen, as we make sure above that the value is present
                }
                return this;
            }

    /**
        * Use this parameter to restrict the Payment Method Types to show for a given PaymentIntent
    * @return allowedPaymentMethodTypes
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public List<PaymentMethodType> getAllowedPaymentMethodTypes() {
                return allowedPaymentMethodTypes.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_METHOD_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<List<PaymentMethodType>> getAllowedPaymentMethodTypes_JsonNullable() {
        return allowedPaymentMethodTypes;
        }
    
        @JsonProperty(JSON_PROPERTY_ALLOWED_PAYMENT_METHOD_TYPES)
        public void setAllowedPaymentMethodTypes_JsonNullable(JsonNullable<List<PaymentMethodType>> allowedPaymentMethodTypes) {
        this.allowedPaymentMethodTypes = allowedPaymentMethodTypes;
        }

          public void setAllowedPaymentMethodTypes(@javax.annotation.Nullable List<PaymentMethodType> allowedPaymentMethodTypes) {
            this.allowedPaymentMethodTypes = JsonNullable.<List<PaymentMethodType>>of(allowedPaymentMethodTypes);
        }

        public PaymentsRequest businessSubLabel(@javax.annotation.Nullable String businessSubLabel) {
        this.businessSubLabel = JsonNullable.<String>of(businessSubLabel);
        
        return this;
        }

    /**
        * Business sub label for the payment
    * @return businessSubLabel
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getBusinessSubLabel() {
                return businessSubLabel.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_BUSINESS_SUB_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getBusinessSubLabel_JsonNullable() {
        return businessSubLabel;
        }
    
        @JsonProperty(JSON_PROPERTY_BUSINESS_SUB_LABEL)
        public void setBusinessSubLabel_JsonNullable(JsonNullable<String> businessSubLabel) {
        this.businessSubLabel = businessSubLabel;
        }

          public void setBusinessSubLabel(@javax.annotation.Nullable String businessSubLabel) {
            this.businessSubLabel = JsonNullable.<String>of(businessSubLabel);
        }

        public PaymentsRequest retryAction(@javax.annotation.Nullable RetryAction retryAction) {
        this.retryAction = JsonNullable.<RetryAction>of(retryAction);
        
        return this;
        }

    /**
        * Get retryAction
    * @return retryAction
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public RetryAction getRetryAction() {
                return retryAction.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_RETRY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<RetryAction> getRetryAction_JsonNullable() {
        return retryAction;
        }
    
        @JsonProperty(JSON_PROPERTY_RETRY_ACTION)
        public void setRetryAction_JsonNullable(JsonNullable<RetryAction> retryAction) {
        this.retryAction = retryAction;
        }

          public void setRetryAction(@javax.annotation.Nullable RetryAction retryAction) {
            this.retryAction = JsonNullable.<RetryAction>of(retryAction);
        }

        public PaymentsRequest metadata(@javax.annotation.Nullable Object metadata) {
        this.metadata = JsonNullable.<Object>of(metadata);
        
        return this;
        }

    /**
        * You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.
    * @return metadata
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Object getMetadata() {
                return metadata.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Object> getMetadata_JsonNullable() {
        return metadata;
        }
    
        @JsonProperty(JSON_PROPERTY_METADATA)
        public void setMetadata_JsonNullable(JsonNullable<Object> metadata) {
        this.metadata = metadata;
        }

          public void setMetadata(@javax.annotation.Nullable Object metadata) {
            this.metadata = JsonNullable.<Object>of(metadata);
        }

        public PaymentsRequest connectorMetadata(@javax.annotation.Nullable ConnectorMetadata connectorMetadata) {
        this.connectorMetadata = JsonNullable.<ConnectorMetadata>of(connectorMetadata);
        
        return this;
        }

    /**
        * Get connectorMetadata
    * @return connectorMetadata
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public ConnectorMetadata getConnectorMetadata() {
                return connectorMetadata.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CONNECTOR_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<ConnectorMetadata> getConnectorMetadata_JsonNullable() {
        return connectorMetadata;
        }
    
        @JsonProperty(JSON_PROPERTY_CONNECTOR_METADATA)
        public void setConnectorMetadata_JsonNullable(JsonNullable<ConnectorMetadata> connectorMetadata) {
        this.connectorMetadata = connectorMetadata;
        }

          public void setConnectorMetadata(@javax.annotation.Nullable ConnectorMetadata connectorMetadata) {
            this.connectorMetadata = JsonNullable.<ConnectorMetadata>of(connectorMetadata);
        }

        public PaymentsRequest featureMetadata(@javax.annotation.Nullable FeatureMetadata featureMetadata) {
        this.featureMetadata = JsonNullable.<FeatureMetadata>of(featureMetadata);
        
        return this;
        }

    /**
        * Get featureMetadata
    * @return featureMetadata
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public FeatureMetadata getFeatureMetadata() {
                return featureMetadata.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_FEATURE_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<FeatureMetadata> getFeatureMetadata_JsonNullable() {
        return featureMetadata;
        }
    
        @JsonProperty(JSON_PROPERTY_FEATURE_METADATA)
        public void setFeatureMetadata_JsonNullable(JsonNullable<FeatureMetadata> featureMetadata) {
        this.featureMetadata = featureMetadata;
        }

          public void setFeatureMetadata(@javax.annotation.Nullable FeatureMetadata featureMetadata) {
            this.featureMetadata = JsonNullable.<FeatureMetadata>of(featureMetadata);
        }

        public PaymentsRequest paymentLink(@javax.annotation.Nullable Boolean paymentLink) {
        this.paymentLink = JsonNullable.<Boolean>of(paymentLink);
        
        return this;
        }

    /**
        * Whether to generate the payment link for this payment or not (if applicable)
    * @return paymentLink
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getPaymentLink() {
                return paymentLink.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getPaymentLink_JsonNullable() {
        return paymentLink;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_LINK)
        public void setPaymentLink_JsonNullable(JsonNullable<Boolean> paymentLink) {
        this.paymentLink = paymentLink;
        }

          public void setPaymentLink(@javax.annotation.Nullable Boolean paymentLink) {
            this.paymentLink = JsonNullable.<Boolean>of(paymentLink);
        }

        public PaymentsRequest paymentLinkConfig(@javax.annotation.Nullable PaymentCreatePaymentLinkConfig paymentLinkConfig) {
        this.paymentLinkConfig = JsonNullable.<PaymentCreatePaymentLinkConfig>of(paymentLinkConfig);
        
        return this;
        }

    /**
        * Get paymentLinkConfig
    * @return paymentLinkConfig
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentCreatePaymentLinkConfig getPaymentLinkConfig() {
                return paymentLinkConfig.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentCreatePaymentLinkConfig> getPaymentLinkConfig_JsonNullable() {
        return paymentLinkConfig;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_CONFIG)
        public void setPaymentLinkConfig_JsonNullable(JsonNullable<PaymentCreatePaymentLinkConfig> paymentLinkConfig) {
        this.paymentLinkConfig = paymentLinkConfig;
        }

          public void setPaymentLinkConfig(@javax.annotation.Nullable PaymentCreatePaymentLinkConfig paymentLinkConfig) {
            this.paymentLinkConfig = JsonNullable.<PaymentCreatePaymentLinkConfig>of(paymentLinkConfig);
        }

        public PaymentsRequest paymentLinkConfigId(@javax.annotation.Nullable String paymentLinkConfigId) {
        this.paymentLinkConfigId = JsonNullable.<String>of(paymentLinkConfigId);
        
        return this;
        }

    /**
        * Custom payment link config id set at business profile, send only if business_specific_configs is configured
    * @return paymentLinkConfigId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getPaymentLinkConfigId() {
                return paymentLinkConfigId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getPaymentLinkConfigId_JsonNullable() {
        return paymentLinkConfigId;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_CONFIG_ID)
        public void setPaymentLinkConfigId_JsonNullable(JsonNullable<String> paymentLinkConfigId) {
        this.paymentLinkConfigId = paymentLinkConfigId;
        }

          public void setPaymentLinkConfigId(@javax.annotation.Nullable String paymentLinkConfigId) {
            this.paymentLinkConfigId = JsonNullable.<String>of(paymentLinkConfigId);
        }

        public PaymentsRequest profileId(@javax.annotation.Nullable String profileId) {
        this.profileId = JsonNullable.<String>of(profileId);
        
        return this;
        }

    /**
        * The business profile to be used for this payment, if not passed the default business profile associated with the merchant account will be used. It is mandatory in case multiple business profiles have been set up.
    * @return profileId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getProfileId() {
                return profileId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getProfileId_JsonNullable() {
        return profileId;
        }
    
        @JsonProperty(JSON_PROPERTY_PROFILE_ID)
        public void setProfileId_JsonNullable(JsonNullable<String> profileId) {
        this.profileId = profileId;
        }

          public void setProfileId(@javax.annotation.Nullable String profileId) {
            this.profileId = JsonNullable.<String>of(profileId);
        }

        public PaymentsRequest surchargeDetails(@javax.annotation.Nullable RequestSurchargeDetails surchargeDetails) {
        this.surchargeDetails = JsonNullable.<RequestSurchargeDetails>of(surchargeDetails);
        
        return this;
        }

    /**
        * Get surchargeDetails
    * @return surchargeDetails
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public RequestSurchargeDetails getSurchargeDetails() {
                return surchargeDetails.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SURCHARGE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<RequestSurchargeDetails> getSurchargeDetails_JsonNullable() {
        return surchargeDetails;
        }
    
        @JsonProperty(JSON_PROPERTY_SURCHARGE_DETAILS)
        public void setSurchargeDetails_JsonNullable(JsonNullable<RequestSurchargeDetails> surchargeDetails) {
        this.surchargeDetails = surchargeDetails;
        }

          public void setSurchargeDetails(@javax.annotation.Nullable RequestSurchargeDetails surchargeDetails) {
            this.surchargeDetails = JsonNullable.<RequestSurchargeDetails>of(surchargeDetails);
        }

        public PaymentsRequest paymentType(@javax.annotation.Nullable PaymentType paymentType) {
        this.paymentType = JsonNullable.<PaymentType>of(paymentType);
        
        return this;
        }

    /**
        * Get paymentType
    * @return paymentType
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentType getPaymentType() {
                return paymentType.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentType> getPaymentType_JsonNullable() {
        return paymentType;
        }
    
        @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
        public void setPaymentType_JsonNullable(JsonNullable<PaymentType> paymentType) {
        this.paymentType = paymentType;
        }

          public void setPaymentType(@javax.annotation.Nullable PaymentType paymentType) {
            this.paymentType = JsonNullable.<PaymentType>of(paymentType);
        }

        public PaymentsRequest requestIncrementalAuthorization(@javax.annotation.Nullable Boolean requestIncrementalAuthorization) {
        this.requestIncrementalAuthorization = JsonNullable.<Boolean>of(requestIncrementalAuthorization);
        
        return this;
        }

    /**
        * Request an incremental authorization, i.e., increase the authorized amount on a confirmed payment before you capture it.
    * @return requestIncrementalAuthorization
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getRequestIncrementalAuthorization() {
                return requestIncrementalAuthorization.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_REQUEST_INCREMENTAL_AUTHORIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getRequestIncrementalAuthorization_JsonNullable() {
        return requestIncrementalAuthorization;
        }
    
        @JsonProperty(JSON_PROPERTY_REQUEST_INCREMENTAL_AUTHORIZATION)
        public void setRequestIncrementalAuthorization_JsonNullable(JsonNullable<Boolean> requestIncrementalAuthorization) {
        this.requestIncrementalAuthorization = requestIncrementalAuthorization;
        }

          public void setRequestIncrementalAuthorization(@javax.annotation.Nullable Boolean requestIncrementalAuthorization) {
            this.requestIncrementalAuthorization = JsonNullable.<Boolean>of(requestIncrementalAuthorization);
        }

        public PaymentsRequest sessionExpiry(@javax.annotation.Nullable Integer sessionExpiry) {
        this.sessionExpiry = JsonNullable.<Integer>of(sessionExpiry);
        
        return this;
        }

    /**
        * Will be used to expire client secret after certain amount of time to be supplied in seconds (900) for 15 mins
        * minimum: 0
    * @return sessionExpiry
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Integer getSessionExpiry() {
                return sessionExpiry.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SESSION_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Integer> getSessionExpiry_JsonNullable() {
        return sessionExpiry;
        }
    
        @JsonProperty(JSON_PROPERTY_SESSION_EXPIRY)
        public void setSessionExpiry_JsonNullable(JsonNullable<Integer> sessionExpiry) {
        this.sessionExpiry = sessionExpiry;
        }

          public void setSessionExpiry(@javax.annotation.Nullable Integer sessionExpiry) {
            this.sessionExpiry = JsonNullable.<Integer>of(sessionExpiry);
        }

        public PaymentsRequest frmMetadata(@javax.annotation.Nullable Object frmMetadata) {
        this.frmMetadata = JsonNullable.<Object>of(frmMetadata);
        
        return this;
        }

    /**
        * Additional data related to some frm(Fraud Risk Management) connectors
    * @return frmMetadata
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Object getFrmMetadata() {
                return frmMetadata.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_FRM_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Object> getFrmMetadata_JsonNullable() {
        return frmMetadata;
        }
    
        @JsonProperty(JSON_PROPERTY_FRM_METADATA)
        public void setFrmMetadata_JsonNullable(JsonNullable<Object> frmMetadata) {
        this.frmMetadata = frmMetadata;
        }

          public void setFrmMetadata(@javax.annotation.Nullable Object frmMetadata) {
            this.frmMetadata = JsonNullable.<Object>of(frmMetadata);
        }

        public PaymentsRequest requestExternalThreeDsAuthentication(@javax.annotation.Nullable Boolean requestExternalThreeDsAuthentication) {
        this.requestExternalThreeDsAuthentication = JsonNullable.<Boolean>of(requestExternalThreeDsAuthentication);
        
        return this;
        }

    /**
        * Whether to perform external authentication (if applicable)
    * @return requestExternalThreeDsAuthentication
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getRequestExternalThreeDsAuthentication() {
                return requestExternalThreeDsAuthentication.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_REQUEST_EXTERNAL_THREE_DS_AUTHENTICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getRequestExternalThreeDsAuthentication_JsonNullable() {
        return requestExternalThreeDsAuthentication;
        }
    
        @JsonProperty(JSON_PROPERTY_REQUEST_EXTERNAL_THREE_DS_AUTHENTICATION)
        public void setRequestExternalThreeDsAuthentication_JsonNullable(JsonNullable<Boolean> requestExternalThreeDsAuthentication) {
        this.requestExternalThreeDsAuthentication = requestExternalThreeDsAuthentication;
        }

          public void setRequestExternalThreeDsAuthentication(@javax.annotation.Nullable Boolean requestExternalThreeDsAuthentication) {
            this.requestExternalThreeDsAuthentication = JsonNullable.<Boolean>of(requestExternalThreeDsAuthentication);
        }

        public PaymentsRequest recurringDetails(@javax.annotation.Nullable RecurringDetails recurringDetails) {
        this.recurringDetails = JsonNullable.<RecurringDetails>of(recurringDetails);
        
        return this;
        }

    /**
        * Get recurringDetails
    * @return recurringDetails
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public RecurringDetails getRecurringDetails() {
                return recurringDetails.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_RECURRING_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<RecurringDetails> getRecurringDetails_JsonNullable() {
        return recurringDetails;
        }
    
        @JsonProperty(JSON_PROPERTY_RECURRING_DETAILS)
        public void setRecurringDetails_JsonNullable(JsonNullable<RecurringDetails> recurringDetails) {
        this.recurringDetails = recurringDetails;
        }

          public void setRecurringDetails(@javax.annotation.Nullable RecurringDetails recurringDetails) {
            this.recurringDetails = JsonNullable.<RecurringDetails>of(recurringDetails);
        }

        public PaymentsRequest charges(@javax.annotation.Nullable PaymentChargeRequest charges) {
        this.charges = JsonNullable.<PaymentChargeRequest>of(charges);
        
        return this;
        }

    /**
        * Get charges
    * @return charges
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public PaymentChargeRequest getCharges() {
                return charges.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<PaymentChargeRequest> getCharges_JsonNullable() {
        return charges;
        }
    
        @JsonProperty(JSON_PROPERTY_CHARGES)
        public void setCharges_JsonNullable(JsonNullable<PaymentChargeRequest> charges) {
        this.charges = charges;
        }

          public void setCharges(@javax.annotation.Nullable PaymentChargeRequest charges) {
            this.charges = JsonNullable.<PaymentChargeRequest>of(charges);
        }

        public PaymentsRequest merchantOrderReferenceId(@javax.annotation.Nullable String merchantOrderReferenceId) {
        this.merchantOrderReferenceId = JsonNullable.<String>of(merchantOrderReferenceId);
        
        return this;
        }

    /**
        * Merchant&#39;s identifier for the payment/invoice. This will be sent to the connector if the connector provides support to accept multiple reference ids. In case the connector supports only one reference id, Hyperswitch&#39;s Payment ID will be sent as reference.
    * @return merchantOrderReferenceId
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public String getMerchantOrderReferenceId() {
                return merchantOrderReferenceId.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_MERCHANT_ORDER_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<String> getMerchantOrderReferenceId_JsonNullable() {
        return merchantOrderReferenceId;
        }
    
        @JsonProperty(JSON_PROPERTY_MERCHANT_ORDER_REFERENCE_ID)
        public void setMerchantOrderReferenceId_JsonNullable(JsonNullable<String> merchantOrderReferenceId) {
        this.merchantOrderReferenceId = merchantOrderReferenceId;
        }

          public void setMerchantOrderReferenceId(@javax.annotation.Nullable String merchantOrderReferenceId) {
            this.merchantOrderReferenceId = JsonNullable.<String>of(merchantOrderReferenceId);
        }

        public PaymentsRequest skipExternalTaxCalculation(@javax.annotation.Nullable Boolean skipExternalTaxCalculation) {
        this.skipExternalTaxCalculation = JsonNullable.<Boolean>of(skipExternalTaxCalculation);
        
        return this;
        }

    /**
        * Whether to calculate tax for this payment intent
    * @return skipExternalTaxCalculation
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public Boolean getSkipExternalTaxCalculation() {
                return skipExternalTaxCalculation.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<Boolean> getSkipExternalTaxCalculation_JsonNullable() {
        return skipExternalTaxCalculation;
        }
    
        @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
        public void setSkipExternalTaxCalculation_JsonNullable(JsonNullable<Boolean> skipExternalTaxCalculation) {
        this.skipExternalTaxCalculation = skipExternalTaxCalculation;
        }

          public void setSkipExternalTaxCalculation(@javax.annotation.Nullable Boolean skipExternalTaxCalculation) {
            this.skipExternalTaxCalculation = JsonNullable.<Boolean>of(skipExternalTaxCalculation);
        }

        public PaymentsRequest psd2ScaExemptionType(@javax.annotation.Nullable ScaExemptionType psd2ScaExemptionType) {
        this.psd2ScaExemptionType = JsonNullable.<ScaExemptionType>of(psd2ScaExemptionType);
        
        return this;
        }

    /**
        * Get psd2ScaExemptionType
    * @return psd2ScaExemptionType
    */
    @javax.annotation.Nullable
        @JsonIgnore
    
    public ScaExemptionType getPsd2ScaExemptionType() {
                return psd2ScaExemptionType.orElse(null);
    }

          @JsonProperty(JSON_PROPERTY_PSD2_SCA_EXEMPTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

        public JsonNullable<ScaExemptionType> getPsd2ScaExemptionType_JsonNullable() {
        return psd2ScaExemptionType;
        }
    
        @JsonProperty(JSON_PROPERTY_PSD2_SCA_EXEMPTION_TYPE)
        public void setPsd2ScaExemptionType_JsonNullable(JsonNullable<ScaExemptionType> psd2ScaExemptionType) {
        this.psd2ScaExemptionType = psd2ScaExemptionType;
        }

          public void setPsd2ScaExemptionType(@javax.annotation.Nullable ScaExemptionType psd2ScaExemptionType) {
            this.psd2ScaExemptionType = JsonNullable.<ScaExemptionType>of(psd2ScaExemptionType);
        }

@Override
public boolean equals(Object o) {
    if (this == o) {
    return true;
    }
    if (o == null || getClass() != o.getClass()) {
    return false;
    }
        PaymentsRequest paymentsRequest = (PaymentsRequest) o;
        return equalsNullable(this.amount, paymentsRequest.amount) &&
        equalsNullable(this.currency, paymentsRequest.currency) &&
        equalsNullable(this.amountToCapture, paymentsRequest.amountToCapture) &&
        equalsNullable(this.shippingCost, paymentsRequest.shippingCost) &&
        equalsNullable(this.paymentId, paymentsRequest.paymentId) &&
        equalsNullable(this.merchantId, paymentsRequest.merchantId) &&
        equalsNullable(this.routing, paymentsRequest.routing) &&
        equalsNullable(this.connector, paymentsRequest.connector) &&
        equalsNullable(this.captureMethod, paymentsRequest.captureMethod) &&
        equalsNullable(this.authenticationType, paymentsRequest.authenticationType) &&
        equalsNullable(this.billing, paymentsRequest.billing) &&
        equalsNullable(this.captureOn, paymentsRequest.captureOn) &&
        equalsNullable(this.confirm, paymentsRequest.confirm) &&
        equalsNullable(this.customer, paymentsRequest.customer) &&
        equalsNullable(this.customerId, paymentsRequest.customerId) &&
        equalsNullable(this.email, paymentsRequest.email) &&
        equalsNullable(this.name, paymentsRequest.name) &&
        equalsNullable(this.phone, paymentsRequest.phone) &&
        equalsNullable(this.phoneCountryCode, paymentsRequest.phoneCountryCode) &&
        equalsNullable(this.offSession, paymentsRequest.offSession) &&
        equalsNullable(this.description, paymentsRequest.description) &&
        equalsNullable(this.returnUrl, paymentsRequest.returnUrl) &&
        equalsNullable(this.setupFutureUsage, paymentsRequest.setupFutureUsage) &&
        equalsNullable(this.paymentMethodData, paymentsRequest.paymentMethodData) &&
        equalsNullable(this.paymentMethod, paymentsRequest.paymentMethod) &&
        equalsNullable(this.paymentToken, paymentsRequest.paymentToken) &&
        equalsNullable(this.cardCvc, paymentsRequest.cardCvc) &&
        equalsNullable(this.shipping, paymentsRequest.shipping) &&
        equalsNullable(this.statementDescriptorName, paymentsRequest.statementDescriptorName) &&
        equalsNullable(this.statementDescriptorSuffix, paymentsRequest.statementDescriptorSuffix) &&
        equalsNullable(this.orderDetails, paymentsRequest.orderDetails) &&
        equalsNullable(this.clientSecret, paymentsRequest.clientSecret) &&
        equalsNullable(this.mandateData, paymentsRequest.mandateData) &&
        equalsNullable(this.customerAcceptance, paymentsRequest.customerAcceptance) &&
        equalsNullable(this.mandateId, paymentsRequest.mandateId) &&
        equalsNullable(this.browserInfo, paymentsRequest.browserInfo) &&
        equalsNullable(this.paymentExperience, paymentsRequest.paymentExperience) &&
        equalsNullable(this.paymentMethodType, paymentsRequest.paymentMethodType) &&
        equalsNullable(this.businessCountry, paymentsRequest.businessCountry) &&
        equalsNullable(this.businessLabel, paymentsRequest.businessLabel) &&
        equalsNullable(this.merchantConnectorDetails, paymentsRequest.merchantConnectorDetails) &&
        equalsNullable(this.allowedPaymentMethodTypes, paymentsRequest.allowedPaymentMethodTypes) &&
        equalsNullable(this.businessSubLabel, paymentsRequest.businessSubLabel) &&
        equalsNullable(this.retryAction, paymentsRequest.retryAction) &&
        equalsNullable(this.metadata, paymentsRequest.metadata) &&
        equalsNullable(this.connectorMetadata, paymentsRequest.connectorMetadata) &&
        equalsNullable(this.featureMetadata, paymentsRequest.featureMetadata) &&
        equalsNullable(this.paymentLink, paymentsRequest.paymentLink) &&
        equalsNullable(this.paymentLinkConfig, paymentsRequest.paymentLinkConfig) &&
        equalsNullable(this.paymentLinkConfigId, paymentsRequest.paymentLinkConfigId) &&
        equalsNullable(this.profileId, paymentsRequest.profileId) &&
        equalsNullable(this.surchargeDetails, paymentsRequest.surchargeDetails) &&
        equalsNullable(this.paymentType, paymentsRequest.paymentType) &&
        equalsNullable(this.requestIncrementalAuthorization, paymentsRequest.requestIncrementalAuthorization) &&
        equalsNullable(this.sessionExpiry, paymentsRequest.sessionExpiry) &&
        equalsNullable(this.frmMetadata, paymentsRequest.frmMetadata) &&
        equalsNullable(this.requestExternalThreeDsAuthentication, paymentsRequest.requestExternalThreeDsAuthentication) &&
        equalsNullable(this.recurringDetails, paymentsRequest.recurringDetails) &&
        equalsNullable(this.charges, paymentsRequest.charges) &&
        equalsNullable(this.merchantOrderReferenceId, paymentsRequest.merchantOrderReferenceId) &&
        equalsNullable(this.skipExternalTaxCalculation, paymentsRequest.skipExternalTaxCalculation) &&
        equalsNullable(this.psd2ScaExemptionType, paymentsRequest.psd2ScaExemptionType);
}

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
        }

    @Override
    public int hashCode() {
        return Objects.hash(hashCodeNullable(amount), hashCodeNullable(currency), hashCodeNullable(amountToCapture), hashCodeNullable(shippingCost), hashCodeNullable(paymentId), hashCodeNullable(merchantId), hashCodeNullable(routing), hashCodeNullable(connector), hashCodeNullable(captureMethod), hashCodeNullable(authenticationType), hashCodeNullable(billing), hashCodeNullable(captureOn), hashCodeNullable(confirm), hashCodeNullable(customer), hashCodeNullable(customerId), hashCodeNullable(email), hashCodeNullable(name), hashCodeNullable(phone), hashCodeNullable(phoneCountryCode), hashCodeNullable(offSession), hashCodeNullable(description), hashCodeNullable(returnUrl), hashCodeNullable(setupFutureUsage), hashCodeNullable(paymentMethodData), hashCodeNullable(paymentMethod), hashCodeNullable(paymentToken), hashCodeNullable(cardCvc), hashCodeNullable(shipping), hashCodeNullable(statementDescriptorName), hashCodeNullable(statementDescriptorSuffix), hashCodeNullable(orderDetails), hashCodeNullable(clientSecret), hashCodeNullable(mandateData), hashCodeNullable(customerAcceptance), hashCodeNullable(mandateId), hashCodeNullable(browserInfo), hashCodeNullable(paymentExperience), hashCodeNullable(paymentMethodType), hashCodeNullable(businessCountry), hashCodeNullable(businessLabel), hashCodeNullable(merchantConnectorDetails), hashCodeNullable(allowedPaymentMethodTypes), hashCodeNullable(businessSubLabel), hashCodeNullable(retryAction), hashCodeNullable(metadata), hashCodeNullable(connectorMetadata), hashCodeNullable(featureMetadata), hashCodeNullable(paymentLink), hashCodeNullable(paymentLinkConfig), hashCodeNullable(paymentLinkConfigId), hashCodeNullable(profileId), hashCodeNullable(surchargeDetails), hashCodeNullable(paymentType), hashCodeNullable(requestIncrementalAuthorization), hashCodeNullable(sessionExpiry), hashCodeNullable(frmMetadata), hashCodeNullable(requestExternalThreeDsAuthentication), hashCodeNullable(recurringDetails), hashCodeNullable(charges), hashCodeNullable(merchantOrderReferenceId), hashCodeNullable(skipExternalTaxCalculation), hashCodeNullable(psd2ScaExemptionType));
    }

        private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
        return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
        }

    @Override
    public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsRequest {\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    amountToCapture: ").append(toIndentedString(amountToCapture)).append("\n");
        sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
        sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
        sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
        sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
        sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
        sb.append("    captureMethod: ").append(toIndentedString(captureMethod)).append("\n");
        sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
        sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
        sb.append("    captureOn: ").append(toIndentedString(captureOn)).append("\n");
        sb.append("    confirm: ").append(toIndentedString(confirm)).append("\n");
        sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
        sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
        sb.append("    email: ").append(toIndentedString(email)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
        sb.append("    phoneCountryCode: ").append(toIndentedString(phoneCountryCode)).append("\n");
        sb.append("    offSession: ").append(toIndentedString(offSession)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
        sb.append("    setupFutureUsage: ").append(toIndentedString(setupFutureUsage)).append("\n");
        sb.append("    paymentMethodData: ").append(toIndentedString(paymentMethodData)).append("\n");
        sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
        sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
        sb.append("    cardCvc: ").append(toIndentedString(cardCvc)).append("\n");
        sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
        sb.append("    statementDescriptorName: ").append(toIndentedString(statementDescriptorName)).append("\n");
        sb.append("    statementDescriptorSuffix: ").append(toIndentedString(statementDescriptorSuffix)).append("\n");
        sb.append("    orderDetails: ").append(toIndentedString(orderDetails)).append("\n");
        sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
        sb.append("    mandateData: ").append(toIndentedString(mandateData)).append("\n");
        sb.append("    customerAcceptance: ").append(toIndentedString(customerAcceptance)).append("\n");
        sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
        sb.append("    browserInfo: ").append(toIndentedString(browserInfo)).append("\n");
        sb.append("    paymentExperience: ").append(toIndentedString(paymentExperience)).append("\n");
        sb.append("    paymentMethodType: ").append(toIndentedString(paymentMethodType)).append("\n");
        sb.append("    businessCountry: ").append(toIndentedString(businessCountry)).append("\n");
        sb.append("    businessLabel: ").append(toIndentedString(businessLabel)).append("\n");
        sb.append("    merchantConnectorDetails: ").append(toIndentedString(merchantConnectorDetails)).append("\n");
        sb.append("    allowedPaymentMethodTypes: ").append(toIndentedString(allowedPaymentMethodTypes)).append("\n");
        sb.append("    businessSubLabel: ").append(toIndentedString(businessSubLabel)).append("\n");
        sb.append("    retryAction: ").append(toIndentedString(retryAction)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    connectorMetadata: ").append(toIndentedString(connectorMetadata)).append("\n");
        sb.append("    featureMetadata: ").append(toIndentedString(featureMetadata)).append("\n");
        sb.append("    paymentLink: ").append(toIndentedString(paymentLink)).append("\n");
        sb.append("    paymentLinkConfig: ").append(toIndentedString(paymentLinkConfig)).append("\n");
        sb.append("    paymentLinkConfigId: ").append(toIndentedString(paymentLinkConfigId)).append("\n");
        sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
        sb.append("    surchargeDetails: ").append(toIndentedString(surchargeDetails)).append("\n");
        sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
        sb.append("    requestIncrementalAuthorization: ").append(toIndentedString(requestIncrementalAuthorization)).append("\n");
        sb.append("    sessionExpiry: ").append(toIndentedString(sessionExpiry)).append("\n");
        sb.append("    frmMetadata: ").append(toIndentedString(frmMetadata)).append("\n");
        sb.append("    requestExternalThreeDsAuthentication: ").append(toIndentedString(requestExternalThreeDsAuthentication)).append("\n");
        sb.append("    recurringDetails: ").append(toIndentedString(recurringDetails)).append("\n");
        sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
        sb.append("    merchantOrderReferenceId: ").append(toIndentedString(merchantOrderReferenceId)).append("\n");
        sb.append("    skipExternalTaxCalculation: ").append(toIndentedString(skipExternalTaxCalculation)).append("\n");
        sb.append("    psd2ScaExemptionType: ").append(toIndentedString(psd2ScaExemptionType)).append("\n");
    sb.append("}");
    return sb.toString();
    }

    /**
    * Convert the given object to string with each line indented by 4 spaces
    * (except the first line).
    */
    private String toIndentedString(Object o) {
    if (o == null) {
    return "null";
    }
    return o.toString().replace("\n", "\n    ");
    }

        /**
        * Convert the instance into URL query string.
        *
        * @return URL query string
        */
        public String toUrlQueryString() {
        return toUrlQueryString(null);
        }

        /**
        * Convert the instance into URL query string.
        *
        * @param prefix prefix of the query string
        * @return URL query string
        */
        public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
        // style=form, explode=true, e.g. /pet?name=cat&type=manx
        prefix = "";
        } else {
        // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
        prefix = prefix + "[";
        suffix = "]";
        containerSuffix = "]";
        containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

            // add `amount` to the URL query string
                        if (getAmount() != null) {
                        try {
                        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `currency` to the URL query string
                            if (getCurrency() != null) {
                            try {
                            joiner.add(String.format("%scurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrency()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `amount_to_capture` to the URL query string
                        if (getAmountToCapture() != null) {
                        try {
                        joiner.add(String.format("%samount_to_capture%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmountToCapture()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `shipping_cost` to the URL query string
                        if (getShippingCost() != null) {
                        try {
                        joiner.add(String.format("%sshipping_cost%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShippingCost()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `payment_id` to the URL query string
                        if (getPaymentId() != null) {
                        try {
                        joiner.add(String.format("%spayment_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `merchant_id` to the URL query string
                        if (getMerchantId() != null) {
                        try {
                        joiner.add(String.format("%smerchant_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMerchantId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `routing` to the URL query string
                            if (getRouting() != null) {
                            joiner.add(getRouting().toUrlQueryString(prefix + "routing" + suffix));
                            }

            // add `connector` to the URL query string
                            if (getConnector() != null) {
                            for (int i = 0; i < getConnector().size(); i++) {
                            if (getConnector().get(i) != null) {
                            try {
                            joiner.add(String.format("%sconnector%s%s=%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                            URLEncoder.encode(String.valueOf(getConnector().get(i)), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }
                            }
                            }

            // add `capture_method` to the URL query string
                            if (getCaptureMethod() != null) {
                            try {
                            joiner.add(String.format("%scapture_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCaptureMethod()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `authentication_type` to the URL query string
                            if (getAuthenticationType() != null) {
                            try {
                            joiner.add(String.format("%sauthentication_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAuthenticationType()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `billing` to the URL query string
                            if (getBilling() != null) {
                            joiner.add(getBilling().toUrlQueryString(prefix + "billing" + suffix));
                            }

            // add `capture_on` to the URL query string
                            if (getCaptureOn() != null) {
                            try {
                            joiner.add(String.format("%scapture_on%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCaptureOn()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `confirm` to the URL query string
                        if (getConfirm() != null) {
                        try {
                        joiner.add(String.format("%sconfirm%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConfirm()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `customer` to the URL query string
                            if (getCustomer() != null) {
                            joiner.add(getCustomer().toUrlQueryString(prefix + "customer" + suffix));
                            }

            // add `customer_id` to the URL query string
                        if (getCustomerId() != null) {
                        try {
                        joiner.add(String.format("%scustomer_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomerId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `email` to the URL query string
                        if (getEmail() != null) {
                        try {
                        joiner.add(String.format("%semail%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmail()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `name` to the URL query string
                        if (getName() != null) {
                        try {
                        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `phone` to the URL query string
                        if (getPhone() != null) {
                        try {
                        joiner.add(String.format("%sphone%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhone()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `phone_country_code` to the URL query string
                        if (getPhoneCountryCode() != null) {
                        try {
                        joiner.add(String.format("%sphone_country_code%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPhoneCountryCode()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `off_session` to the URL query string
                        if (getOffSession() != null) {
                        try {
                        joiner.add(String.format("%soff_session%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOffSession()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `description` to the URL query string
                        if (getDescription() != null) {
                        try {
                        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `return_url` to the URL query string
                        if (getReturnUrl() != null) {
                        try {
                        joiner.add(String.format("%sreturn_url%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReturnUrl()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `setup_future_usage` to the URL query string
                            if (getSetupFutureUsage() != null) {
                            try {
                            joiner.add(String.format("%ssetup_future_usage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSetupFutureUsage()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `payment_method_data` to the URL query string
                            if (getPaymentMethodData() != null) {
                            joiner.add(getPaymentMethodData().toUrlQueryString(prefix + "payment_method_data" + suffix));
                            }

            // add `payment_method` to the URL query string
                            if (getPaymentMethod() != null) {
                            try {
                            joiner.add(String.format("%spayment_method%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentMethod()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `payment_token` to the URL query string
                        if (getPaymentToken() != null) {
                        try {
                        joiner.add(String.format("%spayment_token%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentToken()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `card_cvc` to the URL query string
                        if (getCardCvc() != null) {
                        try {
                        joiner.add(String.format("%scard_cvc%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCardCvc()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `shipping` to the URL query string
                            if (getShipping() != null) {
                            joiner.add(getShipping().toUrlQueryString(prefix + "shipping" + suffix));
                            }

            // add `statement_descriptor_name` to the URL query string
                        if (getStatementDescriptorName() != null) {
                        try {
                        joiner.add(String.format("%sstatement_descriptor_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatementDescriptorName()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `statement_descriptor_suffix` to the URL query string
                        if (getStatementDescriptorSuffix() != null) {
                        try {
                        joiner.add(String.format("%sstatement_descriptor_suffix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatementDescriptorSuffix()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `order_details` to the URL query string
                            if (getOrderDetails() != null) {
                            for (int i = 0; i < getOrderDetails().size(); i++) {
                            if (getOrderDetails().get(i) != null) {
                            joiner.add(getOrderDetails().get(i).toUrlQueryString(String.format("%sorder_details%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                            }
                            }
                            }

            // add `client_secret` to the URL query string
                        if (getClientSecret() != null) {
                        try {
                        joiner.add(String.format("%sclient_secret%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientSecret()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `mandate_data` to the URL query string
                            if (getMandateData() != null) {
                            joiner.add(getMandateData().toUrlQueryString(prefix + "mandate_data" + suffix));
                            }

            // add `customer_acceptance` to the URL query string
                            if (getCustomerAcceptance() != null) {
                            joiner.add(getCustomerAcceptance().toUrlQueryString(prefix + "customer_acceptance" + suffix));
                            }

            // add `mandate_id` to the URL query string
                        if (getMandateId() != null) {
                        try {
                        joiner.add(String.format("%smandate_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMandateId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `browser_info` to the URL query string
                            if (getBrowserInfo() != null) {
                            joiner.add(getBrowserInfo().toUrlQueryString(prefix + "browser_info" + suffix));
                            }

            // add `payment_experience` to the URL query string
                            if (getPaymentExperience() != null) {
                            try {
                            joiner.add(String.format("%spayment_experience%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentExperience()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `payment_method_type` to the URL query string
                            if (getPaymentMethodType() != null) {
                            try {
                            joiner.add(String.format("%spayment_method_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentMethodType()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `business_country` to the URL query string
                            if (getBusinessCountry() != null) {
                            try {
                            joiner.add(String.format("%sbusiness_country%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBusinessCountry()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `business_label` to the URL query string
                        if (getBusinessLabel() != null) {
                        try {
                        joiner.add(String.format("%sbusiness_label%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBusinessLabel()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `merchant_connector_details` to the URL query string
                            if (getMerchantConnectorDetails() != null) {
                            joiner.add(getMerchantConnectorDetails().toUrlQueryString(prefix + "merchant_connector_details" + suffix));
                            }

            // add `allowed_payment_method_types` to the URL query string
                            if (getAllowedPaymentMethodTypes() != null) {
                            for (int i = 0; i < getAllowedPaymentMethodTypes().size(); i++) {
                            if (getAllowedPaymentMethodTypes().get(i) != null) {
                            try {
                            joiner.add(String.format("%sallowed_payment_method_types%s%s=%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                            URLEncoder.encode(String.valueOf(getAllowedPaymentMethodTypes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }
                            }
                            }

            // add `business_sub_label` to the URL query string
                        if (getBusinessSubLabel() != null) {
                        try {
                        joiner.add(String.format("%sbusiness_sub_label%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBusinessSubLabel()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `retry_action` to the URL query string
                            if (getRetryAction() != null) {
                            try {
                            joiner.add(String.format("%sretry_action%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRetryAction()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `metadata` to the URL query string
                        if (getMetadata() != null) {
                        try {
                        joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadata()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `connector_metadata` to the URL query string
                            if (getConnectorMetadata() != null) {
                            joiner.add(getConnectorMetadata().toUrlQueryString(prefix + "connector_metadata" + suffix));
                            }

            // add `feature_metadata` to the URL query string
                            if (getFeatureMetadata() != null) {
                            joiner.add(getFeatureMetadata().toUrlQueryString(prefix + "feature_metadata" + suffix));
                            }

            // add `payment_link` to the URL query string
                        if (getPaymentLink() != null) {
                        try {
                        joiner.add(String.format("%spayment_link%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentLink()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `payment_link_config` to the URL query string
                            if (getPaymentLinkConfig() != null) {
                            joiner.add(getPaymentLinkConfig().toUrlQueryString(prefix + "payment_link_config" + suffix));
                            }

            // add `payment_link_config_id` to the URL query string
                        if (getPaymentLinkConfigId() != null) {
                        try {
                        joiner.add(String.format("%spayment_link_config_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentLinkConfigId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `profile_id` to the URL query string
                        if (getProfileId() != null) {
                        try {
                        joiner.add(String.format("%sprofile_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProfileId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `surcharge_details` to the URL query string
                            if (getSurchargeDetails() != null) {
                            joiner.add(getSurchargeDetails().toUrlQueryString(prefix + "surcharge_details" + suffix));
                            }

            // add `payment_type` to the URL query string
                            if (getPaymentType() != null) {
                            try {
                            joiner.add(String.format("%spayment_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentType()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

            // add `request_incremental_authorization` to the URL query string
                        if (getRequestIncrementalAuthorization() != null) {
                        try {
                        joiner.add(String.format("%srequest_incremental_authorization%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestIncrementalAuthorization()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `session_expiry` to the URL query string
                        if (getSessionExpiry() != null) {
                        try {
                        joiner.add(String.format("%ssession_expiry%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionExpiry()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `frm_metadata` to the URL query string
                        if (getFrmMetadata() != null) {
                        try {
                        joiner.add(String.format("%sfrm_metadata%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrmMetadata()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `request_external_three_ds_authentication` to the URL query string
                        if (getRequestExternalThreeDsAuthentication() != null) {
                        try {
                        joiner.add(String.format("%srequest_external_three_ds_authentication%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequestExternalThreeDsAuthentication()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `recurring_details` to the URL query string
                            if (getRecurringDetails() != null) {
                            joiner.add(getRecurringDetails().toUrlQueryString(prefix + "recurring_details" + suffix));
                            }

            // add `charges` to the URL query string
                            if (getCharges() != null) {
                            joiner.add(getCharges().toUrlQueryString(prefix + "charges" + suffix));
                            }

            // add `merchant_order_reference_id` to the URL query string
                        if (getMerchantOrderReferenceId() != null) {
                        try {
                        joiner.add(String.format("%smerchant_order_reference_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMerchantOrderReferenceId()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `skip_external_tax_calculation` to the URL query string
                        if (getSkipExternalTaxCalculation() != null) {
                        try {
                        joiner.add(String.format("%sskip_external_tax_calculation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSkipExternalTaxCalculation()), "UTF-8").replaceAll("\\+", "%20")));
                        } catch (UnsupportedEncodingException e) {
                        // Should never happen, UTF-8 is always supported
                        throw new RuntimeException(e);
                        }
                        }

            // add `psd2_sca_exemption_type` to the URL query string
                            if (getPsd2ScaExemptionType() != null) {
                            try {
                            joiner.add(String.format("%spsd2_sca_exemption_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPsd2ScaExemptionType()), "UTF-8").replaceAll("\\+", "%20")));
                            } catch (UnsupportedEncodingException e) {
                            // Should never happen, UTF-8 is always supported
                            throw new RuntimeException(e);
                            }
                            }

        return joiner.toString();
        }

    }

