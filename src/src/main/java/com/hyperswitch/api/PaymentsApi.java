/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.api;

import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiResponse;
import com.hyperswitch.client.Pair;

import com.hyperswitch.model.PaymentsConfirmIntentRequest;
import com.hyperswitch.model.PaymentsConfirmIntentResponse;
import com.hyperswitch.model.PaymentsCreateIntentRequest;
import com.hyperswitch.model.PaymentsIntentResponse;
import com.hyperswitch.model.PaymentsSessionResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class PaymentsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PaymentsApi() {
    this(new ApiClient());
  }

  public PaymentsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Payments - Confirm Intent
   * **Confirms a payment intent object with the payment method data**  .
   * @param id The payment identifier (required)
   * @param paymentsConfirmIntentRequest  (required)
   * @return PaymentsConfirmIntentResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsConfirmIntentResponse confirmPaymentIntent(String id, PaymentsConfirmIntentRequest paymentsConfirmIntentRequest) throws ApiException {
    ApiResponse<PaymentsConfirmIntentResponse> localVarResponse = confirmPaymentIntentWithHttpInfo(id, paymentsConfirmIntentRequest);
    return localVarResponse.getData();
  }

  /**
   * Payments - Confirm Intent
   * **Confirms a payment intent object with the payment method data**  .
   * @param id The payment identifier (required)
   * @param paymentsConfirmIntentRequest  (required)
   * @return ApiResponse&lt;PaymentsConfirmIntentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaymentsConfirmIntentResponse> confirmPaymentIntentWithHttpInfo(String id, PaymentsConfirmIntentRequest paymentsConfirmIntentRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = confirmPaymentIntentRequestBuilder(id, paymentsConfirmIntentRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("confirmPaymentIntent", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaymentsConfirmIntentResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaymentsConfirmIntentResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaymentsConfirmIntentResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder confirmPaymentIntentRequestBuilder(String id, PaymentsConfirmIntentRequest paymentsConfirmIntentRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling confirmPaymentIntent");
    }
    // verify the required parameter 'paymentsConfirmIntentRequest' is set
    if (paymentsConfirmIntentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsConfirmIntentRequest' when calling confirmPaymentIntent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/payments/{id}/confirm-intent"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(paymentsConfirmIntentRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Payments - Create Intent
   * **Creates a payment intent object when amount_details are passed.**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.
   * @param paymentsCreateIntentRequest  (required)
   * @return PaymentsIntentResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsIntentResponse createAPaymentIntent(PaymentsCreateIntentRequest paymentsCreateIntentRequest) throws ApiException {
    ApiResponse<PaymentsIntentResponse> localVarResponse = createAPaymentIntentWithHttpInfo(paymentsCreateIntentRequest);
    return localVarResponse.getData();
  }

  /**
   * Payments - Create Intent
   * **Creates a payment intent object when amount_details are passed.**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.
   * @param paymentsCreateIntentRequest  (required)
   * @return ApiResponse&lt;PaymentsIntentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaymentsIntentResponse> createAPaymentIntentWithHttpInfo(PaymentsCreateIntentRequest paymentsCreateIntentRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAPaymentIntentRequestBuilder(paymentsCreateIntentRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAPaymentIntent", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaymentsIntentResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaymentsIntentResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaymentsIntentResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAPaymentIntentRequestBuilder(PaymentsCreateIntentRequest paymentsCreateIntentRequest) throws ApiException {
    // verify the required parameter 'paymentsCreateIntentRequest' is set
    if (paymentsCreateIntentRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentsCreateIntentRequest' when calling createAPaymentIntent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/payments/create-intent";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(paymentsCreateIntentRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Payments - Session token
   * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
   * @param paymentId The identifier for payment (required)
   * @param body  (required)
   * @return PaymentsSessionResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsSessionResponse createSessionTokensForAPayment(String paymentId, Object body) throws ApiException {
    ApiResponse<PaymentsSessionResponse> localVarResponse = createSessionTokensForAPaymentWithHttpInfo(paymentId, body);
    return localVarResponse.getData();
  }

  /**
   * Payments - Session token
   * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
   * @param paymentId The identifier for payment (required)
   * @param body  (required)
   * @return ApiResponse&lt;PaymentsSessionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaymentsSessionResponse> createSessionTokensForAPaymentWithHttpInfo(String paymentId, Object body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSessionTokensForAPaymentRequestBuilder(paymentId, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSessionTokensForAPayment", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaymentsSessionResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaymentsSessionResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaymentsSessionResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSessionTokensForAPaymentRequestBuilder(String paymentId, Object body) throws ApiException {
    // verify the required parameter 'paymentId' is set
    if (paymentId == null) {
      throw new ApiException(400, "Missing the required parameter 'paymentId' when calling createSessionTokensForAPayment");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling createSessionTokensForAPayment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/payments/{payment_id}/create-external-sdk-tokens"
        .replace("{payment_id}", ApiClient.urlEncode(paymentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Payments - Get Intent
   * **Get a payment intent object when id is passed in path**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the call.
   * @param id The unique identifier for the Payment Intent (required)
   * @return PaymentsIntentResponse
   * @throws ApiException if fails to make API call
   */
  public PaymentsIntentResponse getThePaymentIntentDetails(String id) throws ApiException {
    ApiResponse<PaymentsIntentResponse> localVarResponse = getThePaymentIntentDetailsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Payments - Get Intent
   * **Get a payment intent object when id is passed in path**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the call.
   * @param id The unique identifier for the Payment Intent (required)
   * @return ApiResponse&lt;PaymentsIntentResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaymentsIntentResponse> getThePaymentIntentDetailsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getThePaymentIntentDetailsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getThePaymentIntentDetails", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaymentsIntentResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaymentsIntentResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaymentsIntentResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getThePaymentIntentDetailsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getThePaymentIntentDetails");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/payments/{id}/get-intent"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
