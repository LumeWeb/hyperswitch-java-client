/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.lumeweb.hyperswitch.api;

import com.lumeweb.hyperswitch.client.ApiClient;
import com.lumeweb.hyperswitch.client.ApiException;
import com.lumeweb.hyperswitch.client.ApiResponse;
import com.lumeweb.hyperswitch.client.Pair;

import com.lumeweb.hyperswitch.model.MerchantConnectorCreate;
import com.lumeweb.hyperswitch.model.MerchantConnectorDeleteResponse;
import com.lumeweb.hyperswitch.model.MerchantConnectorResponse;
import com.lumeweb.hyperswitch.model.MerchantConnectorUpdate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MerchantConnectorAccountApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MerchantConnectorAccountApi() {
    this(new ApiClient());
  }

  public MerchantConnectorAccountApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Connector Account - Create
   * Creates a new Connector Account for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.
   * @param merchantConnectorCreate  (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse createAMerchantConnector(MerchantConnectorCreate merchantConnectorCreate) throws ApiException {
    ApiResponse<MerchantConnectorResponse> localVarResponse = createAMerchantConnectorWithHttpInfo(merchantConnectorCreate);
    return localVarResponse.getData();
  }

  /**
   * Connector Account - Create
   * Creates a new Connector Account for the merchant account. The connector could be a payment processor/facilitator/acquirer or a provider of specialized services like Fraud/Accounting etc.
   * @param merchantConnectorCreate  (required)
   * @return ApiResponse&lt;MerchantConnectorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantConnectorResponse> createAMerchantConnectorWithHttpInfo(MerchantConnectorCreate merchantConnectorCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAMerchantConnectorRequestBuilder(merchantConnectorCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAMerchantConnector", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantConnectorResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantConnectorResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantConnectorResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAMerchantConnectorRequestBuilder(MerchantConnectorCreate merchantConnectorCreate) throws ApiException {
    // verify the required parameter 'merchantConnectorCreate' is set
    if (merchantConnectorCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantConnectorCreate' when calling createAMerchantConnector");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/connector_accounts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(merchantConnectorCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Merchant Connector - Delete
   * Delete or Detach a Merchant Connector from Merchant Account
   * @param id The unique identifier for the Merchant Connector (required)
   * @return MerchantConnectorDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorDeleteResponse deleteAMerchantConnector(Integer id) throws ApiException {
    ApiResponse<MerchantConnectorDeleteResponse> localVarResponse = deleteAMerchantConnectorWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Merchant Connector - Delete
   * Delete or Detach a Merchant Connector from Merchant Account
   * @param id The unique identifier for the Merchant Connector (required)
   * @return ApiResponse&lt;MerchantConnectorDeleteResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantConnectorDeleteResponse> deleteAMerchantConnectorWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAMerchantConnectorRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAMerchantConnector", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantConnectorDeleteResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantConnectorDeleteResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantConnectorDeleteResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAMerchantConnectorRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAMerchantConnector");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/connector_accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Connector Account - Retrieve
   * Retrieves details of a Connector account
   * @param id The unique identifier for the Merchant Connector (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse retrieveAMerchantConnector(Integer id) throws ApiException {
    ApiResponse<MerchantConnectorResponse> localVarResponse = retrieveAMerchantConnectorWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Connector Account - Retrieve
   * Retrieves details of a Connector account
   * @param id The unique identifier for the Merchant Connector (required)
   * @return ApiResponse&lt;MerchantConnectorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantConnectorResponse> retrieveAMerchantConnectorWithHttpInfo(Integer id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveAMerchantConnectorRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveAMerchantConnector", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantConnectorResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantConnectorResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantConnectorResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveAMerchantConnectorRequestBuilder(Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveAMerchantConnector");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/connector_accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Connector Account - Update
   * To update an existing Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector
   * @param id The unique identifier for the Merchant Connector (required)
   * @param merchantConnectorUpdate  (required)
   * @return MerchantConnectorResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantConnectorResponse updateAMerchantConnector(Integer id, MerchantConnectorUpdate merchantConnectorUpdate) throws ApiException {
    ApiResponse<MerchantConnectorResponse> localVarResponse = updateAMerchantConnectorWithHttpInfo(id, merchantConnectorUpdate);
    return localVarResponse.getData();
  }

  /**
   * Connector Account - Update
   * To update an existing Connector account. Helpful in enabling/disabling different payment methods and other settings for the connector
   * @param id The unique identifier for the Merchant Connector (required)
   * @param merchantConnectorUpdate  (required)
   * @return ApiResponse&lt;MerchantConnectorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantConnectorResponse> updateAMerchantConnectorWithHttpInfo(Integer id, MerchantConnectorUpdate merchantConnectorUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAMerchantConnectorRequestBuilder(id, merchantConnectorUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAMerchantConnector", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantConnectorResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantConnectorResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantConnectorResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAMerchantConnectorRequestBuilder(Integer id, MerchantConnectorUpdate merchantConnectorUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAMerchantConnector");
    }
    // verify the required parameter 'merchantConnectorUpdate' is set
    if (merchantConnectorUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantConnectorUpdate' when calling updateAMerchantConnector");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/connector_accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(merchantConnectorUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
