/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.BlocklistDataKind;
import com.hyperswitch.client.model.BlocklistRequest;
import com.hyperswitch.client.model.BlocklistResponse;
import com.hyperswitch.client.model.ToggleBlocklistResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class BlocklistApi extends BaseApi {

  public BlocklistApi() {
    super(Configuration.getDefaultApiClient());
  }

  public BlocklistApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param blocklistRequest  (required)
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse blockAFingerprint(BlocklistRequest blocklistRequest) throws ApiException {
    return this.blockAFingerprint(blocklistRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param blocklistRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse blockAFingerprint(BlocklistRequest blocklistRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = blocklistRequest;
    
    // verify the required parameter 'blocklistRequest' is set
    if (blocklistRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'blocklistRequest' when calling blockAFingerprint");
    }
    
    // create path and map variables
    String localVarPath = "/blocklist";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<BlocklistResponse> localVarReturnType = new TypeReference<BlocklistResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param dataKind Kind of the fingerprint list requested (required)
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse listBlockedFingerprintsOfAParticularKind(BlocklistDataKind dataKind) throws ApiException {
    return this.listBlockedFingerprintsOfAParticularKind(dataKind, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param dataKind Kind of the fingerprint list requested (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse listBlockedFingerprintsOfAParticularKind(BlocklistDataKind dataKind, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataKind' is set
    if (dataKind == null) {
      throw new ApiException(400, "Missing the required parameter 'dataKind' when calling listBlockedFingerprintsOfAParticularKind");
    }
    
    // create path and map variables
    String localVarPath = "/blocklist";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("data_kind", dataKind));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<BlocklistResponse> localVarReturnType = new TypeReference<BlocklistResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param status Boolean value to enable/disable blocklist (required)
   * @return ToggleBlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public ToggleBlocklistResponse toggleBlocklistGuardForAParticularMerchant(Boolean status) throws ApiException {
    return this.toggleBlocklistGuardForAParticularMerchant(status, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param status Boolean value to enable/disable blocklist (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ToggleBlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public ToggleBlocklistResponse toggleBlocklistGuardForAParticularMerchant(Boolean status, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'status' is set
    if (status == null) {
      throw new ApiException(400, "Missing the required parameter 'status' when calling toggleBlocklistGuardForAParticularMerchant");
    }
    
    // create path and map variables
    String localVarPath = "/blocklist/toggle";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<ToggleBlocklistResponse> localVarReturnType = new TypeReference<ToggleBlocklistResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param blocklistRequest  (required)
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse unblockAFingerprint(BlocklistRequest blocklistRequest) throws ApiException {
    return this.unblockAFingerprint(blocklistRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param blocklistRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return BlocklistResponse
   * @throws ApiException if fails to make API call
   */
  public BlocklistResponse unblockAFingerprint(BlocklistRequest blocklistRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = blocklistRequest;
    
    // verify the required parameter 'blocklistRequest' is set
    if (blocklistRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'blocklistRequest' when calling unblockAFingerprint");
    }
    
    // create path and map variables
    String localVarPath = "/blocklist";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<BlocklistResponse> localVarReturnType = new TypeReference<BlocklistResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
