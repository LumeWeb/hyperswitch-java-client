/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReceiverDetails
 */
@JsonPropertyOrder({
  ReceiverDetails.JSON_PROPERTY_AMOUNT_RECEIVED,
  ReceiverDetails.JSON_PROPERTY_AMOUNT_CHARGED,
  ReceiverDetails.JSON_PROPERTY_AMOUNT_REMAINING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class ReceiverDetails {
  public static final String JSON_PROPERTY_AMOUNT_RECEIVED = "amount_received";
  @javax.annotation.Nonnull
  private Long amountReceived;

  public static final String JSON_PROPERTY_AMOUNT_CHARGED = "amount_charged";
  private JsonNullable<Long> amountCharged = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_AMOUNT_REMAINING = "amount_remaining";
  private JsonNullable<Long> amountRemaining = JsonNullable.<Long>undefined();

  public ReceiverDetails() {
  }

  public ReceiverDetails amountReceived(@javax.annotation.Nonnull Long amountReceived) {
    
    this.amountReceived = amountReceived;
    return this;
  }

  /**
   * The amount received by receiver
   * @return amountReceived
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAmountReceived() {
    return amountReceived;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmountReceived(@javax.annotation.Nonnull Long amountReceived) {
    this.amountReceived = amountReceived;
  }


  public ReceiverDetails amountCharged(@javax.annotation.Nullable Long amountCharged) {
    this.amountCharged = JsonNullable.<Long>of(amountCharged);
    
    return this;
  }

  /**
   * The amount charged by ACH
   * @return amountCharged
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getAmountCharged() {
        return amountCharged.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_CHARGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAmountCharged_JsonNullable() {
    return amountCharged;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_CHARGED)
  public void setAmountCharged_JsonNullable(JsonNullable<Long> amountCharged) {
    this.amountCharged = amountCharged;
  }

  public void setAmountCharged(@javax.annotation.Nullable Long amountCharged) {
    this.amountCharged = JsonNullable.<Long>of(amountCharged);
  }


  public ReceiverDetails amountRemaining(@javax.annotation.Nullable Long amountRemaining) {
    this.amountRemaining = JsonNullable.<Long>of(amountRemaining);
    
    return this;
  }

  /**
   * The amount remaining to be sent via ACH
   * @return amountRemaining
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public Long getAmountRemaining() {
        return amountRemaining.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_REMAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getAmountRemaining_JsonNullable() {
    return amountRemaining;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_REMAINING)
  public void setAmountRemaining_JsonNullable(JsonNullable<Long> amountRemaining) {
    this.amountRemaining = amountRemaining;
  }

  public void setAmountRemaining(@javax.annotation.Nullable Long amountRemaining) {
    this.amountRemaining = JsonNullable.<Long>of(amountRemaining);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiverDetails receiverDetails = (ReceiverDetails) o;
    return Objects.equals(this.amountReceived, receiverDetails.amountReceived) &&
        equalsNullable(this.amountCharged, receiverDetails.amountCharged) &&
        equalsNullable(this.amountRemaining, receiverDetails.amountRemaining);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountReceived, hashCodeNullable(amountCharged), hashCodeNullable(amountRemaining));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiverDetails {\n");
    sb.append("    amountReceived: ").append(toIndentedString(amountReceived)).append("\n");
    sb.append("    amountCharged: ").append(toIndentedString(amountCharged)).append("\n");
    sb.append("    amountRemaining: ").append(toIndentedString(amountRemaining)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

