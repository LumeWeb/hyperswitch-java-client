/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.api;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.model.MerchantAccountCreate;
import com.hyperswitch.client.model.MerchantAccountDeleteResponse;
import com.hyperswitch.client.model.MerchantAccountResponse;
import com.hyperswitch.client.model.MerchantAccountUpdate;
import com.hyperswitch.client.model.ToggleKVRequest;
import com.hyperswitch.client.model.ToggleKVResponse;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MerchantAccountApi
 */
@Ignore
public class MerchantAccountApiTest {

    private final MerchantAccountApi api = new MerchantAccountApi();

    /**
     * Merchant Account - Create
     *
     * Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAMerchantAccountTest() throws ApiException {
        MerchantAccountCreate merchantAccountCreate = null;
        MerchantAccountResponse response = api.createAMerchantAccount(merchantAccountCreate);

        // TODO: test validations
    }
    /**
     * Merchant Account - Delete
     *
     * Delete a *merchant* account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAMerchantAccountTest() throws ApiException {
        String accountId = null;
        MerchantAccountDeleteResponse response = api.deleteAMerchantAccount(accountId);

        // TODO: test validations
    }
    /**
     * Merchant Account - KV Status
     *
     * Toggle KV mode for the Merchant Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableDisableKVForAMerchantAccountTest() throws ApiException {
        String accountId = null;
        ToggleKVRequest toggleKVRequest = null;
        ToggleKVResponse response = api.enableDisableKVForAMerchantAccount(accountId, toggleKVRequest);

        // TODO: test validations
    }
    /**
     * Merchant Account - Retrieve
     *
     * Retrieve a *merchant* account details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAMerchantAccountTest() throws ApiException {
        String accountId = null;
        MerchantAccountResponse response = api.retrieveAMerchantAccount(accountId);

        // TODO: test validations
    }
    /**
     * Merchant Account - Update
     *
     * Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAMerchantAccountTest() throws ApiException {
        String accountId = null;
        MerchantAccountUpdate merchantAccountUpdate = null;
        MerchantAccountResponse response = api.updateAMerchantAccount(accountId, merchantAccountUpdate);

        // TODO: test validations
    }
}
