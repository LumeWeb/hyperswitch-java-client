/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.ChargeRefunds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RefundRequestCharges
 */
@JsonPropertyOrder({
  RefundRequestCharges.JSON_PROPERTY_CHARGE_ID,
  RefundRequestCharges.JSON_PROPERTY_REVERT_PLATFORM_FEE,
  RefundRequestCharges.JSON_PROPERTY_REVERT_TRANSFER
})
@JsonTypeName("RefundRequest_charges")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RefundRequestCharges {
  public static final String JSON_PROPERTY_CHARGE_ID = "charge_id";
  private String chargeId;

  public static final String JSON_PROPERTY_REVERT_PLATFORM_FEE = "revert_platform_fee";
  private JsonNullable<Boolean> revertPlatformFee = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_REVERT_TRANSFER = "revert_transfer";
  private JsonNullable<Boolean> revertTransfer = JsonNullable.<Boolean>undefined();

  public RefundRequestCharges() { 
  }

  public RefundRequestCharges chargeId(String chargeId) {
    
    this.chargeId = chargeId;
    return this;
  }

   /**
   * Identifier for charge created for the payment
   * @return chargeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Identifier for charge created for the payment")
  @JsonProperty(JSON_PROPERTY_CHARGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getChargeId() {
    return chargeId;
  }


  @JsonProperty(JSON_PROPERTY_CHARGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChargeId(String chargeId) {
    this.chargeId = chargeId;
  }


  public RefundRequestCharges revertPlatformFee(Boolean revertPlatformFee) {
    this.revertPlatformFee = JsonNullable.<Boolean>of(revertPlatformFee);
    
    return this;
  }

   /**
   * Toggle for reverting the application fee that was collected for the payment. If set to false, the funds are pulled from the destination account.
   * @return revertPlatformFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Toggle for reverting the application fee that was collected for the payment. If set to false, the funds are pulled from the destination account.")
  @JsonIgnore

  public Boolean getRevertPlatformFee() {
        return revertPlatformFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REVERT_PLATFORM_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getRevertPlatformFee_JsonNullable() {
    return revertPlatformFee;
  }
  
  @JsonProperty(JSON_PROPERTY_REVERT_PLATFORM_FEE)
  public void setRevertPlatformFee_JsonNullable(JsonNullable<Boolean> revertPlatformFee) {
    this.revertPlatformFee = revertPlatformFee;
  }

  public void setRevertPlatformFee(Boolean revertPlatformFee) {
    this.revertPlatformFee = JsonNullable.<Boolean>of(revertPlatformFee);
  }


  public RefundRequestCharges revertTransfer(Boolean revertTransfer) {
    this.revertTransfer = JsonNullable.<Boolean>of(revertTransfer);
    
    return this;
  }

   /**
   * Toggle for reverting the transfer that was made during the charge. If set to false, the funds are pulled from the main platform&#39;s account.
   * @return revertTransfer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Toggle for reverting the transfer that was made during the charge. If set to false, the funds are pulled from the main platform's account.")
  @JsonIgnore

  public Boolean getRevertTransfer() {
        return revertTransfer.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REVERT_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getRevertTransfer_JsonNullable() {
    return revertTransfer;
  }
  
  @JsonProperty(JSON_PROPERTY_REVERT_TRANSFER)
  public void setRevertTransfer_JsonNullable(JsonNullable<Boolean> revertTransfer) {
    this.revertTransfer = revertTransfer;
  }

  public void setRevertTransfer(Boolean revertTransfer) {
    this.revertTransfer = JsonNullable.<Boolean>of(revertTransfer);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundRequestCharges refundRequestCharges = (RefundRequestCharges) o;
    return Objects.equals(this.chargeId, refundRequestCharges.chargeId) &&
        equalsNullable(this.revertPlatformFee, refundRequestCharges.revertPlatformFee) &&
        equalsNullable(this.revertTransfer, refundRequestCharges.revertTransfer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeId, hashCodeNullable(revertPlatformFee), hashCodeNullable(revertTransfer));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundRequestCharges {\n");
    sb.append("    chargeId: ").append(toIndentedString(chargeId)).append("\n");
    sb.append("    revertPlatformFee: ").append(toIndentedString(revertPlatformFee)).append("\n");
    sb.append("    revertTransfer: ").append(toIndentedString(revertTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

