/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.api;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.model.PayoutCancelRequest;
import com.hyperswitch.client.model.PayoutConfirmRequest;
import com.hyperswitch.client.model.PayoutCreateResponse;
import com.hyperswitch.client.model.PayoutFulfillRequest;
import com.hyperswitch.client.model.PayoutListFilterConstraints;
import com.hyperswitch.client.model.PayoutListFilters;
import com.hyperswitch.client.model.PayoutListResponse;
import com.hyperswitch.client.model.PayoutUpdateRequest;
import com.hyperswitch.client.model.PayoutsCreateRequest;
import com.hyperswitch.client.model.TimeRange;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayoutsApi
 */
@Disabled
public class PayoutsApiTest {

    private final PayoutsApi api = new PayoutsApi();

    /**
     * Payouts - Cancel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelAPayoutTest() throws ApiException {
        String payoutId = null;
        PayoutCancelRequest payoutCancelRequest = null;
        PayoutCreateResponse response = api.cancelAPayout(payoutId, payoutCancelRequest);

        // TODO: test validations
    }
    /**
     * Payouts - Confirm
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmAPayoutTest() throws ApiException {
        String payoutId = null;
        PayoutConfirmRequest payoutConfirmRequest = null;
        PayoutCreateResponse response = api.confirmAPayout(payoutId, payoutConfirmRequest);

        // TODO: test validations
    }
    /**
     * Payouts - Create
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAPayoutTest() throws ApiException {
        PayoutsCreateRequest payoutsCreateRequest = null;
        PayoutCreateResponse response = api.createAPayout(payoutsCreateRequest);

        // TODO: test validations
    }
    /**
     * Payouts - List using filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterPayoutsUsingSpecificConstraintsTest() throws ApiException {
        PayoutListFilterConstraints payoutListFilterConstraints = null;
        PayoutListResponse response = api.filterPayoutsUsingSpecificConstraints(payoutListFilterConstraints);

        // TODO: test validations
    }
    /**
     * Payouts - Fulfill
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fulfillAPayoutTest() throws ApiException {
        String payoutId = null;
        PayoutFulfillRequest payoutFulfillRequest = null;
        PayoutCreateResponse response = api.fulfillAPayout(payoutId, payoutFulfillRequest);

        // TODO: test validations
    }
    /**
     * Payouts - List available filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePayoutFiltersTest() throws ApiException {
        TimeRange timeRange = null;
        PayoutListFilters response = api.listAvailablePayoutFilters(timeRange);

        // TODO: test validations
    }
    /**
     * Payouts - List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPayoutsUsingGenericConstraintsTest() throws ApiException {
        String customerId = null;
        String startingAfter = null;
        String endingBefore = null;
        String limit = null;
        String created = null;
        String timeRange = null;
        PayoutListResponse response = api.listPayoutsUsingGenericConstraints(customerId, startingAfter, endingBefore, limit, created, timeRange);

        // TODO: test validations
    }
    /**
     * Payouts - Retrieve
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAPayoutTest() throws ApiException {
        String payoutId = null;
        Boolean forceSync = null;
        PayoutCreateResponse response = api.retrieveAPayout(payoutId, forceSync);

        // TODO: test validations
    }
    /**
     * Payouts - Update
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAPayoutTest() throws ApiException {
        String payoutId = null;
        PayoutUpdateRequest payoutUpdateRequest = null;
        PayoutCreateResponse response = api.updateAPayout(payoutId, payoutUpdateRequest);

        // TODO: test validations
    }
}
