/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.BaseApi;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.MandateResponse;
import com.hyperswitch.client.model.MandateRevokedResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class MandatesApi extends BaseApi {

  public MandatesApi() {
    super(Configuration.getDefaultApiClient());
  }

  public MandatesApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Mandates - Customer Mandates List
   * Lists all the mandates for a particular customer id.
   * @param customerId The unique identifier for the customer (required)
   * @return List&lt;MandateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MandateResponse> listMandatesForACustomer(String customerId) throws ApiException {
    return this.listMandatesForACustomer(customerId, Collections.emptyMap());
  }


  /**
   * Mandates - Customer Mandates List
   * Lists all the mandates for a particular customer id.
   * @param customerId The unique identifier for the customer (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;MandateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MandateResponse> listMandatesForACustomer(String customerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listMandatesForACustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customer_id}/mandates"
      .replaceAll("\\{" + "customer_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(customerId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<List<MandateResponse>> localVarReturnType = new TypeReference<List<MandateResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Mandates - Retrieve Mandate
   * Retrieves a mandate created using the Payments/Create API
   * @param mandateId The identifier for mandate (required)
   * @return MandateResponse
   * @throws ApiException if fails to make API call
   */
  public MandateResponse retrieveAMandate(String mandateId) throws ApiException {
    return this.retrieveAMandate(mandateId, Collections.emptyMap());
  }


  /**
   * Mandates - Retrieve Mandate
   * Retrieves a mandate created using the Payments/Create API
   * @param mandateId The identifier for mandate (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MandateResponse
   * @throws ApiException if fails to make API call
   */
  public MandateResponse retrieveAMandate(String mandateId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'mandateId' is set
    if (mandateId == null) {
      throw new ApiException(400, "Missing the required parameter 'mandateId' when calling retrieveAMandate");
    }
    
    // create path and map variables
    String localVarPath = "/mandates/{mandate_id}"
      .replaceAll("\\{" + "mandate_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(mandateId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<MandateResponse> localVarReturnType = new TypeReference<MandateResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Mandates - Revoke Mandate
   * Revokes a mandate created using the Payments/Create API
   * @param mandateId The identifier for a mandate (required)
   * @return MandateRevokedResponse
   * @throws ApiException if fails to make API call
   */
  public MandateRevokedResponse revokeAMandate(String mandateId) throws ApiException {
    return this.revokeAMandate(mandateId, Collections.emptyMap());
  }


  /**
   * Mandates - Revoke Mandate
   * Revokes a mandate created using the Payments/Create API
   * @param mandateId The identifier for a mandate (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return MandateRevokedResponse
   * @throws ApiException if fails to make API call
   */
  public MandateRevokedResponse revokeAMandate(String mandateId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'mandateId' is set
    if (mandateId == null) {
      throw new ApiException(400, "Missing the required parameter 'mandateId' when calling revokeAMandate");
    }
    
    // create path and map variables
    String localVarPath = "/mandates/revoke/{mandate_id}"
      .replaceAll("\\{" + "mandate_id" + "\\}", apiClient.escapeString(apiClient.parameterToString(mandateId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    TypeReference<MandateRevokedResponse> localVarReturnType = new TypeReference<MandateRevokedResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api_key" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
