/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.MerchantConnectorDetailsWrap;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * PaymentsRetrieveRequest
 */
@JsonPropertyOrder({
  PaymentsRetrieveRequest.JSON_PROPERTY_RESOURCE_ID,
  PaymentsRetrieveRequest.JSON_PROPERTY_MERCHANT_ID,
  PaymentsRetrieveRequest.JSON_PROPERTY_FORCE_SYNC,
  PaymentsRetrieveRequest.JSON_PROPERTY_PARAM,
  PaymentsRetrieveRequest.JSON_PROPERTY_CONNECTOR,
  PaymentsRetrieveRequest.JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS,
  PaymentsRetrieveRequest.JSON_PROPERTY_CLIENT_SECRET,
  PaymentsRetrieveRequest.JSON_PROPERTY_EXPAND_CAPTURES,
  PaymentsRetrieveRequest.JSON_PROPERTY_EXPAND_ATTEMPTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentsRetrieveRequest {
  public static final String JSON_PROPERTY_RESOURCE_ID = "resource_id";
  private String resourceId;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchant_id";
  private JsonNullable<String> merchantId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FORCE_SYNC = "force_sync";
  private Boolean forceSync;

  public static final String JSON_PROPERTY_PARAM = "param";
  private JsonNullable<String> param = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CONNECTOR = "connector";
  private JsonNullable<String> connector = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS = "merchant_connector_details";
  private JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>undefined();

  public static final String JSON_PROPERTY_CLIENT_SECRET = "client_secret";
  private JsonNullable<String> clientSecret = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_EXPAND_CAPTURES = "expand_captures";
  private JsonNullable<Boolean> expandCaptures = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_EXPAND_ATTEMPTS = "expand_attempts";
  private JsonNullable<Boolean> expandAttempts = JsonNullable.<Boolean>undefined();

  public PaymentsRetrieveRequest() {
  }

  public PaymentsRetrieveRequest resourceId(String resourceId) {
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * The type of ID (ex: payment intent id, payment attempt id or connector txn id)
   * @return resourceId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResourceId() {
    return resourceId;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public PaymentsRetrieveRequest merchantId(String merchantId) {
    this.merchantId = JsonNullable.<String>of(merchantId);
    
    return this;
  }

   /**
   * The identifier for the Merchant Account.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getMerchantId() {
        return merchantId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getMerchantId_JsonNullable() {
    return merchantId;
  }
  
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  public void setMerchantId_JsonNullable(JsonNullable<String> merchantId) {
    this.merchantId = merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = JsonNullable.<String>of(merchantId);
  }


  public PaymentsRetrieveRequest forceSync(Boolean forceSync) {
    
    this.forceSync = forceSync;
    return this;
  }

   /**
   * Decider to enable or disable the connector call for retrieve request
   * @return forceSync
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORCE_SYNC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getForceSync() {
    return forceSync;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_SYNC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForceSync(Boolean forceSync) {
    this.forceSync = forceSync;
  }


  public PaymentsRetrieveRequest param(String param) {
    this.param = JsonNullable.<String>of(param);
    
    return this;
  }

   /**
   * The parameters passed to a retrieve request
   * @return param
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getParam() {
        return param.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParam_JsonNullable() {
    return param;
  }
  
  @JsonProperty(JSON_PROPERTY_PARAM)
  public void setParam_JsonNullable(JsonNullable<String> param) {
    this.param = param;
  }

  public void setParam(String param) {
    this.param = JsonNullable.<String>of(param);
  }


  public PaymentsRetrieveRequest connector(String connector) {
    this.connector = JsonNullable.<String>of(connector);
    
    return this;
  }

   /**
   * The name of the connector
   * @return connector
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getConnector() {
        return connector.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getConnector_JsonNullable() {
    return connector;
  }
  
  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  public void setConnector_JsonNullable(JsonNullable<String> connector) {
    this.connector = connector;
  }

  public void setConnector(String connector) {
    this.connector = JsonNullable.<String>of(connector);
  }


  public PaymentsRetrieveRequest merchantConnectorDetails(MerchantConnectorDetailsWrap merchantConnectorDetails) {
    this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
    
    return this;
  }

   /**
   * Get merchantConnectorDetails
   * @return merchantConnectorDetails
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public MerchantConnectorDetailsWrap getMerchantConnectorDetails() {
        return merchantConnectorDetails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MerchantConnectorDetailsWrap> getMerchantConnectorDetails_JsonNullable() {
    return merchantConnectorDetails;
  }
  
  @JsonProperty(JSON_PROPERTY_MERCHANT_CONNECTOR_DETAILS)
  public void setMerchantConnectorDetails_JsonNullable(JsonNullable<MerchantConnectorDetailsWrap> merchantConnectorDetails) {
    this.merchantConnectorDetails = merchantConnectorDetails;
  }

  public void setMerchantConnectorDetails(MerchantConnectorDetailsWrap merchantConnectorDetails) {
    this.merchantConnectorDetails = JsonNullable.<MerchantConnectorDetailsWrap>of(merchantConnectorDetails);
  }


  public PaymentsRetrieveRequest clientSecret(String clientSecret) {
    this.clientSecret = JsonNullable.<String>of(clientSecret);
    
    return this;
  }

   /**
   * This is a token which expires after 15 minutes, used from the client to authenticate and create sessions from the SDK
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getClientSecret() {
        return clientSecret.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getClientSecret_JsonNullable() {
    return clientSecret;
  }
  
  @JsonProperty(JSON_PROPERTY_CLIENT_SECRET)
  public void setClientSecret_JsonNullable(JsonNullable<String> clientSecret) {
    this.clientSecret = clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = JsonNullable.<String>of(clientSecret);
  }


  public PaymentsRetrieveRequest expandCaptures(Boolean expandCaptures) {
    this.expandCaptures = JsonNullable.<Boolean>of(expandCaptures);
    
    return this;
  }

   /**
   * If enabled provides list of captures linked to latest attempt
   * @return expandCaptures
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getExpandCaptures() {
        return expandCaptures.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPAND_CAPTURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getExpandCaptures_JsonNullable() {
    return expandCaptures;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPAND_CAPTURES)
  public void setExpandCaptures_JsonNullable(JsonNullable<Boolean> expandCaptures) {
    this.expandCaptures = expandCaptures;
  }

  public void setExpandCaptures(Boolean expandCaptures) {
    this.expandCaptures = JsonNullable.<Boolean>of(expandCaptures);
  }


  public PaymentsRetrieveRequest expandAttempts(Boolean expandAttempts) {
    this.expandAttempts = JsonNullable.<Boolean>of(expandAttempts);
    
    return this;
  }

   /**
   * If enabled provides list of attempts linked to payment intent
   * @return expandAttempts
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getExpandAttempts() {
        return expandAttempts.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPAND_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getExpandAttempts_JsonNullable() {
    return expandAttempts;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPAND_ATTEMPTS)
  public void setExpandAttempts_JsonNullable(JsonNullable<Boolean> expandAttempts) {
    this.expandAttempts = expandAttempts;
  }

  public void setExpandAttempts(Boolean expandAttempts) {
    this.expandAttempts = JsonNullable.<Boolean>of(expandAttempts);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsRetrieveRequest paymentsRetrieveRequest = (PaymentsRetrieveRequest) o;
    return Objects.equals(this.resourceId, paymentsRetrieveRequest.resourceId) &&
        equalsNullable(this.merchantId, paymentsRetrieveRequest.merchantId) &&
        Objects.equals(this.forceSync, paymentsRetrieveRequest.forceSync) &&
        equalsNullable(this.param, paymentsRetrieveRequest.param) &&
        equalsNullable(this.connector, paymentsRetrieveRequest.connector) &&
        equalsNullable(this.merchantConnectorDetails, paymentsRetrieveRequest.merchantConnectorDetails) &&
        equalsNullable(this.clientSecret, paymentsRetrieveRequest.clientSecret) &&
        equalsNullable(this.expandCaptures, paymentsRetrieveRequest.expandCaptures) &&
        equalsNullable(this.expandAttempts, paymentsRetrieveRequest.expandAttempts);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceId, hashCodeNullable(merchantId), forceSync, hashCodeNullable(param), hashCodeNullable(connector), hashCodeNullable(merchantConnectorDetails), hashCodeNullable(clientSecret), hashCodeNullable(expandCaptures), hashCodeNullable(expandAttempts));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsRetrieveRequest {\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    forceSync: ").append(toIndentedString(forceSync)).append("\n");
    sb.append("    param: ").append(toIndentedString(param)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    merchantConnectorDetails: ").append(toIndentedString(merchantConnectorDetails)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    expandCaptures: ").append(toIndentedString(expandCaptures)).append("\n");
    sb.append("    expandAttempts: ").append(toIndentedString(expandAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `resource_id` to the URL query string
    if (getResourceId() != null) {
      try {
        joiner.add(String.format("%sresource_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `merchant_id` to the URL query string
    if (getMerchantId() != null) {
      try {
        joiner.add(String.format("%smerchant_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMerchantId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `force_sync` to the URL query string
    if (getForceSync() != null) {
      try {
        joiner.add(String.format("%sforce_sync%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForceSync()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `param` to the URL query string
    if (getParam() != null) {
      try {
        joiner.add(String.format("%sparam%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParam()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `connector` to the URL query string
    if (getConnector() != null) {
      try {
        joiner.add(String.format("%sconnector%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConnector()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `merchant_connector_details` to the URL query string
    if (getMerchantConnectorDetails() != null) {
      joiner.add(getMerchantConnectorDetails().toUrlQueryString(prefix + "merchant_connector_details" + suffix));
    }

    // add `client_secret` to the URL query string
    if (getClientSecret() != null) {
      try {
        joiner.add(String.format("%sclient_secret%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientSecret()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expand_captures` to the URL query string
    if (getExpandCaptures() != null) {
      try {
        joiner.add(String.format("%sexpand_captures%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpandCaptures()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expand_attempts` to the URL query string
    if (getExpandAttempts() != null) {
      try {
        joiner.add(String.format("%sexpand_attempts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpandAttempts()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

