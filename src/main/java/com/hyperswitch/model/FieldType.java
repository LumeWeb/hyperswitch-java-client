/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.FieldTypeOneOf;
import com.hyperswitch.model.FieldTypeOneOf1;
import com.hyperswitch.model.FieldTypeOneOf2;
import com.hyperswitch.model.FieldTypeOneOf3;
import com.hyperswitch.model.FieldTypeOneOf4;
import com.hyperswitch.model.FieldTypeOneOf5;
import com.hyperswitch.model.FieldTypeOneOfUserCountry;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Possible field type of required fields in payment_method_data
 */
@JsonPropertyOrder({
  FieldType.JSON_PROPERTY_USER_COUNTRY,
  FieldType.JSON_PROPERTY_USER_CURRENCY,
  FieldType.JSON_PROPERTY_USER_ADDRESS_COUNTRY,
  FieldType.JSON_PROPERTY_USER_SHIPPING_ADDRESS_COUNTRY,
  FieldType.JSON_PROPERTY_DROP_DOWN,
  FieldType.JSON_PROPERTY_LANGUAGE_PREFERENCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class FieldType {
  public static final String JSON_PROPERTY_USER_COUNTRY = "user_country";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry userCountry;

  public static final String JSON_PROPERTY_USER_CURRENCY = "user_currency";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry userCurrency;

  public static final String JSON_PROPERTY_USER_ADDRESS_COUNTRY = "user_address_country";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry userAddressCountry;

  public static final String JSON_PROPERTY_USER_SHIPPING_ADDRESS_COUNTRY = "user_shipping_address_country";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry userShippingAddressCountry;

  public static final String JSON_PROPERTY_DROP_DOWN = "drop_down";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry dropDown;

  public static final String JSON_PROPERTY_LANGUAGE_PREFERENCE = "language_preference";
  @javax.annotation.Nonnull
  private FieldTypeOneOfUserCountry languagePreference;

  public FieldType() {
  }

  public FieldType userCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userCountry) {
    
    this.userCountry = userCountry;
    return this;
  }

  /**
   * Get userCountry
   * @return userCountry
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getUserCountry() {
    return userCountry;
  }


  @JsonProperty(JSON_PROPERTY_USER_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userCountry) {
    this.userCountry = userCountry;
  }


  public FieldType userCurrency(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userCurrency) {
    
    this.userCurrency = userCurrency;
    return this;
  }

  /**
   * Get userCurrency
   * @return userCurrency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getUserCurrency() {
    return userCurrency;
  }


  @JsonProperty(JSON_PROPERTY_USER_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserCurrency(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userCurrency) {
    this.userCurrency = userCurrency;
  }


  public FieldType userAddressCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userAddressCountry) {
    
    this.userAddressCountry = userAddressCountry;
    return this;
  }

  /**
   * Get userAddressCountry
   * @return userAddressCountry
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ADDRESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getUserAddressCountry() {
    return userAddressCountry;
  }


  @JsonProperty(JSON_PROPERTY_USER_ADDRESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserAddressCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userAddressCountry) {
    this.userAddressCountry = userAddressCountry;
  }


  public FieldType userShippingAddressCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userShippingAddressCountry) {
    
    this.userShippingAddressCountry = userShippingAddressCountry;
    return this;
  }

  /**
   * Get userShippingAddressCountry
   * @return userShippingAddressCountry
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_SHIPPING_ADDRESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getUserShippingAddressCountry() {
    return userShippingAddressCountry;
  }


  @JsonProperty(JSON_PROPERTY_USER_SHIPPING_ADDRESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserShippingAddressCountry(@javax.annotation.Nonnull FieldTypeOneOfUserCountry userShippingAddressCountry) {
    this.userShippingAddressCountry = userShippingAddressCountry;
  }


  public FieldType dropDown(@javax.annotation.Nonnull FieldTypeOneOfUserCountry dropDown) {
    
    this.dropDown = dropDown;
    return this;
  }

  /**
   * Get dropDown
   * @return dropDown
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DROP_DOWN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getDropDown() {
    return dropDown;
  }


  @JsonProperty(JSON_PROPERTY_DROP_DOWN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDropDown(@javax.annotation.Nonnull FieldTypeOneOfUserCountry dropDown) {
    this.dropDown = dropDown;
  }


  public FieldType languagePreference(@javax.annotation.Nonnull FieldTypeOneOfUserCountry languagePreference) {
    
    this.languagePreference = languagePreference;
    return this;
  }

  /**
   * Get languagePreference
   * @return languagePreference
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LANGUAGE_PREFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FieldTypeOneOfUserCountry getLanguagePreference() {
    return languagePreference;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE_PREFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLanguagePreference(@javax.annotation.Nonnull FieldTypeOneOfUserCountry languagePreference) {
    this.languagePreference = languagePreference;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldType fieldType = (FieldType) o;
    return Objects.equals(this.userCountry, fieldType.userCountry) &&
        Objects.equals(this.userCurrency, fieldType.userCurrency) &&
        Objects.equals(this.userAddressCountry, fieldType.userAddressCountry) &&
        Objects.equals(this.userShippingAddressCountry, fieldType.userShippingAddressCountry) &&
        Objects.equals(this.dropDown, fieldType.dropDown) &&
        Objects.equals(this.languagePreference, fieldType.languagePreference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userCountry, userCurrency, userAddressCountry, userShippingAddressCountry, dropDown, languagePreference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldType {\n");
    sb.append("    userCountry: ").append(toIndentedString(userCountry)).append("\n");
    sb.append("    userCurrency: ").append(toIndentedString(userCurrency)).append("\n");
    sb.append("    userAddressCountry: ").append(toIndentedString(userAddressCountry)).append("\n");
    sb.append("    userShippingAddressCountry: ").append(toIndentedString(userShippingAddressCountry)).append("\n");
    sb.append("    dropDown: ").append(toIndentedString(dropDown)).append("\n");
    sb.append("    languagePreference: ").append(toIndentedString(languagePreference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

