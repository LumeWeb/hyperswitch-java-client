/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.api;

import com.lumeweb.hyperswitch.client.ApiException;
import com.lumeweb.hyperswitch.model.PaymentsConfirmIntentRequest;
import com.lumeweb.hyperswitch.model.PaymentsConfirmIntentResponse;
import com.lumeweb.hyperswitch.model.PaymentsCreateIntentRequest;
import com.lumeweb.hyperswitch.model.PaymentsIntentResponse;
import com.lumeweb.hyperswitch.model.PaymentsSessionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    
    /**
     * Payments - Confirm Intent
     *
     * **Confirms a payment intent object with the payment method data**  .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmPaymentIntentTest() throws ApiException {
        String id = null;
        PaymentsConfirmIntentRequest paymentsConfirmIntentRequest = null;
        PaymentsConfirmIntentResponse response = 
        api.confirmPaymentIntent(id, paymentsConfirmIntentRequest);
        
        // TODO: test validations
    }
    
    /**
     * Payments - Create Intent
     *
     * **Creates a payment intent object when amount_details are passed.**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the first call, and use the &#39;client secret&#39; returned in this API along with your &#39;publishable key&#39; to make subsequent API calls from your client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAPaymentIntentTest() throws ApiException {
        PaymentsCreateIntentRequest paymentsCreateIntentRequest = null;
        PaymentsIntentResponse response = 
        api.createAPaymentIntent(paymentsCreateIntentRequest);
        
        // TODO: test validations
    }
    
    /**
     * Payments - Session token
     *
     * Creates a session object or a session token for wallets like Apple Pay, Google Pay, etc. These tokens are used by Hyperswitch&#39;s SDK to initiate these wallets&#39; SDK.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTokensForAPaymentTest() throws ApiException {
        String paymentId = null;
        Object body = null;
        PaymentsSessionResponse response = 
        api.createSessionTokensForAPayment(paymentId, body);
        
        // TODO: test validations
    }
    
    /**
     * Payments - Get Intent
     *
     * **Get a payment intent object when id is passed in path**  You will require the &#39;API - Key&#39; from the Hyperswitch dashboard to make the call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThePaymentIntentDetailsTest() throws ApiException {
        String id = null;
        PaymentsIntentResponse response = 
        api.getThePaymentIntentDetails(id);
        
        // TODO: test validations
    }
    
}
