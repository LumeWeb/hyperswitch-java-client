/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.hyperswitch.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.hyperswitch.client.ApiException;
import com.hyperswitch.client.ApiClient;
import com.hyperswitch.client.Configuration;
import com.hyperswitch.client.model.*;
import com.hyperswitch.client.Pair;

import com.hyperswitch.client.model.GsmCreateRequest;
import com.hyperswitch.client.model.GsmDeleteRequest;
import com.hyperswitch.client.model.GsmDeleteResponse;
import com.hyperswitch.client.model.GsmResponse;
import com.hyperswitch.client.model.GsmRetrieveRequest;
import com.hyperswitch.client.model.GsmUpdateRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GsmApi {


  private ApiClient apiClient;

  public GsmApi() {
    this(Configuration.getDefaultApiClient());
  }

  public GsmApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Gsm - Create
   * Creates a GSM (Global Status Mapping) Rule. A GSM rule is used to map a connector&#39;s error message/error code combination during a particular payments flow/sub-flow to Hyperswitch&#39;s unified status/error code/error message combination. It is also used to decide the next action in the flow - retry/requeue/do_default
   * @param gsmCreateRequest  (required)
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse createGsmRule(GsmCreateRequest gsmCreateRequest) throws ApiException {
    return this.createGsmRule(gsmCreateRequest, Collections.emptyMap());
  }


  /**
   * Gsm - Create
   * Creates a GSM (Global Status Mapping) Rule. A GSM rule is used to map a connector&#39;s error message/error code combination during a particular payments flow/sub-flow to Hyperswitch&#39;s unified status/error code/error message combination. It is also used to decide the next action in the flow - retry/requeue/do_default
   * @param gsmCreateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse createGsmRule(GsmCreateRequest gsmCreateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = gsmCreateRequest;
    
    // verify the required parameter 'gsmCreateRequest' is set
    if (gsmCreateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'gsmCreateRequest' when calling createGsmRule");
    }
    
    // create path and map variables
    String localVarPath = "/gsm";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<GsmResponse> localVarReturnType = new TypeReference<GsmResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Gsm - Delete
   * Deletes a Gsm Rule
   * @param gsmDeleteRequest  (required)
   * @return GsmDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public GsmDeleteResponse deleteGsmRule(GsmDeleteRequest gsmDeleteRequest) throws ApiException {
    return this.deleteGsmRule(gsmDeleteRequest, Collections.emptyMap());
  }


  /**
   * Gsm - Delete
   * Deletes a Gsm Rule
   * @param gsmDeleteRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GsmDeleteResponse
   * @throws ApiException if fails to make API call
   */
  public GsmDeleteResponse deleteGsmRule(GsmDeleteRequest gsmDeleteRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = gsmDeleteRequest;
    
    // verify the required parameter 'gsmDeleteRequest' is set
    if (gsmDeleteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'gsmDeleteRequest' when calling deleteGsmRule");
    }
    
    // create path and map variables
    String localVarPath = "/gsm/delete";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<GsmDeleteResponse> localVarReturnType = new TypeReference<GsmDeleteResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Gsm - Get
   * Retrieves a Gsm Rule
   * @param gsmRetrieveRequest  (required)
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse retrieveGsmRule(GsmRetrieveRequest gsmRetrieveRequest) throws ApiException {
    return this.retrieveGsmRule(gsmRetrieveRequest, Collections.emptyMap());
  }


  /**
   * Gsm - Get
   * Retrieves a Gsm Rule
   * @param gsmRetrieveRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse retrieveGsmRule(GsmRetrieveRequest gsmRetrieveRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = gsmRetrieveRequest;
    
    // verify the required parameter 'gsmRetrieveRequest' is set
    if (gsmRetrieveRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'gsmRetrieveRequest' when calling retrieveGsmRule");
    }
    
    // create path and map variables
    String localVarPath = "/gsm/get";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<GsmResponse> localVarReturnType = new TypeReference<GsmResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Gsm - Update
   * Updates a Gsm Rule
   * @param gsmUpdateRequest  (required)
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse updateGsmRule(GsmUpdateRequest gsmUpdateRequest) throws ApiException {
    return this.updateGsmRule(gsmUpdateRequest, Collections.emptyMap());
  }


  /**
   * Gsm - Update
   * Updates a Gsm Rule
   * @param gsmUpdateRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GsmResponse
   * @throws ApiException if fails to make API call
   */
  public GsmResponse updateGsmRule(GsmUpdateRequest gsmUpdateRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = gsmUpdateRequest;
    
    // verify the required parameter 'gsmUpdateRequest' is set
    if (gsmUpdateRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'gsmUpdateRequest' when calling updateGsmRule");
    }
    
    // create path and map variables
    String localVarPath = "/gsm/update";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "admin_api_key" };

    TypeReference<GsmResponse> localVarReturnType = new TypeReference<GsmResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
