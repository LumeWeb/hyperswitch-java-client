/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentLinkResponse
 */
@JsonPropertyOrder({
  PaymentLinkResponse.JSON_PROPERTY_LINK,
  PaymentLinkResponse.JSON_PROPERTY_SECURE_LINK,
  PaymentLinkResponse.JSON_PROPERTY_PAYMENT_LINK_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentLinkResponse {
  public static final String JSON_PROPERTY_LINK = "link";
  private String link;

  public static final String JSON_PROPERTY_SECURE_LINK = "secure_link";
  private JsonNullable<String> secureLink = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_PAYMENT_LINK_ID = "payment_link_id";
  private String paymentLinkId;

  public PaymentLinkResponse() {
  }

  public PaymentLinkResponse link(String link) {
    
    this.link = link;
    return this;
  }

   /**
   * URL for rendering the open payment link
   * @return link
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLink() {
    return link;
  }


  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLink(String link) {
    this.link = link;
  }


  public PaymentLinkResponse secureLink(String secureLink) {
    this.secureLink = JsonNullable.<String>of(secureLink);
    
    return this;
  }

   /**
   * URL for rendering the secure payment link
   * @return secureLink
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSecureLink() {
        return secureLink.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SECURE_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSecureLink_JsonNullable() {
    return secureLink;
  }
  
  @JsonProperty(JSON_PROPERTY_SECURE_LINK)
  public void setSecureLink_JsonNullable(JsonNullable<String> secureLink) {
    this.secureLink = secureLink;
  }

  public void setSecureLink(String secureLink) {
    this.secureLink = JsonNullable.<String>of(secureLink);
  }


  public PaymentLinkResponse paymentLinkId(String paymentLinkId) {
    
    this.paymentLinkId = paymentLinkId;
    return this;
  }

   /**
   * Identifier for the payment link
   * @return paymentLinkId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPaymentLinkId() {
    return paymentLinkId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentLinkId(String paymentLinkId) {
    this.paymentLinkId = paymentLinkId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentLinkResponse paymentLinkResponse = (PaymentLinkResponse) o;
    return Objects.equals(this.link, paymentLinkResponse.link) &&
        equalsNullable(this.secureLink, paymentLinkResponse.secureLink) &&
        Objects.equals(this.paymentLinkId, paymentLinkResponse.paymentLinkId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(link, hashCodeNullable(secureLink), paymentLinkId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentLinkResponse {\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    secureLink: ").append(toIndentedString(secureLink)).append("\n");
    sb.append("    paymentLinkId: ").append(toIndentedString(paymentLinkId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

