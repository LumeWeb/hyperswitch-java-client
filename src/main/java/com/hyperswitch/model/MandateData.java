/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.CustomerAcceptance;
import com.hyperswitch.model.MandateType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Passing this object during payments creates a mandate. The mandate_type sub object is passed by the server.
 */
@JsonPropertyOrder({
  MandateData.JSON_PROPERTY_UPDATE_MANDATE_ID,
  MandateData.JSON_PROPERTY_CUSTOMER_ACCEPTANCE,
  MandateData.JSON_PROPERTY_MANDATE_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MandateData {
  public static final String JSON_PROPERTY_UPDATE_MANDATE_ID = "update_mandate_id";
  private JsonNullable<String> updateMandateId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CUSTOMER_ACCEPTANCE = "customer_acceptance";
  private JsonNullable<CustomerAcceptance> customerAcceptance = JsonNullable.<CustomerAcceptance>undefined();

  public static final String JSON_PROPERTY_MANDATE_TYPE = "mandate_type";
  private JsonNullable<MandateType> mandateType = JsonNullable.<MandateType>undefined();

  public MandateData() {
  }

  public MandateData updateMandateId(@javax.annotation.Nullable String updateMandateId) {
    this.updateMandateId = JsonNullable.<String>of(updateMandateId);
    
    return this;
  }

  /**
   * A way to update the mandate&#39;s payment method details
   * @return updateMandateId
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getUpdateMandateId() {
        return updateMandateId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UPDATE_MANDATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUpdateMandateId_JsonNullable() {
    return updateMandateId;
  }
  
  @JsonProperty(JSON_PROPERTY_UPDATE_MANDATE_ID)
  public void setUpdateMandateId_JsonNullable(JsonNullable<String> updateMandateId) {
    this.updateMandateId = updateMandateId;
  }

  public void setUpdateMandateId(@javax.annotation.Nullable String updateMandateId) {
    this.updateMandateId = JsonNullable.<String>of(updateMandateId);
  }


  public MandateData customerAcceptance(@javax.annotation.Nullable CustomerAcceptance customerAcceptance) {
    this.customerAcceptance = JsonNullable.<CustomerAcceptance>of(customerAcceptance);
    
    return this;
  }

  /**
   * Get customerAcceptance
   * @return customerAcceptance
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public CustomerAcceptance getCustomerAcceptance() {
        return customerAcceptance.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTOMER_ACCEPTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CustomerAcceptance> getCustomerAcceptance_JsonNullable() {
    return customerAcceptance;
  }
  
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ACCEPTANCE)
  public void setCustomerAcceptance_JsonNullable(JsonNullable<CustomerAcceptance> customerAcceptance) {
    this.customerAcceptance = customerAcceptance;
  }

  public void setCustomerAcceptance(@javax.annotation.Nullable CustomerAcceptance customerAcceptance) {
    this.customerAcceptance = JsonNullable.<CustomerAcceptance>of(customerAcceptance);
  }


  public MandateData mandateType(@javax.annotation.Nullable MandateType mandateType) {
    this.mandateType = JsonNullable.<MandateType>of(mandateType);
    
    return this;
  }

  /**
   * Get mandateType
   * @return mandateType
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public MandateType getMandateType() {
        return mandateType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MANDATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<MandateType> getMandateType_JsonNullable() {
    return mandateType;
  }
  
  @JsonProperty(JSON_PROPERTY_MANDATE_TYPE)
  public void setMandateType_JsonNullable(JsonNullable<MandateType> mandateType) {
    this.mandateType = mandateType;
  }

  public void setMandateType(@javax.annotation.Nullable MandateType mandateType) {
    this.mandateType = JsonNullable.<MandateType>of(mandateType);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MandateData mandateData = (MandateData) o;
    return equalsNullable(this.updateMandateId, mandateData.updateMandateId) &&
        equalsNullable(this.customerAcceptance, mandateData.customerAcceptance) &&
        equalsNullable(this.mandateType, mandateData.mandateType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(updateMandateId), hashCodeNullable(customerAcceptance), hashCodeNullable(mandateType));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MandateData {\n");
    sb.append("    updateMandateId: ").append(toIndentedString(updateMandateId)).append("\n");
    sb.append("    customerAcceptance: ").append(toIndentedString(customerAcceptance)).append("\n");
    sb.append("    mandateType: ").append(toIndentedString(mandateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

