/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.client.model.AcceptanceType;
import com.hyperswitch.client.model.OnlineMandate;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This \&quot;CustomerAcceptance\&quot; object is passed during Payments-Confirm request, it enlists the type, time, and mode of acceptance properties related to an acceptance done by the customer. The customer_acceptance sub object is usually passed by the SDK or client.
 */
@JsonPropertyOrder({
  CustomerAcceptance.JSON_PROPERTY_ACCEPTANCE_TYPE,
  CustomerAcceptance.JSON_PROPERTY_ACCEPTED_AT,
  CustomerAcceptance.JSON_PROPERTY_ONLINE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerAcceptance {
  public static final String JSON_PROPERTY_ACCEPTANCE_TYPE = "acceptance_type";
  private AcceptanceType acceptanceType;

  public static final String JSON_PROPERTY_ACCEPTED_AT = "accepted_at";
  private JsonNullable<OffsetDateTime> acceptedAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_ONLINE = "online";
  private JsonNullable<OnlineMandate> online = JsonNullable.<OnlineMandate>undefined();

  public CustomerAcceptance() {
  }

  public CustomerAcceptance acceptanceType(AcceptanceType acceptanceType) {
    
    this.acceptanceType = acceptanceType;
    return this;
  }

   /**
   * Get acceptanceType
   * @return acceptanceType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCEPTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AcceptanceType getAcceptanceType() {
    return acceptanceType;
  }


  @JsonProperty(JSON_PROPERTY_ACCEPTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAcceptanceType(AcceptanceType acceptanceType) {
    this.acceptanceType = acceptanceType;
  }


  public CustomerAcceptance acceptedAt(OffsetDateTime acceptedAt) {
    this.acceptedAt = JsonNullable.<OffsetDateTime>of(acceptedAt);
    
    return this;
  }

   /**
   * Specifying when the customer acceptance was provided
   * @return acceptedAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getAcceptedAt() {
        return acceptedAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACCEPTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getAcceptedAt_JsonNullable() {
    return acceptedAt;
  }
  
  @JsonProperty(JSON_PROPERTY_ACCEPTED_AT)
  public void setAcceptedAt_JsonNullable(JsonNullable<OffsetDateTime> acceptedAt) {
    this.acceptedAt = acceptedAt;
  }

  public void setAcceptedAt(OffsetDateTime acceptedAt) {
    this.acceptedAt = JsonNullable.<OffsetDateTime>of(acceptedAt);
  }


  public CustomerAcceptance online(OnlineMandate online) {
    this.online = JsonNullable.<OnlineMandate>of(online);
    
    return this;
  }

   /**
   * Get online
   * @return online
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OnlineMandate getOnline() {
        return online.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ONLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OnlineMandate> getOnline_JsonNullable() {
    return online;
  }
  
  @JsonProperty(JSON_PROPERTY_ONLINE)
  public void setOnline_JsonNullable(JsonNullable<OnlineMandate> online) {
    this.online = online;
  }

  public void setOnline(OnlineMandate online) {
    this.online = JsonNullable.<OnlineMandate>of(online);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAcceptance customerAcceptance = (CustomerAcceptance) o;
    return Objects.equals(this.acceptanceType, customerAcceptance.acceptanceType) &&
        equalsNullable(this.acceptedAt, customerAcceptance.acceptedAt) &&
        equalsNullable(this.online, customerAcceptance.online);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptanceType, hashCodeNullable(acceptedAt), hashCodeNullable(online));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAcceptance {\n");
    sb.append("    acceptanceType: ").append(toIndentedString(acceptanceType)).append("\n");
    sb.append("    acceptedAt: ").append(toIndentedString(acceptedAt)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

