/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.lumeweb.hyperswitch.api;

import com.lumeweb.hyperswitch.client.ApiClient;
import com.lumeweb.hyperswitch.client.ApiException;
import com.lumeweb.hyperswitch.client.ApiResponse;
import com.lumeweb.hyperswitch.client.Pair;

import com.lumeweb.hyperswitch.model.MerchantAccountCreate;
import com.lumeweb.hyperswitch.model.MerchantAccountResponse;
import com.lumeweb.hyperswitch.model.MerchantAccountUpdate;
import com.lumeweb.hyperswitch.model.ProfileResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class MerchantAccountApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public MerchantAccountApi() {
    this(new ApiClient());
  }

  public MerchantAccountApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Merchant Account - Create
   * Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.  Before creating the merchant account, it is mandatory to create an organization.
   * @param xOrganizationId Organization ID for which the merchant account has to be created. (required)
   * @param merchantAccountCreate  (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse createAMerchantAccount(String xOrganizationId, MerchantAccountCreate merchantAccountCreate) throws ApiException {
    ApiResponse<MerchantAccountResponse> localVarResponse = createAMerchantAccountWithHttpInfo(xOrganizationId, merchantAccountCreate);
    return localVarResponse.getData();
  }

  /**
   * Merchant Account - Create
   * Create a new account for a *merchant* and the *merchant* could be a seller or retailer or client who likes to receive and send payments.  Before creating the merchant account, it is mandatory to create an organization.
   * @param xOrganizationId Organization ID for which the merchant account has to be created. (required)
   * @param merchantAccountCreate  (required)
   * @return ApiResponse&lt;MerchantAccountResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantAccountResponse> createAMerchantAccountWithHttpInfo(String xOrganizationId, MerchantAccountCreate merchantAccountCreate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAMerchantAccountRequestBuilder(xOrganizationId, merchantAccountCreate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAMerchantAccount", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantAccountResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantAccountResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantAccountResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAMerchantAccountRequestBuilder(String xOrganizationId, MerchantAccountCreate merchantAccountCreate) throws ApiException {
    // verify the required parameter 'xOrganizationId' is set
    if (xOrganizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'xOrganizationId' when calling createAMerchantAccount");
    }
    // verify the required parameter 'merchantAccountCreate' is set
    if (merchantAccountCreate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantAccountCreate' when calling createAMerchantAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/merchant_accounts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (xOrganizationId != null) {
      localVarRequestBuilder.header("X-Organization-Id", xOrganizationId.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(merchantAccountCreate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Merchant Account - Profile List
   * List profiles for an Merchant
   * @param id The unique identifier for the Merchant (required)
   * @return List&lt;ProfileResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ProfileResponse> listProfiles(String id) throws ApiException {
    ApiResponse<List<ProfileResponse>> localVarResponse = listProfilesWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Merchant Account - Profile List
   * List profiles for an Merchant
   * @param id The unique identifier for the Merchant (required)
   * @return ApiResponse&lt;List&lt;ProfileResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ProfileResponse>> listProfilesWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listProfilesRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listProfiles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<ProfileResponse>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<ProfileResponse>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<ProfileResponse>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listProfilesRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listProfiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/merchant_accounts/{id}/profiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Merchant Account - Retrieve
   * Retrieve a *merchant* account details.
   * @param id The unique identifier for the merchant account (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse retrieveAMerchantAccount(String id) throws ApiException {
    ApiResponse<MerchantAccountResponse> localVarResponse = retrieveAMerchantAccountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Merchant Account - Retrieve
   * Retrieve a *merchant* account details.
   * @param id The unique identifier for the merchant account (required)
   * @return ApiResponse&lt;MerchantAccountResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantAccountResponse> retrieveAMerchantAccountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveAMerchantAccountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveAMerchantAccount", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantAccountResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantAccountResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantAccountResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveAMerchantAccountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveAMerchantAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/merchant_accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Merchant Account - Update
   * Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc
   * @param id The unique identifier for the merchant account (required)
   * @param merchantAccountUpdate  (required)
   * @return MerchantAccountResponse
   * @throws ApiException if fails to make API call
   */
  public MerchantAccountResponse updateAMerchantAccount(String id, MerchantAccountUpdate merchantAccountUpdate) throws ApiException {
    ApiResponse<MerchantAccountResponse> localVarResponse = updateAMerchantAccountWithHttpInfo(id, merchantAccountUpdate);
    return localVarResponse.getData();
  }

  /**
   * Merchant Account - Update
   * Updates details of an existing merchant account. Helpful in updating merchant details such as email, contact details, or other configuration details like webhook, routing algorithm etc
   * @param id The unique identifier for the merchant account (required)
   * @param merchantAccountUpdate  (required)
   * @return ApiResponse&lt;MerchantAccountResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MerchantAccountResponse> updateAMerchantAccountWithHttpInfo(String id, MerchantAccountUpdate merchantAccountUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAMerchantAccountRequestBuilder(id, merchantAccountUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAMerchantAccount", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<MerchantAccountResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<MerchantAccountResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<MerchantAccountResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAMerchantAccountRequestBuilder(String id, MerchantAccountUpdate merchantAccountUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAMerchantAccount");
    }
    // verify the required parameter 'merchantAccountUpdate' is set
    if (merchantAccountUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantAccountUpdate' when calling updateAMerchantAccount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/merchant_accounts/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(merchantAccountUpdate);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
