/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.BankHolderType;
import com.hyperswitch.model.BankNames;
import com.hyperswitch.model.BankType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AchBankDebitAdditionalData
 */
@JsonPropertyOrder({
  AchBankDebitAdditionalData.JSON_PROPERTY_ACCOUNT_NUMBER,
  AchBankDebitAdditionalData.JSON_PROPERTY_ROUTING_NUMBER,
  AchBankDebitAdditionalData.JSON_PROPERTY_CARD_HOLDER_NAME,
  AchBankDebitAdditionalData.JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME,
  AchBankDebitAdditionalData.JSON_PROPERTY_BANK_NAME,
  AchBankDebitAdditionalData.JSON_PROPERTY_BANK_TYPE,
  AchBankDebitAdditionalData.JSON_PROPERTY_BANK_HOLDER_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AchBankDebitAdditionalData {
  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "account_number";
  private String accountNumber;

  public static final String JSON_PROPERTY_ROUTING_NUMBER = "routing_number";
  private String routingNumber;

  public static final String JSON_PROPERTY_CARD_HOLDER_NAME = "card_holder_name";
  private JsonNullable<String> cardHolderName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME = "bank_account_holder_name";
  private JsonNullable<String> bankAccountHolderName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_BANK_NAME = "bank_name";
  private JsonNullable<BankNames> bankName = JsonNullable.<BankNames>undefined();

  public static final String JSON_PROPERTY_BANK_TYPE = "bank_type";
  private JsonNullable<BankType> bankType = JsonNullable.<BankType>undefined();

  public static final String JSON_PROPERTY_BANK_HOLDER_TYPE = "bank_holder_type";
  private JsonNullable<BankHolderType> bankHolderType = JsonNullable.<BankHolderType>undefined();

  public AchBankDebitAdditionalData() {
  }

  public AchBankDebitAdditionalData accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Partially masked account number for ach bank debit payment
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountNumber() {
    return accountNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public AchBankDebitAdditionalData routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Partially masked routing number for ach bank debit payment
   * @return routingNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRoutingNumber() {
    return routingNumber;
  }


  @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public AchBankDebitAdditionalData cardHolderName(String cardHolderName) {
    this.cardHolderName = JsonNullable.<String>of(cardHolderName);
    
    return this;
  }

   /**
   * Card holder&#39;s name
   * @return cardHolderName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getCardHolderName() {
        return cardHolderName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CARD_HOLDER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCardHolderName_JsonNullable() {
    return cardHolderName;
  }
  
  @JsonProperty(JSON_PROPERTY_CARD_HOLDER_NAME)
  public void setCardHolderName_JsonNullable(JsonNullable<String> cardHolderName) {
    this.cardHolderName = cardHolderName;
  }

  public void setCardHolderName(String cardHolderName) {
    this.cardHolderName = JsonNullable.<String>of(cardHolderName);
  }


  public AchBankDebitAdditionalData bankAccountHolderName(String bankAccountHolderName) {
    this.bankAccountHolderName = JsonNullable.<String>of(bankAccountHolderName);
    
    return this;
  }

   /**
   * Bank account&#39;s owner name
   * @return bankAccountHolderName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getBankAccountHolderName() {
        return bankAccountHolderName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getBankAccountHolderName_JsonNullable() {
    return bankAccountHolderName;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_ACCOUNT_HOLDER_NAME)
  public void setBankAccountHolderName_JsonNullable(JsonNullable<String> bankAccountHolderName) {
    this.bankAccountHolderName = bankAccountHolderName;
  }

  public void setBankAccountHolderName(String bankAccountHolderName) {
    this.bankAccountHolderName = JsonNullable.<String>of(bankAccountHolderName);
  }


  public AchBankDebitAdditionalData bankName(BankNames bankName) {
    this.bankName = JsonNullable.<BankNames>of(bankName);
    
    return this;
  }

   /**
   * Get bankName
   * @return bankName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BankNames getBankName() {
        return bankName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BankNames> getBankName_JsonNullable() {
    return bankName;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_NAME)
  public void setBankName_JsonNullable(JsonNullable<BankNames> bankName) {
    this.bankName = bankName;
  }

  public void setBankName(BankNames bankName) {
    this.bankName = JsonNullable.<BankNames>of(bankName);
  }


  public AchBankDebitAdditionalData bankType(BankType bankType) {
    this.bankType = JsonNullable.<BankType>of(bankType);
    
    return this;
  }

   /**
   * Get bankType
   * @return bankType
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BankType getBankType() {
        return bankType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BankType> getBankType_JsonNullable() {
    return bankType;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_TYPE)
  public void setBankType_JsonNullable(JsonNullable<BankType> bankType) {
    this.bankType = bankType;
  }

  public void setBankType(BankType bankType) {
    this.bankType = JsonNullable.<BankType>of(bankType);
  }


  public AchBankDebitAdditionalData bankHolderType(BankHolderType bankHolderType) {
    this.bankHolderType = JsonNullable.<BankHolderType>of(bankHolderType);
    
    return this;
  }

   /**
   * Get bankHolderType
   * @return bankHolderType
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BankHolderType getBankHolderType() {
        return bankHolderType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_HOLDER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BankHolderType> getBankHolderType_JsonNullable() {
    return bankHolderType;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_HOLDER_TYPE)
  public void setBankHolderType_JsonNullable(JsonNullable<BankHolderType> bankHolderType) {
    this.bankHolderType = bankHolderType;
  }

  public void setBankHolderType(BankHolderType bankHolderType) {
    this.bankHolderType = JsonNullable.<BankHolderType>of(bankHolderType);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchBankDebitAdditionalData achBankDebitAdditionalData = (AchBankDebitAdditionalData) o;
    return Objects.equals(this.accountNumber, achBankDebitAdditionalData.accountNumber) &&
        Objects.equals(this.routingNumber, achBankDebitAdditionalData.routingNumber) &&
        equalsNullable(this.cardHolderName, achBankDebitAdditionalData.cardHolderName) &&
        equalsNullable(this.bankAccountHolderName, achBankDebitAdditionalData.bankAccountHolderName) &&
        equalsNullable(this.bankName, achBankDebitAdditionalData.bankName) &&
        equalsNullable(this.bankType, achBankDebitAdditionalData.bankType) &&
        equalsNullable(this.bankHolderType, achBankDebitAdditionalData.bankHolderType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, routingNumber, hashCodeNullable(cardHolderName), hashCodeNullable(bankAccountHolderName), hashCodeNullable(bankName), hashCodeNullable(bankType), hashCodeNullable(bankHolderType));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchBankDebitAdditionalData {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    cardHolderName: ").append(toIndentedString(cardHolderName)).append("\n");
    sb.append("    bankAccountHolderName: ").append(toIndentedString(bankAccountHolderName)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankType: ").append(toIndentedString(bankType)).append("\n");
    sb.append("    bankHolderType: ").append(toIndentedString(bankHolderType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

