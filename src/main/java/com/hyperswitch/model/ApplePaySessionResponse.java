/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.hyperswitch.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.hyperswitch.model.NoThirdPartySdkSessionResponse;
import com.hyperswitch.model.SecretInfoToInitiateSdk;
import com.hyperswitch.model.ThirdPartySdkSessionResponse;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ApplePaySessionResponse
 */
@JsonPropertyOrder({
  ApplePaySessionResponse.JSON_PROPERTY_SECRETS,
  ApplePaySessionResponse.JSON_PROPERTY_EPOCH_TIMESTAMP,
  ApplePaySessionResponse.JSON_PROPERTY_EXPIRES_AT,
  ApplePaySessionResponse.JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER,
  ApplePaySessionResponse.JSON_PROPERTY_NONCE,
  ApplePaySessionResponse.JSON_PROPERTY_MERCHANT_IDENTIFIER,
  ApplePaySessionResponse.JSON_PROPERTY_DOMAIN_NAME,
  ApplePaySessionResponse.JSON_PROPERTY_DISPLAY_NAME,
  ApplePaySessionResponse.JSON_PROPERTY_SIGNATURE,
  ApplePaySessionResponse.JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER,
  ApplePaySessionResponse.JSON_PROPERTY_RETRIES,
  ApplePaySessionResponse.JSON_PROPERTY_PSP_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplePaySessionResponse {
  public static final String JSON_PROPERTY_SECRETS = "secrets";
  private SecretInfoToInitiateSdk secrets;

  public static final String JSON_PROPERTY_EPOCH_TIMESTAMP = "epoch_timestamp";
  private Long epochTimestamp;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expires_at";
  private Long expiresAt;

  public static final String JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER = "merchant_session_identifier";
  private String merchantSessionIdentifier;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  private String nonce;

  public static final String JSON_PROPERTY_MERCHANT_IDENTIFIER = "merchant_identifier";
  private String merchantIdentifier;

  public static final String JSON_PROPERTY_DOMAIN_NAME = "domain_name";
  private String domainName;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  private String displayName;

  public static final String JSON_PROPERTY_SIGNATURE = "signature";
  private String signature;

  public static final String JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER = "operational_analytics_identifier";
  private String operationalAnalyticsIdentifier;

  public static final String JSON_PROPERTY_RETRIES = "retries";
  private Integer retries;

  public static final String JSON_PROPERTY_PSP_ID = "psp_id";
  private String pspId;

  public ApplePaySessionResponse() {
  }

  public ApplePaySessionResponse secrets(SecretInfoToInitiateSdk secrets) {
    
    this.secrets = secrets;
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SecretInfoToInitiateSdk getSecrets() {
    return secrets;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSecrets(SecretInfoToInitiateSdk secrets) {
    this.secrets = secrets;
  }


  public ApplePaySessionResponse epochTimestamp(Long epochTimestamp) {
    
    this.epochTimestamp = epochTimestamp;
    return this;
  }

   /**
   * Timestamp at which session is requested
   * minimum: 0
   * @return epochTimestamp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EPOCH_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getEpochTimestamp() {
    return epochTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_EPOCH_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEpochTimestamp(Long epochTimestamp) {
    this.epochTimestamp = epochTimestamp;
  }


  public ApplePaySessionResponse expiresAt(Long expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Timestamp at which session expires
   * minimum: 0
   * @return expiresAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(Long expiresAt) {
    this.expiresAt = expiresAt;
  }


  public ApplePaySessionResponse merchantSessionIdentifier(String merchantSessionIdentifier) {
    
    this.merchantSessionIdentifier = merchantSessionIdentifier;
    return this;
  }

   /**
   * The identifier for the merchant session
   * @return merchantSessionIdentifier
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantSessionIdentifier() {
    return merchantSessionIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_SESSION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantSessionIdentifier(String merchantSessionIdentifier) {
    this.merchantSessionIdentifier = merchantSessionIdentifier;
  }


  public ApplePaySessionResponse nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Apple pay generated unique ID (UUID) value
   * @return nonce
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public ApplePaySessionResponse merchantIdentifier(String merchantIdentifier) {
    
    this.merchantIdentifier = merchantIdentifier;
    return this;
  }

   /**
   * The identifier for the merchant
   * @return merchantIdentifier
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantIdentifier() {
    return merchantIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantIdentifier(String merchantIdentifier) {
    this.merchantIdentifier = merchantIdentifier;
  }


  public ApplePaySessionResponse domainName(String domainName) {
    
    this.domainName = domainName;
    return this;
  }

   /**
   * The domain name of the merchant which is registered in Apple Pay
   * @return domainName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDomainName() {
    return domainName;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public ApplePaySessionResponse displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * The name to be displayed on Apple Pay button
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ApplePaySessionResponse signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * A string which represents the properties of a payment
   * @return signature
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSignature() {
    return signature;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignature(String signature) {
    this.signature = signature;
  }


  public ApplePaySessionResponse operationalAnalyticsIdentifier(String operationalAnalyticsIdentifier) {
    
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
    return this;
  }

   /**
   * The identifier for the operational analytics
   * @return operationalAnalyticsIdentifier
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOperationalAnalyticsIdentifier() {
    return operationalAnalyticsIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_OPERATIONAL_ANALYTICS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOperationalAnalyticsIdentifier(String operationalAnalyticsIdentifier) {
    this.operationalAnalyticsIdentifier = operationalAnalyticsIdentifier;
  }


  public ApplePaySessionResponse retries(Integer retries) {
    
    this.retries = retries;
    return this;
  }

   /**
   * The number of retries to get the session response
   * minimum: 0
   * @return retries
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRetries() {
    return retries;
  }


  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  public ApplePaySessionResponse pspId(String pspId) {
    
    this.pspId = pspId;
    return this;
  }

   /**
   * The identifier for the connector transaction
   * @return pspId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PSP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPspId() {
    return pspId;
  }


  @JsonProperty(JSON_PROPERTY_PSP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPspId(String pspId) {
    this.pspId = pspId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplePaySessionResponse applePaySessionResponse = (ApplePaySessionResponse) o;
    return Objects.equals(this.secrets, applePaySessionResponse.secrets) &&
        Objects.equals(this.epochTimestamp, applePaySessionResponse.epochTimestamp) &&
        Objects.equals(this.expiresAt, applePaySessionResponse.expiresAt) &&
        Objects.equals(this.merchantSessionIdentifier, applePaySessionResponse.merchantSessionIdentifier) &&
        Objects.equals(this.nonce, applePaySessionResponse.nonce) &&
        Objects.equals(this.merchantIdentifier, applePaySessionResponse.merchantIdentifier) &&
        Objects.equals(this.domainName, applePaySessionResponse.domainName) &&
        Objects.equals(this.displayName, applePaySessionResponse.displayName) &&
        Objects.equals(this.signature, applePaySessionResponse.signature) &&
        Objects.equals(this.operationalAnalyticsIdentifier, applePaySessionResponse.operationalAnalyticsIdentifier) &&
        Objects.equals(this.retries, applePaySessionResponse.retries) &&
        Objects.equals(this.pspId, applePaySessionResponse.pspId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secrets, epochTimestamp, expiresAt, merchantSessionIdentifier, nonce, merchantIdentifier, domainName, displayName, signature, operationalAnalyticsIdentifier, retries, pspId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplePaySessionResponse {\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    epochTimestamp: ").append(toIndentedString(epochTimestamp)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    merchantSessionIdentifier: ").append(toIndentedString(merchantSessionIdentifier)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    merchantIdentifier: ").append(toIndentedString(merchantIdentifier)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    operationalAnalyticsIdentifier: ").append(toIndentedString(operationalAnalyticsIdentifier)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    pspId: ").append(toIndentedString(pspId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

