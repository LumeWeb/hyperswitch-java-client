/*
 * Hyperswitch - API Documentation
 *  ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: hyperswitch@juspay.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lumeweb.hyperswitch.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lumeweb.hyperswitch.model.Currency;
import com.lumeweb.hyperswitch.model.SurchargeCalculationOverride;
import com.lumeweb.hyperswitch.model.TaxCalculationOverride;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.lumeweb.hyperswitch.client.ApiClient;
/**
 * AmountDetailsResponse
 */
@JsonPropertyOrder({
  AmountDetailsResponse.JSON_PROPERTY_ORDER_AMOUNT,
  AmountDetailsResponse.JSON_PROPERTY_CURRENCY,
  AmountDetailsResponse.JSON_PROPERTY_SHIPPING_COST,
  AmountDetailsResponse.JSON_PROPERTY_ORDER_TAX_AMOUNT,
  AmountDetailsResponse.JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION,
  AmountDetailsResponse.JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION,
  AmountDetailsResponse.JSON_PROPERTY_SURCHARGE_AMOUNT,
  AmountDetailsResponse.JSON_PROPERTY_TAX_ON_SURCHARGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0-SNAPSHOT")
public class AmountDetailsResponse {
  public static final String JSON_PROPERTY_ORDER_AMOUNT = "order_amount";
  @javax.annotation.Nonnull
  private Long orderAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  @javax.annotation.Nonnull
  private Currency currency;

  public static final String JSON_PROPERTY_SHIPPING_COST = "shipping_cost";
  private JsonNullable<Long> shippingCost = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_ORDER_TAX_AMOUNT = "order_tax_amount";
  private JsonNullable<Long> orderTaxAmount = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION = "skip_external_tax_calculation";
  @javax.annotation.Nonnull
  private TaxCalculationOverride skipExternalTaxCalculation;

  public static final String JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION = "skip_surcharge_calculation";
  @javax.annotation.Nonnull
  private SurchargeCalculationOverride skipSurchargeCalculation;

  public static final String JSON_PROPERTY_SURCHARGE_AMOUNT = "surcharge_amount";
  private JsonNullable<Long> surchargeAmount = JsonNullable.<Long>undefined();

  public static final String JSON_PROPERTY_TAX_ON_SURCHARGE = "tax_on_surcharge";
  private JsonNullable<Long> taxOnSurcharge = JsonNullable.<Long>undefined();

  public AmountDetailsResponse() { 
  }

  public AmountDetailsResponse orderAmount(@javax.annotation.Nonnull Long orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

  /**
   * The payment amount. Amount for the payment in the lowest denomination of the currency, (i.e) in cents for USD denomination, in yen for JPY denomination etc. E.g., Pass 100 to charge $1.00 and 1 for 1¥ since ¥ is a zero-decimal currency. Read more about [the Decimal and Non-Decimal Currencies](https://github.com/juspay/hyperswitch/wiki/Decimal-and-Non%E2%80%90Decimal-Currencies)
   * minimum: 0
   * @return orderAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getOrderAmount() {
    return orderAmount;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderAmount(@javax.annotation.Nonnull Long orderAmount) {
    this.orderAmount = orderAmount;
  }


  public AmountDetailsResponse currency(@javax.annotation.Nonnull Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(@javax.annotation.Nonnull Currency currency) {
    this.currency = currency;
  }


  public AmountDetailsResponse shippingCost(@javax.annotation.Nullable Long shippingCost) {
    this.shippingCost = JsonNullable.<Long>of(shippingCost);
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return shippingCost
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getShippingCost() {
        return shippingCost.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getShippingCost_JsonNullable() {
    return shippingCost;
  }
  
  @JsonProperty(JSON_PROPERTY_SHIPPING_COST)
  public void setShippingCost_JsonNullable(JsonNullable<Long> shippingCost) {
    this.shippingCost = shippingCost;
  }

  public void setShippingCost(@javax.annotation.Nullable Long shippingCost) {
    this.shippingCost = JsonNullable.<Long>of(shippingCost);
  }


  public AmountDetailsResponse orderTaxAmount(@javax.annotation.Nullable Long orderTaxAmount) {
    this.orderTaxAmount = JsonNullable.<Long>of(orderTaxAmount);
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return orderTaxAmount
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getOrderTaxAmount() {
        return orderTaxAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORDER_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getOrderTaxAmount_JsonNullable() {
    return orderTaxAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_ORDER_TAX_AMOUNT)
  public void setOrderTaxAmount_JsonNullable(JsonNullable<Long> orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }

  public void setOrderTaxAmount(@javax.annotation.Nullable Long orderTaxAmount) {
    this.orderTaxAmount = JsonNullable.<Long>of(orderTaxAmount);
  }


  public AmountDetailsResponse skipExternalTaxCalculation(@javax.annotation.Nonnull TaxCalculationOverride skipExternalTaxCalculation) {
    this.skipExternalTaxCalculation = skipExternalTaxCalculation;
    return this;
  }

  /**
   * Get skipExternalTaxCalculation
   * @return skipExternalTaxCalculation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TaxCalculationOverride getSkipExternalTaxCalculation() {
    return skipExternalTaxCalculation;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_EXTERNAL_TAX_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkipExternalTaxCalculation(@javax.annotation.Nonnull TaxCalculationOverride skipExternalTaxCalculation) {
    this.skipExternalTaxCalculation = skipExternalTaxCalculation;
  }


  public AmountDetailsResponse skipSurchargeCalculation(@javax.annotation.Nonnull SurchargeCalculationOverride skipSurchargeCalculation) {
    this.skipSurchargeCalculation = skipSurchargeCalculation;
    return this;
  }

  /**
   * Get skipSurchargeCalculation
   * @return skipSurchargeCalculation
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public SurchargeCalculationOverride getSkipSurchargeCalculation() {
    return skipSurchargeCalculation;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_SURCHARGE_CALCULATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkipSurchargeCalculation(@javax.annotation.Nonnull SurchargeCalculationOverride skipSurchargeCalculation) {
    this.skipSurchargeCalculation = skipSurchargeCalculation;
  }


  public AmountDetailsResponse surchargeAmount(@javax.annotation.Nullable Long surchargeAmount) {
    this.surchargeAmount = JsonNullable.<Long>of(surchargeAmount);
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return surchargeAmount
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getSurchargeAmount() {
        return surchargeAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SURCHARGE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getSurchargeAmount_JsonNullable() {
    return surchargeAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_SURCHARGE_AMOUNT)
  public void setSurchargeAmount_JsonNullable(JsonNullable<Long> surchargeAmount) {
    this.surchargeAmount = surchargeAmount;
  }

  public void setSurchargeAmount(@javax.annotation.Nullable Long surchargeAmount) {
    this.surchargeAmount = JsonNullable.<Long>of(surchargeAmount);
  }


  public AmountDetailsResponse taxOnSurcharge(@javax.annotation.Nullable Long taxOnSurcharge) {
    this.taxOnSurcharge = JsonNullable.<Long>of(taxOnSurcharge);
    return this;
  }

  /**
   * This Unit struct represents MinorUnit in which core amount works
   * @return taxOnSurcharge
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Long getTaxOnSurcharge() {
        return taxOnSurcharge.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAX_ON_SURCHARGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Long> getTaxOnSurcharge_JsonNullable() {
    return taxOnSurcharge;
  }
  
  @JsonProperty(JSON_PROPERTY_TAX_ON_SURCHARGE)
  public void setTaxOnSurcharge_JsonNullable(JsonNullable<Long> taxOnSurcharge) {
    this.taxOnSurcharge = taxOnSurcharge;
  }

  public void setTaxOnSurcharge(@javax.annotation.Nullable Long taxOnSurcharge) {
    this.taxOnSurcharge = JsonNullable.<Long>of(taxOnSurcharge);
  }


  /**
   * Return true if this AmountDetailsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmountDetailsResponse amountDetailsResponse = (AmountDetailsResponse) o;
    return Objects.equals(this.orderAmount, amountDetailsResponse.orderAmount) &&
        Objects.equals(this.currency, amountDetailsResponse.currency) &&
        equalsNullable(this.shippingCost, amountDetailsResponse.shippingCost) &&
        equalsNullable(this.orderTaxAmount, amountDetailsResponse.orderTaxAmount) &&
        Objects.equals(this.skipExternalTaxCalculation, amountDetailsResponse.skipExternalTaxCalculation) &&
        Objects.equals(this.skipSurchargeCalculation, amountDetailsResponse.skipSurchargeCalculation) &&
        equalsNullable(this.surchargeAmount, amountDetailsResponse.surchargeAmount) &&
        equalsNullable(this.taxOnSurcharge, amountDetailsResponse.taxOnSurcharge);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderAmount, currency, hashCodeNullable(shippingCost), hashCodeNullable(orderTaxAmount), skipExternalTaxCalculation, skipSurchargeCalculation, hashCodeNullable(surchargeAmount), hashCodeNullable(taxOnSurcharge));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmountDetailsResponse {\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    skipExternalTaxCalculation: ").append(toIndentedString(skipExternalTaxCalculation)).append("\n");
    sb.append("    skipSurchargeCalculation: ").append(toIndentedString(skipSurchargeCalculation)).append("\n");
    sb.append("    surchargeAmount: ").append(toIndentedString(surchargeAmount)).append("\n");
    sb.append("    taxOnSurcharge: ").append(toIndentedString(taxOnSurcharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `order_amount` to the URL query string
    if (getOrderAmount() != null) {
      joiner.add(String.format("%sorder_amount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOrderAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      joiner.add(String.format("%scurrency%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCurrency()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `shipping_cost` to the URL query string
    if (getShippingCost() != null) {
      joiner.add(String.format("%sshipping_cost%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getShippingCost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `order_tax_amount` to the URL query string
    if (getOrderTaxAmount() != null) {
      joiner.add(String.format("%sorder_tax_amount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOrderTaxAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `skip_external_tax_calculation` to the URL query string
    if (getSkipExternalTaxCalculation() != null) {
      joiner.add(String.format("%sskip_external_tax_calculation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSkipExternalTaxCalculation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `skip_surcharge_calculation` to the URL query string
    if (getSkipSurchargeCalculation() != null) {
      joiner.add(String.format("%sskip_surcharge_calculation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSkipSurchargeCalculation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `surcharge_amount` to the URL query string
    if (getSurchargeAmount() != null) {
      joiner.add(String.format("%ssurcharge_amount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSurchargeAmount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tax_on_surcharge` to the URL query string
    if (getTaxOnSurcharge() != null) {
      joiner.add(String.format("%stax_on_surcharge%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTaxOnSurcharge()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

